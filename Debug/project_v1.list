
project_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bc4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08005d64  08005d64  00015d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dc8  08005dc8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005dc8  08005dc8  00015dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005dd0  08005dd0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dd0  08005dd0  00015dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005dd4  08005dd4  00015dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005dd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  20000074  08005e4c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08005e4c  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d456  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001eb7  00000000  00000000  0002d4fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dd0  00000000  00000000  0002f3b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cd8  00000000  00000000  00030188  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000164b2  00000000  00000000  00030e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009f03  00000000  00000000  00047312  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00091cc7  00000000  00000000  00051215  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e2edc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d30  00000000  00000000  000e2f58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005d4c 	.word	0x08005d4c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005d4c 	.word	0x08005d4c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <dec_to_7seg>:
static void MX_TIM9_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */

void dec_to_7seg(uint8_t number) //transforming digits to apropriate display led pins
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
	switch (number)
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	2b09      	cmp	r3, #9
 800058e:	f200 817f 	bhi.w	8000890 <dec_to_7seg+0x310>
 8000592:	a201      	add	r2, pc, #4	; (adr r2, 8000598 <dec_to_7seg+0x18>)
 8000594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000598:	080005c1 	.word	0x080005c1
 800059c:	08000609 	.word	0x08000609
 80005a0:	08000651 	.word	0x08000651
 80005a4:	08000699 	.word	0x08000699
 80005a8:	080006e1 	.word	0x080006e1
 80005ac:	08000729 	.word	0x08000729
 80005b0:	08000771 	.word	0x08000771
 80005b4:	080007b9 	.word	0x080007b9
 80005b8:	08000801 	.word	0x08000801
 80005bc:	08000849 	.word	0x08000849
	{
		case 0:
			HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	2140      	movs	r1, #64	; 0x40
 80005c4:	48b4      	ldr	r0, [pc, #720]	; (8000898 <dec_to_7seg+0x318>)
 80005c6:	f002 fc5b 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_SET);
 80005ca:	2201      	movs	r2, #1
 80005cc:	2110      	movs	r1, #16
 80005ce:	48b2      	ldr	r0, [pc, #712]	; (8000898 <dec_to_7seg+0x318>)
 80005d0:	f002 fc56 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	2108      	movs	r1, #8
 80005d8:	48af      	ldr	r0, [pc, #700]	; (8000898 <dec_to_7seg+0x318>)
 80005da:	f002 fc51 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_SET);
 80005de:	2201      	movs	r2, #1
 80005e0:	2102      	movs	r1, #2
 80005e2:	48ad      	ldr	r0, [pc, #692]	; (8000898 <dec_to_7seg+0x318>)
 80005e4:	f002 fc4c 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	2104      	movs	r1, #4
 80005ec:	48aa      	ldr	r0, [pc, #680]	; (8000898 <dec_to_7seg+0x318>)
 80005ee:	f002 fc47 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_SET);
 80005f2:	2201      	movs	r2, #1
 80005f4:	2120      	movs	r1, #32
 80005f6:	48a8      	ldr	r0, [pc, #672]	; (8000898 <dec_to_7seg+0x318>)
 80005f8:	f002 fc42 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2101      	movs	r1, #1
 8000600:	48a5      	ldr	r0, [pc, #660]	; (8000898 <dec_to_7seg+0x318>)
 8000602:	f002 fc3d 	bl	8002e80 <HAL_GPIO_WritePin>
			break;
 8000606:	e143      	b.n	8000890 <dec_to_7seg+0x310>
		case 1:
			HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2140      	movs	r1, #64	; 0x40
 800060c:	48a2      	ldr	r0, [pc, #648]	; (8000898 <dec_to_7seg+0x318>)
 800060e:	f002 fc37 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_SET);
 8000612:	2201      	movs	r2, #1
 8000614:	2110      	movs	r1, #16
 8000616:	48a0      	ldr	r0, [pc, #640]	; (8000898 <dec_to_7seg+0x318>)
 8000618:	f002 fc32 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_SET);
 800061c:	2201      	movs	r2, #1
 800061e:	2108      	movs	r1, #8
 8000620:	489d      	ldr	r0, [pc, #628]	; (8000898 <dec_to_7seg+0x318>)
 8000622:	f002 fc2d 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	2102      	movs	r1, #2
 800062a:	489b      	ldr	r0, [pc, #620]	; (8000898 <dec_to_7seg+0x318>)
 800062c:	f002 fc28 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	2104      	movs	r1, #4
 8000634:	4898      	ldr	r0, [pc, #608]	; (8000898 <dec_to_7seg+0x318>)
 8000636:	f002 fc23 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	2120      	movs	r1, #32
 800063e:	4896      	ldr	r0, [pc, #600]	; (8000898 <dec_to_7seg+0x318>)
 8000640:	f002 fc1e 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	2101      	movs	r1, #1
 8000648:	4893      	ldr	r0, [pc, #588]	; (8000898 <dec_to_7seg+0x318>)
 800064a:	f002 fc19 	bl	8002e80 <HAL_GPIO_WritePin>
			break;
 800064e:	e11f      	b.n	8000890 <dec_to_7seg+0x310>
		case 2:
			HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_SET);
 8000650:	2201      	movs	r2, #1
 8000652:	2140      	movs	r1, #64	; 0x40
 8000654:	4890      	ldr	r0, [pc, #576]	; (8000898 <dec_to_7seg+0x318>)
 8000656:	f002 fc13 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_SET);
 800065a:	2201      	movs	r2, #1
 800065c:	2110      	movs	r1, #16
 800065e:	488e      	ldr	r0, [pc, #568]	; (8000898 <dec_to_7seg+0x318>)
 8000660:	f002 fc0e 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	2108      	movs	r1, #8
 8000668:	488b      	ldr	r0, [pc, #556]	; (8000898 <dec_to_7seg+0x318>)
 800066a:	f002 fc09 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	2102      	movs	r1, #2
 8000672:	4889      	ldr	r0, [pc, #548]	; (8000898 <dec_to_7seg+0x318>)
 8000674:	f002 fc04 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_SET);
 8000678:	2201      	movs	r2, #1
 800067a:	2104      	movs	r1, #4
 800067c:	4886      	ldr	r0, [pc, #536]	; (8000898 <dec_to_7seg+0x318>)
 800067e:	f002 fbff 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	2120      	movs	r1, #32
 8000686:	4884      	ldr	r0, [pc, #528]	; (8000898 <dec_to_7seg+0x318>)
 8000688:	f002 fbfa 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_SET);
 800068c:	2201      	movs	r2, #1
 800068e:	2101      	movs	r1, #1
 8000690:	4881      	ldr	r0, [pc, #516]	; (8000898 <dec_to_7seg+0x318>)
 8000692:	f002 fbf5 	bl	8002e80 <HAL_GPIO_WritePin>
			break;
 8000696:	e0fb      	b.n	8000890 <dec_to_7seg+0x310>
		case 3:
			HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_SET);
 8000698:	2201      	movs	r2, #1
 800069a:	2140      	movs	r1, #64	; 0x40
 800069c:	487e      	ldr	r0, [pc, #504]	; (8000898 <dec_to_7seg+0x318>)
 800069e:	f002 fbef 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_SET);
 80006a2:	2201      	movs	r2, #1
 80006a4:	2110      	movs	r1, #16
 80006a6:	487c      	ldr	r0, [pc, #496]	; (8000898 <dec_to_7seg+0x318>)
 80006a8:	f002 fbea 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_SET);
 80006ac:	2201      	movs	r2, #1
 80006ae:	2108      	movs	r1, #8
 80006b0:	4879      	ldr	r0, [pc, #484]	; (8000898 <dec_to_7seg+0x318>)
 80006b2:	f002 fbe5 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_SET);
 80006b6:	2201      	movs	r2, #1
 80006b8:	2102      	movs	r1, #2
 80006ba:	4877      	ldr	r0, [pc, #476]	; (8000898 <dec_to_7seg+0x318>)
 80006bc:	f002 fbe0 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2104      	movs	r1, #4
 80006c4:	4874      	ldr	r0, [pc, #464]	; (8000898 <dec_to_7seg+0x318>)
 80006c6:	f002 fbdb 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2120      	movs	r1, #32
 80006ce:	4872      	ldr	r0, [pc, #456]	; (8000898 <dec_to_7seg+0x318>)
 80006d0:	f002 fbd6 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_SET);
 80006d4:	2201      	movs	r2, #1
 80006d6:	2101      	movs	r1, #1
 80006d8:	486f      	ldr	r0, [pc, #444]	; (8000898 <dec_to_7seg+0x318>)
 80006da:	f002 fbd1 	bl	8002e80 <HAL_GPIO_WritePin>
			break;
 80006de:	e0d7      	b.n	8000890 <dec_to_7seg+0x310>
		case 4:
			HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2140      	movs	r1, #64	; 0x40
 80006e4:	486c      	ldr	r0, [pc, #432]	; (8000898 <dec_to_7seg+0x318>)
 80006e6:	f002 fbcb 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_SET);
 80006ea:	2201      	movs	r2, #1
 80006ec:	2110      	movs	r1, #16
 80006ee:	486a      	ldr	r0, [pc, #424]	; (8000898 <dec_to_7seg+0x318>)
 80006f0:	f002 fbc6 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_SET);
 80006f4:	2201      	movs	r2, #1
 80006f6:	2108      	movs	r1, #8
 80006f8:	4867      	ldr	r0, [pc, #412]	; (8000898 <dec_to_7seg+0x318>)
 80006fa:	f002 fbc1 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2102      	movs	r1, #2
 8000702:	4865      	ldr	r0, [pc, #404]	; (8000898 <dec_to_7seg+0x318>)
 8000704:	f002 fbbc 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	2104      	movs	r1, #4
 800070c:	4862      	ldr	r0, [pc, #392]	; (8000898 <dec_to_7seg+0x318>)
 800070e:	f002 fbb7 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_SET);
 8000712:	2201      	movs	r2, #1
 8000714:	2120      	movs	r1, #32
 8000716:	4860      	ldr	r0, [pc, #384]	; (8000898 <dec_to_7seg+0x318>)
 8000718:	f002 fbb2 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_SET);
 800071c:	2201      	movs	r2, #1
 800071e:	2101      	movs	r1, #1
 8000720:	485d      	ldr	r0, [pc, #372]	; (8000898 <dec_to_7seg+0x318>)
 8000722:	f002 fbad 	bl	8002e80 <HAL_GPIO_WritePin>
			break;
 8000726:	e0b3      	b.n	8000890 <dec_to_7seg+0x310>
		case 5:
			HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_SET);
 8000728:	2201      	movs	r2, #1
 800072a:	2140      	movs	r1, #64	; 0x40
 800072c:	485a      	ldr	r0, [pc, #360]	; (8000898 <dec_to_7seg+0x318>)
 800072e:	f002 fba7 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	2110      	movs	r1, #16
 8000736:	4858      	ldr	r0, [pc, #352]	; (8000898 <dec_to_7seg+0x318>)
 8000738:	f002 fba2 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_SET);
 800073c:	2201      	movs	r2, #1
 800073e:	2108      	movs	r1, #8
 8000740:	4855      	ldr	r0, [pc, #340]	; (8000898 <dec_to_7seg+0x318>)
 8000742:	f002 fb9d 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_SET);
 8000746:	2201      	movs	r2, #1
 8000748:	2102      	movs	r1, #2
 800074a:	4853      	ldr	r0, [pc, #332]	; (8000898 <dec_to_7seg+0x318>)
 800074c:	f002 fb98 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	2104      	movs	r1, #4
 8000754:	4850      	ldr	r0, [pc, #320]	; (8000898 <dec_to_7seg+0x318>)
 8000756:	f002 fb93 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_SET);
 800075a:	2201      	movs	r2, #1
 800075c:	2120      	movs	r1, #32
 800075e:	484e      	ldr	r0, [pc, #312]	; (8000898 <dec_to_7seg+0x318>)
 8000760:	f002 fb8e 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_SET);
 8000764:	2201      	movs	r2, #1
 8000766:	2101      	movs	r1, #1
 8000768:	484b      	ldr	r0, [pc, #300]	; (8000898 <dec_to_7seg+0x318>)
 800076a:	f002 fb89 	bl	8002e80 <HAL_GPIO_WritePin>
			break;
 800076e:	e08f      	b.n	8000890 <dec_to_7seg+0x310>
		case 6:
			HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_SET);
 8000770:	2201      	movs	r2, #1
 8000772:	2140      	movs	r1, #64	; 0x40
 8000774:	4848      	ldr	r0, [pc, #288]	; (8000898 <dec_to_7seg+0x318>)
 8000776:	f002 fb83 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2110      	movs	r1, #16
 800077e:	4846      	ldr	r0, [pc, #280]	; (8000898 <dec_to_7seg+0x318>)
 8000780:	f002 fb7e 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_SET);
 8000784:	2201      	movs	r2, #1
 8000786:	2108      	movs	r1, #8
 8000788:	4843      	ldr	r0, [pc, #268]	; (8000898 <dec_to_7seg+0x318>)
 800078a:	f002 fb79 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_SET);
 800078e:	2201      	movs	r2, #1
 8000790:	2102      	movs	r1, #2
 8000792:	4841      	ldr	r0, [pc, #260]	; (8000898 <dec_to_7seg+0x318>)
 8000794:	f002 fb74 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_SET);
 8000798:	2201      	movs	r2, #1
 800079a:	2104      	movs	r1, #4
 800079c:	483e      	ldr	r0, [pc, #248]	; (8000898 <dec_to_7seg+0x318>)
 800079e:	f002 fb6f 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_SET);
 80007a2:	2201      	movs	r2, #1
 80007a4:	2120      	movs	r1, #32
 80007a6:	483c      	ldr	r0, [pc, #240]	; (8000898 <dec_to_7seg+0x318>)
 80007a8:	f002 fb6a 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_SET);
 80007ac:	2201      	movs	r2, #1
 80007ae:	2101      	movs	r1, #1
 80007b0:	4839      	ldr	r0, [pc, #228]	; (8000898 <dec_to_7seg+0x318>)
 80007b2:	f002 fb65 	bl	8002e80 <HAL_GPIO_WritePin>
			break;
 80007b6:	e06b      	b.n	8000890 <dec_to_7seg+0x310>
		case 7:
			HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_SET);
 80007b8:	2201      	movs	r2, #1
 80007ba:	2140      	movs	r1, #64	; 0x40
 80007bc:	4836      	ldr	r0, [pc, #216]	; (8000898 <dec_to_7seg+0x318>)
 80007be:	f002 fb5f 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_SET);
 80007c2:	2201      	movs	r2, #1
 80007c4:	2110      	movs	r1, #16
 80007c6:	4834      	ldr	r0, [pc, #208]	; (8000898 <dec_to_7seg+0x318>)
 80007c8:	f002 fb5a 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_SET);
 80007cc:	2201      	movs	r2, #1
 80007ce:	2108      	movs	r1, #8
 80007d0:	4831      	ldr	r0, [pc, #196]	; (8000898 <dec_to_7seg+0x318>)
 80007d2:	f002 fb55 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2102      	movs	r1, #2
 80007da:	482f      	ldr	r0, [pc, #188]	; (8000898 <dec_to_7seg+0x318>)
 80007dc:	f002 fb50 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2104      	movs	r1, #4
 80007e4:	482c      	ldr	r0, [pc, #176]	; (8000898 <dec_to_7seg+0x318>)
 80007e6:	f002 fb4b 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2120      	movs	r1, #32
 80007ee:	482a      	ldr	r0, [pc, #168]	; (8000898 <dec_to_7seg+0x318>)
 80007f0:	f002 fb46 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2101      	movs	r1, #1
 80007f8:	4827      	ldr	r0, [pc, #156]	; (8000898 <dec_to_7seg+0x318>)
 80007fa:	f002 fb41 	bl	8002e80 <HAL_GPIO_WritePin>
			break;
 80007fe:	e047      	b.n	8000890 <dec_to_7seg+0x310>
		case 8:
			HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_SET);
 8000800:	2201      	movs	r2, #1
 8000802:	2140      	movs	r1, #64	; 0x40
 8000804:	4824      	ldr	r0, [pc, #144]	; (8000898 <dec_to_7seg+0x318>)
 8000806:	f002 fb3b 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_SET);
 800080a:	2201      	movs	r2, #1
 800080c:	2110      	movs	r1, #16
 800080e:	4822      	ldr	r0, [pc, #136]	; (8000898 <dec_to_7seg+0x318>)
 8000810:	f002 fb36 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_SET);
 8000814:	2201      	movs	r2, #1
 8000816:	2108      	movs	r1, #8
 8000818:	481f      	ldr	r0, [pc, #124]	; (8000898 <dec_to_7seg+0x318>)
 800081a:	f002 fb31 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_SET);
 800081e:	2201      	movs	r2, #1
 8000820:	2102      	movs	r1, #2
 8000822:	481d      	ldr	r0, [pc, #116]	; (8000898 <dec_to_7seg+0x318>)
 8000824:	f002 fb2c 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_SET);
 8000828:	2201      	movs	r2, #1
 800082a:	2104      	movs	r1, #4
 800082c:	481a      	ldr	r0, [pc, #104]	; (8000898 <dec_to_7seg+0x318>)
 800082e:	f002 fb27 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_SET);
 8000832:	2201      	movs	r2, #1
 8000834:	2120      	movs	r1, #32
 8000836:	4818      	ldr	r0, [pc, #96]	; (8000898 <dec_to_7seg+0x318>)
 8000838:	f002 fb22 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_SET);
 800083c:	2201      	movs	r2, #1
 800083e:	2101      	movs	r1, #1
 8000840:	4815      	ldr	r0, [pc, #84]	; (8000898 <dec_to_7seg+0x318>)
 8000842:	f002 fb1d 	bl	8002e80 <HAL_GPIO_WritePin>
			break;
 8000846:	e023      	b.n	8000890 <dec_to_7seg+0x310>
		case 9:
			HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_SET);
 8000848:	2201      	movs	r2, #1
 800084a:	2140      	movs	r1, #64	; 0x40
 800084c:	4812      	ldr	r0, [pc, #72]	; (8000898 <dec_to_7seg+0x318>)
 800084e:	f002 fb17 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_SET);
 8000852:	2201      	movs	r2, #1
 8000854:	2110      	movs	r1, #16
 8000856:	4810      	ldr	r0, [pc, #64]	; (8000898 <dec_to_7seg+0x318>)
 8000858:	f002 fb12 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_SET);
 800085c:	2201      	movs	r2, #1
 800085e:	2108      	movs	r1, #8
 8000860:	480d      	ldr	r0, [pc, #52]	; (8000898 <dec_to_7seg+0x318>)
 8000862:	f002 fb0d 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_SET);
 8000866:	2201      	movs	r2, #1
 8000868:	2102      	movs	r1, #2
 800086a:	480b      	ldr	r0, [pc, #44]	; (8000898 <dec_to_7seg+0x318>)
 800086c:	f002 fb08 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_RESET);
 8000870:	2200      	movs	r2, #0
 8000872:	2104      	movs	r1, #4
 8000874:	4808      	ldr	r0, [pc, #32]	; (8000898 <dec_to_7seg+0x318>)
 8000876:	f002 fb03 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_SET);
 800087a:	2201      	movs	r2, #1
 800087c:	2120      	movs	r1, #32
 800087e:	4806      	ldr	r0, [pc, #24]	; (8000898 <dec_to_7seg+0x318>)
 8000880:	f002 fafe 	bl	8002e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_SET);
 8000884:	2201      	movs	r2, #1
 8000886:	2101      	movs	r1, #1
 8000888:	4803      	ldr	r0, [pc, #12]	; (8000898 <dec_to_7seg+0x318>)
 800088a:	f002 faf9 	bl	8002e80 <HAL_GPIO_WritePin>
			break;
 800088e:	bf00      	nop
	}
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40020800 	.word	0x40020800

0800089c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) { //interrupts from adc - light sensor
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	light_val = HAL_ADC_GetValue(&hadc1); //saving value from adc
 80008a4:	4804      	ldr	r0, [pc, #16]	; (80008b8 <HAL_ADC_ConvCpltCallback+0x1c>)
 80008a6:	f001 fa6e 	bl	8001d86 <HAL_ADC_GetValue>
 80008aa:	4602      	mov	r2, r0
 80008ac:	4b03      	ldr	r3, [pc, #12]	; (80008bc <HAL_ADC_ConvCpltCallback+0x20>)
 80008ae:	601a      	str	r2, [r3, #0]
}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000164 	.word	0x20000164
 80008bc:	20000090 	.word	0x20000090

080008c0 <number_to_digits>:

void number_to_digits(uint32_t number) { //dividing number to digits and storing them in new variables
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	uint16_t temp1, temp2, temp3, temp4;

	temp1=number/1000;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4a36      	ldr	r2, [pc, #216]	; (80009a4 <number_to_digits+0xe4>)
 80008cc:	fba2 2303 	umull	r2, r3, r2, r3
 80008d0:	099b      	lsrs	r3, r3, #6
 80008d2:	81fb      	strh	r3, [r7, #14]
	if(temp1) digit1=temp1; else digit1=0;
 80008d4:	89fb      	ldrh	r3, [r7, #14]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d003      	beq.n	80008e2 <number_to_digits+0x22>
 80008da:	4a33      	ldr	r2, [pc, #204]	; (80009a8 <number_to_digits+0xe8>)
 80008dc:	89fb      	ldrh	r3, [r7, #14]
 80008de:	8013      	strh	r3, [r2, #0]
 80008e0:	e002      	b.n	80008e8 <number_to_digits+0x28>
 80008e2:	4b31      	ldr	r3, [pc, #196]	; (80009a8 <number_to_digits+0xe8>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	801a      	strh	r2, [r3, #0]
	temp2=(number-(temp1*1000))/100;
 80008e8:	89fb      	ldrh	r3, [r7, #14]
 80008ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008ee:	fb02 f303 	mul.w	r3, r2, r3
 80008f2:	461a      	mov	r2, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	1a9b      	subs	r3, r3, r2
 80008f8:	4a2c      	ldr	r2, [pc, #176]	; (80009ac <number_to_digits+0xec>)
 80008fa:	fba2 2303 	umull	r2, r3, r2, r3
 80008fe:	095b      	lsrs	r3, r3, #5
 8000900:	81bb      	strh	r3, [r7, #12]
	if(temp2) digit2=temp2; else digit2=(number>999)?0:0;
 8000902:	89bb      	ldrh	r3, [r7, #12]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d003      	beq.n	8000910 <number_to_digits+0x50>
 8000908:	4a29      	ldr	r2, [pc, #164]	; (80009b0 <number_to_digits+0xf0>)
 800090a:	89bb      	ldrh	r3, [r7, #12]
 800090c:	8013      	strh	r3, [r2, #0]
 800090e:	e002      	b.n	8000916 <number_to_digits+0x56>
 8000910:	4b27      	ldr	r3, [pc, #156]	; (80009b0 <number_to_digits+0xf0>)
 8000912:	2200      	movs	r2, #0
 8000914:	801a      	strh	r2, [r3, #0]
	temp3=(number-(temp1*1000)-(temp2*100))/10;
 8000916:	89fb      	ldrh	r3, [r7, #14]
 8000918:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800091c:	fb02 f303 	mul.w	r3, r2, r3
 8000920:	461a      	mov	r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	1a9b      	subs	r3, r3, r2
 8000926:	89ba      	ldrh	r2, [r7, #12]
 8000928:	2164      	movs	r1, #100	; 0x64
 800092a:	fb01 f202 	mul.w	r2, r1, r2
 800092e:	1a9b      	subs	r3, r3, r2
 8000930:	4a20      	ldr	r2, [pc, #128]	; (80009b4 <number_to_digits+0xf4>)
 8000932:	fba2 2303 	umull	r2, r3, r2, r3
 8000936:	08db      	lsrs	r3, r3, #3
 8000938:	817b      	strh	r3, [r7, #10]
	if(temp3) digit3=temp3; else digit3=(number>99)?0:0;
 800093a:	897b      	ldrh	r3, [r7, #10]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d003      	beq.n	8000948 <number_to_digits+0x88>
 8000940:	4a1d      	ldr	r2, [pc, #116]	; (80009b8 <number_to_digits+0xf8>)
 8000942:	897b      	ldrh	r3, [r7, #10]
 8000944:	8013      	strh	r3, [r2, #0]
 8000946:	e002      	b.n	800094e <number_to_digits+0x8e>
 8000948:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <number_to_digits+0xf8>)
 800094a:	2200      	movs	r2, #0
 800094c:	801a      	strh	r2, [r3, #0]
	temp4=(number-(temp1*1000)-(temp2*100)-(temp3*10));
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	b29a      	uxth	r2, r3
 8000952:	89fb      	ldrh	r3, [r7, #14]
 8000954:	4619      	mov	r1, r3
 8000956:	0149      	lsls	r1, r1, #5
 8000958:	1ac9      	subs	r1, r1, r3
 800095a:	0089      	lsls	r1, r1, #2
 800095c:	440b      	add	r3, r1
 800095e:	00db      	lsls	r3, r3, #3
 8000960:	b29b      	uxth	r3, r3
 8000962:	1ad3      	subs	r3, r2, r3
 8000964:	b29a      	uxth	r2, r3
 8000966:	89bb      	ldrh	r3, [r7, #12]
 8000968:	4619      	mov	r1, r3
 800096a:	0089      	lsls	r1, r1, #2
 800096c:	440b      	add	r3, r1
 800096e:	4619      	mov	r1, r3
 8000970:	0088      	lsls	r0, r1, #2
 8000972:	4619      	mov	r1, r3
 8000974:	4603      	mov	r3, r0
 8000976:	440b      	add	r3, r1
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	b29b      	uxth	r3, r3
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	b29a      	uxth	r2, r3
 8000980:	897b      	ldrh	r3, [r7, #10]
 8000982:	4619      	mov	r1, r3
 8000984:	0089      	lsls	r1, r1, #2
 8000986:	440b      	add	r3, r1
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	b29b      	uxth	r3, r3
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	813b      	strh	r3, [r7, #8]
	digit4=temp4;
 8000990:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <number_to_digits+0xfc>)
 8000992:	893b      	ldrh	r3, [r7, #8]
 8000994:	8013      	strh	r3, [r2, #0]
}
 8000996:	bf00      	nop
 8000998:	3714      	adds	r7, #20
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	10624dd3 	.word	0x10624dd3
 80009a8:	20000296 	.word	0x20000296
 80009ac:	51eb851f 	.word	0x51eb851f
 80009b0:	2000020c 	.word	0x2000020c
 80009b4:	cccccccd 	.word	0xcccccccd
 80009b8:	20000250 	.word	0x20000250
 80009bc:	200000c0 	.word	0x200000c0

080009c0 <pwm_disp_select>:

void pwm_disp_select(uint8_t display) //pwm display select with duty cycle depending on light sensor
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
	switch (display)
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	3b01      	subs	r3, #1
 80009ce:	2b03      	cmp	r3, #3
 80009d0:	d852      	bhi.n	8000a78 <pwm_disp_select+0xb8>
 80009d2:	a201      	add	r2, pc, #4	; (adr r2, 80009d8 <pwm_disp_select+0x18>)
 80009d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d8:	080009e9 	.word	0x080009e9
 80009dc:	08000a0d 	.word	0x08000a0d
 80009e0:	08000a31 	.word	0x08000a31
 80009e4:	08000a55 	.word	0x08000a55
	{
		case 1:
			htim3.Instance->CCR1 = inv_light_prc;
 80009e8:	4b26      	ldr	r3, [pc, #152]	; (8000a84 <pwm_disp_select+0xc4>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a26      	ldr	r2, [pc, #152]	; (8000a88 <pwm_disp_select+0xc8>)
 80009ee:	6812      	ldr	r2, [r2, #0]
 80009f0:	635a      	str	r2, [r3, #52]	; 0x34
			htim3.Instance->CCR2 = 100;
 80009f2:	4b24      	ldr	r3, [pc, #144]	; (8000a84 <pwm_disp_select+0xc4>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2264      	movs	r2, #100	; 0x64
 80009f8:	639a      	str	r2, [r3, #56]	; 0x38
			htim3.Instance->CCR3 = 100;
 80009fa:	4b22      	ldr	r3, [pc, #136]	; (8000a84 <pwm_disp_select+0xc4>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2264      	movs	r2, #100	; 0x64
 8000a00:	63da      	str	r2, [r3, #60]	; 0x3c
			htim3.Instance->CCR4 = 100;
 8000a02:	4b20      	ldr	r3, [pc, #128]	; (8000a84 <pwm_disp_select+0xc4>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2264      	movs	r2, #100	; 0x64
 8000a08:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8000a0a:	e035      	b.n	8000a78 <pwm_disp_select+0xb8>
		case 2:
			htim3.Instance->CCR1 = 100;
 8000a0c:	4b1d      	ldr	r3, [pc, #116]	; (8000a84 <pwm_disp_select+0xc4>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2264      	movs	r2, #100	; 0x64
 8000a12:	635a      	str	r2, [r3, #52]	; 0x34
			htim3.Instance->CCR2 = inv_light_prc;
 8000a14:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <pwm_disp_select+0xc4>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a1b      	ldr	r2, [pc, #108]	; (8000a88 <pwm_disp_select+0xc8>)
 8000a1a:	6812      	ldr	r2, [r2, #0]
 8000a1c:	639a      	str	r2, [r3, #56]	; 0x38
			htim3.Instance->CCR3 = 100;
 8000a1e:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <pwm_disp_select+0xc4>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2264      	movs	r2, #100	; 0x64
 8000a24:	63da      	str	r2, [r3, #60]	; 0x3c
			htim3.Instance->CCR4 = 100;
 8000a26:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <pwm_disp_select+0xc4>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2264      	movs	r2, #100	; 0x64
 8000a2c:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8000a2e:	e023      	b.n	8000a78 <pwm_disp_select+0xb8>
		case 3:
			htim3.Instance->CCR1 = 100;
 8000a30:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <pwm_disp_select+0xc4>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2264      	movs	r2, #100	; 0x64
 8000a36:	635a      	str	r2, [r3, #52]	; 0x34
			htim3.Instance->CCR2 = 100;
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <pwm_disp_select+0xc4>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2264      	movs	r2, #100	; 0x64
 8000a3e:	639a      	str	r2, [r3, #56]	; 0x38
			htim3.Instance->CCR3 = inv_light_prc;
 8000a40:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <pwm_disp_select+0xc4>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a10      	ldr	r2, [pc, #64]	; (8000a88 <pwm_disp_select+0xc8>)
 8000a46:	6812      	ldr	r2, [r2, #0]
 8000a48:	63da      	str	r2, [r3, #60]	; 0x3c
			htim3.Instance->CCR4 = 100;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <pwm_disp_select+0xc4>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2264      	movs	r2, #100	; 0x64
 8000a50:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8000a52:	e011      	b.n	8000a78 <pwm_disp_select+0xb8>
		case 4:
			htim3.Instance->CCR1 = 100;
 8000a54:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <pwm_disp_select+0xc4>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2264      	movs	r2, #100	; 0x64
 8000a5a:	635a      	str	r2, [r3, #52]	; 0x34
			htim3.Instance->CCR2 = 100;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <pwm_disp_select+0xc4>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2264      	movs	r2, #100	; 0x64
 8000a62:	639a      	str	r2, [r3, #56]	; 0x38
			htim3.Instance->CCR3 = 100;
 8000a64:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <pwm_disp_select+0xc4>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2264      	movs	r2, #100	; 0x64
 8000a6a:	63da      	str	r2, [r3, #60]	; 0x3c
			htim3.Instance->CCR4 = inv_light_prc;
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <pwm_disp_select+0xc4>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a05      	ldr	r2, [pc, #20]	; (8000a88 <pwm_disp_select+0xc8>)
 8000a72:	6812      	ldr	r2, [r2, #0]
 8000a74:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8000a76:	bf00      	nop
	}
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	20000124 	.word	0x20000124
 8000a88:	20000094 	.word	0x20000094

08000a8c <pwm_display_multiplekser>:

void pwm_display_multiplekser() { //multiplexer for displaying digits with use of pwm display choose
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	static uint8_t display = 1;
		switch (display) {
 8000a90:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <pwm_display_multiplekser+0x9c>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	3b01      	subs	r3, #1
 8000a96:	2b03      	cmp	r3, #3
 8000a98:	d836      	bhi.n	8000b08 <pwm_display_multiplekser+0x7c>
 8000a9a:	a201      	add	r2, pc, #4	; (adr r2, 8000aa0 <pwm_display_multiplekser+0x14>)
 8000a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa0:	08000ab1 	.word	0x08000ab1
 8000aa4:	08000ac7 	.word	0x08000ac7
 8000aa8:	08000add 	.word	0x08000add
 8000aac:	08000af3 	.word	0x08000af3
			case 1:
				pwm_disp_select(1);
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	f7ff ff85 	bl	80009c0 <pwm_disp_select>
				dec_to_7seg(digit1);
 8000ab6:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <pwm_display_multiplekser+0xa0>)
 8000ab8:	881b      	ldrh	r3, [r3, #0]
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff fd5e 	bl	8000580 <dec_to_7seg>
				break;
 8000ac4:	e021      	b.n	8000b0a <pwm_display_multiplekser+0x7e>
			case 2:
				pwm_disp_select(2);
 8000ac6:	2002      	movs	r0, #2
 8000ac8:	f7ff ff7a 	bl	80009c0 <pwm_disp_select>
				dec_to_7seg(digit2);
 8000acc:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <pwm_display_multiplekser+0xa4>)
 8000ace:	881b      	ldrh	r3, [r3, #0]
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fd53 	bl	8000580 <dec_to_7seg>
				break;
 8000ada:	e016      	b.n	8000b0a <pwm_display_multiplekser+0x7e>
			case 3:
				pwm_disp_select(3);
 8000adc:	2003      	movs	r0, #3
 8000ade:	f7ff ff6f 	bl	80009c0 <pwm_disp_select>
				dec_to_7seg(digit3);
 8000ae2:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <pwm_display_multiplekser+0xa8>)
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fd48 	bl	8000580 <dec_to_7seg>
				break;
 8000af0:	e00b      	b.n	8000b0a <pwm_display_multiplekser+0x7e>
			case 4:
				pwm_disp_select(4);
 8000af2:	2004      	movs	r0, #4
 8000af4:	f7ff ff64 	bl	80009c0 <pwm_disp_select>
				dec_to_7seg(digit4);
 8000af8:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <pwm_display_multiplekser+0xac>)
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff fd3d 	bl	8000580 <dec_to_7seg>
				break;
 8000b06:	e000      	b.n	8000b0a <pwm_display_multiplekser+0x7e>
			default:
				break;
 8000b08:	bf00      	nop
		}
		display++;
 8000b0a:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <pwm_display_multiplekser+0x9c>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <pwm_display_multiplekser+0x9c>)
 8000b14:	701a      	strb	r2, [r3, #0]
		if(display==5) display = 1;
 8000b16:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <pwm_display_multiplekser+0x9c>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	2b05      	cmp	r3, #5
 8000b1c:	d102      	bne.n	8000b24 <pwm_display_multiplekser+0x98>
 8000b1e:	4b02      	ldr	r3, [pc, #8]	; (8000b28 <pwm_display_multiplekser+0x9c>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	701a      	strb	r2, [r3, #0]
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000000 	.word	0x20000000
 8000b2c:	20000296 	.word	0x20000296
 8000b30:	2000020c 	.word	0x2000020c
 8000b34:	20000250 	.word	0x20000250
 8000b38:	200000c0 	.word	0x200000c0

08000b3c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){ //interrupts from timer
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM9){ //from timer 9
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a06      	ldr	r2, [pc, #24]	; (8000b64 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d106      	bne.n	8000b5c <HAL_TIM_PeriodElapsedCallback+0x20>
		pwm_display_multiplekser(); //displaying digits with multiplexer and pwm
 8000b4e:	f7ff ff9d 	bl	8000a8c <pwm_display_multiplekser>
		inv_light_val_to_prc(light_val); //light value to percents used in duty cycle in pwm
 8000b52:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 f808 	bl	8000b6c <inv_light_val_to_prc>
	}
}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40014000 	.word	0x40014000
 8000b68:	20000090 	.word	0x20000090

08000b6c <inv_light_val_to_prc>:
/*
void light_val_to_prc(uint32_t value) { //can be used to display brightness in percents
	light_prc=100-(value*100/3850);
}
*/
void inv_light_val_to_prc(uint32_t value) {
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	inv_light_prc=value*100/3850; //3850 because I couldn't find range of light sensor and this value seams to be quite good estimate
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2264      	movs	r2, #100	; 0x64
 8000b78:	fb02 f303 	mul.w	r3, r2, r3
 8000b7c:	085b      	lsrs	r3, r3, #1
 8000b7e:	4a06      	ldr	r2, [pc, #24]	; (8000b98 <inv_light_val_to_prc+0x2c>)
 8000b80:	fba2 2303 	umull	r2, r3, r2, r3
 8000b84:	0a9b      	lsrs	r3, r3, #10
 8000b86:	4a05      	ldr	r2, [pc, #20]	; (8000b9c <inv_light_val_to_prc+0x30>)
 8000b88:	6013      	str	r3, [r2, #0]
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	882dbf5f 	.word	0x882dbf5f
 8000b9c:	20000094 	.word	0x20000094

08000ba0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af02      	add	r7, sp, #8
 8000ba6:	6078      	str	r0, [r7, #4]

	 static uint8_t Data[15];

	if (Received_first > 0) {
 8000ba8:	4b24      	ldr	r3, [pc, #144]	; (8000c3c <HAL_UART_RxCpltCallback+0x9c>)
 8000baa:	881b      	ldrh	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d00e      	beq.n	8000bce <HAL_UART_RxCpltCallback+0x2e>
		first_number = Received_first; //saving to new variable
 8000bb0:	4b22      	ldr	r3, [pc, #136]	; (8000c3c <HAL_UART_RxCpltCallback+0x9c>)
 8000bb2:	881a      	ldrh	r2, [r3, #0]
 8000bb4:	4b22      	ldr	r3, [pc, #136]	; (8000c40 <HAL_UART_RxCpltCallback+0xa0>)
 8000bb6:	801a      	strh	r2, [r3, #0]
		Received_first = 0; //reset of variable used in listening UART
 8000bb8:	4b20      	ldr	r3, [pc, #128]	; (8000c3c <HAL_UART_RxCpltCallback+0x9c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	801a      	strh	r2, [r3, #0]
		cnt_btn = 0; //reset of counter used to choose operation type so after reciving first number we are certain that there is nothing in this counter
 8000bbe:	4b21      	ldr	r3, [pc, #132]	; (8000c44 <HAL_UART_RxCpltCallback+0xa4>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart2, &Received_second, 1); // Listening with second variable with use of DMA
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	4920      	ldr	r1, [pc, #128]	; (8000c48 <HAL_UART_RxCpltCallback+0xa8>)
 8000bc8:	4820      	ldr	r0, [pc, #128]	; (8000c4c <HAL_UART_RxCpltCallback+0xac>)
 8000bca:	f003 fd69 	bl	80046a0 <HAL_UART_Receive_DMA>
	}
	if (Received_second > 0) {
 8000bce:	4b1e      	ldr	r3, [pc, #120]	; (8000c48 <HAL_UART_RxCpltCallback+0xa8>)
 8000bd0:	881b      	ldrh	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d029      	beq.n	8000c2a <HAL_UART_RxCpltCallback+0x8a>
		second_number = Received_second;
 8000bd6:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <HAL_UART_RxCpltCallback+0xa8>)
 8000bd8:	881a      	ldrh	r2, [r3, #0]
 8000bda:	4b1d      	ldr	r3, [pc, #116]	; (8000c50 <HAL_UART_RxCpltCallback+0xb0>)
 8000bdc:	801a      	strh	r2, [r3, #0]
		Received_second = 0;
 8000bde:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <HAL_UART_RxCpltCallback+0xa8>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart2, &Received_first, 1); // Listening with first variable again with use of DMA
 8000be4:	2201      	movs	r2, #1
 8000be6:	4915      	ldr	r1, [pc, #84]	; (8000c3c <HAL_UART_RxCpltCallback+0x9c>)
 8000be8:	4818      	ldr	r0, [pc, #96]	; (8000c4c <HAL_UART_RxCpltCallback+0xac>)
 8000bea:	f003 fd59 	bl	80046a0 <HAL_UART_Receive_DMA>
		calculate();
 8000bee:	f000 f83b 	bl	8000c68 <calculate>

		sprintf(Data, "\n%d %c %d = %d\n", first_number, operation_UART, second_number, result); //constructing message to send via UART
 8000bf2:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <HAL_UART_RxCpltCallback+0xa0>)
 8000bf4:	881b      	ldrh	r3, [r3, #0]
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <HAL_UART_RxCpltCallback+0xb4>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	4618      	mov	r0, r3
 8000c02:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <HAL_UART_RxCpltCallback+0xb0>)
 8000c04:	881b      	ldrh	r3, [r3, #0]
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <HAL_UART_RxCpltCallback+0xb8>)
 8000c0c:	881b      	ldrh	r3, [r3, #0]
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	9301      	str	r3, [sp, #4]
 8000c12:	9200      	str	r2, [sp, #0]
 8000c14:	4603      	mov	r3, r0
 8000c16:	460a      	mov	r2, r1
 8000c18:	4910      	ldr	r1, [pc, #64]	; (8000c5c <HAL_UART_RxCpltCallback+0xbc>)
 8000c1a:	4811      	ldr	r0, [pc, #68]	; (8000c60 <HAL_UART_RxCpltCallback+0xc0>)
 8000c1c:	f004 fc90 	bl	8005540 <siprintf>
		HAL_UART_Transmit_DMA(&huart2, Data, 15); // sending message via UART
 8000c20:	220f      	movs	r2, #15
 8000c22:	490f      	ldr	r1, [pc, #60]	; (8000c60 <HAL_UART_RxCpltCallback+0xc0>)
 8000c24:	4809      	ldr	r0, [pc, #36]	; (8000c4c <HAL_UART_RxCpltCallback+0xac>)
 8000c26:	f003 fccf 	bl	80045c8 <HAL_UART_Transmit_DMA>

	}
	HAL_GPIO_TogglePin(LD2_GREEN_GPIO_Port, LD2_GREEN_Pin); //led to observe if interrupt happend
 8000c2a:	2120      	movs	r1, #32
 8000c2c:	480d      	ldr	r0, [pc, #52]	; (8000c64 <HAL_UART_RxCpltCallback+0xc4>)
 8000c2e:	f002 f940 	bl	8002eb2 <HAL_GPIO_TogglePin>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000098 	.word	0x20000098
 8000c40:	2000009c 	.word	0x2000009c
 8000c44:	200000a2 	.word	0x200000a2
 8000c48:	2000009a 	.word	0x2000009a
 8000c4c:	20000254 	.word	0x20000254
 8000c50:	2000009e 	.word	0x2000009e
 8000c54:	20000294 	.word	0x20000294
 8000c58:	200000a0 	.word	0x200000a0
 8000c5c:	08005d64 	.word	0x08005d64
 8000c60:	200000a4 	.word	0x200000a4
 8000c64:	40020000 	.word	0x40020000

08000c68 <calculate>:

void calculate() { //calculating result
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
	switch (operation) {
 8000c6c:	4b30      	ldr	r3, [pc, #192]	; (8000d30 <calculate+0xc8>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	3b01      	subs	r3, #1
 8000c74:	2b03      	cmp	r3, #3
 8000c76:	d851      	bhi.n	8000d1c <calculate+0xb4>
 8000c78:	a201      	add	r2, pc, #4	; (adr r2, 8000c80 <calculate+0x18>)
 8000c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c7e:	bf00      	nop
 8000c80:	08000c91 	.word	0x08000c91
 8000c84:	08000cb3 	.word	0x08000cb3
 8000c88:	08000cd5 	.word	0x08000cd5
 8000c8c:	08000cf9 	.word	0x08000cf9
		case 1:
			result = first_number + second_number;
 8000c90:	4b28      	ldr	r3, [pc, #160]	; (8000d34 <calculate+0xcc>)
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	4b28      	ldr	r3, [pc, #160]	; (8000d38 <calculate+0xd0>)
 8000c98:	881b      	ldrh	r3, [r3, #0]
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	4413      	add	r3, r2
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	4b26      	ldr	r3, [pc, #152]	; (8000d3c <calculate+0xd4>)
 8000ca2:	801a      	strh	r2, [r3, #0]
			operation = 0;
 8000ca4:	4b22      	ldr	r3, [pc, #136]	; (8000d30 <calculate+0xc8>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
			operation_UART = '+';
 8000caa:	4b25      	ldr	r3, [pc, #148]	; (8000d40 <calculate+0xd8>)
 8000cac:	222b      	movs	r2, #43	; 0x2b
 8000cae:	701a      	strb	r2, [r3, #0]
			break;
 8000cb0:	e039      	b.n	8000d26 <calculate+0xbe>
		case 2:
			result = first_number - second_number;
 8000cb2:	4b20      	ldr	r3, [pc, #128]	; (8000d34 <calculate+0xcc>)
 8000cb4:	881b      	ldrh	r3, [r3, #0]
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <calculate+0xd0>)
 8000cba:	881b      	ldrh	r3, [r3, #0]
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	b29a      	uxth	r2, r3
 8000cc2:	4b1e      	ldr	r3, [pc, #120]	; (8000d3c <calculate+0xd4>)
 8000cc4:	801a      	strh	r2, [r3, #0]
			operation = 0;
 8000cc6:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <calculate+0xc8>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]
			operation_UART = '-';
 8000ccc:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <calculate+0xd8>)
 8000cce:	222d      	movs	r2, #45	; 0x2d
 8000cd0:	701a      	strb	r2, [r3, #0]
			break;
 8000cd2:	e028      	b.n	8000d26 <calculate+0xbe>
		case 3:
			result = first_number * second_number;
 8000cd4:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <calculate+0xcc>)
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <calculate+0xd0>)
 8000cdc:	881b      	ldrh	r3, [r3, #0]
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	fb12 f303 	smulbb	r3, r2, r3
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <calculate+0xd4>)
 8000ce8:	801a      	strh	r2, [r3, #0]
			operation = 0;
 8000cea:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <calculate+0xc8>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
			operation_UART = '*';
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <calculate+0xd8>)
 8000cf2:	222a      	movs	r2, #42	; 0x2a
 8000cf4:	701a      	strb	r2, [r3, #0]
			break;
 8000cf6:	e016      	b.n	8000d26 <calculate+0xbe>
		case 4:
			result = first_number / second_number;
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <calculate+0xcc>)
 8000cfa:	881b      	ldrh	r3, [r3, #0]
 8000cfc:	b29a      	uxth	r2, r3
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <calculate+0xd0>)
 8000d00:	881b      	ldrh	r3, [r3, #0]
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <calculate+0xd4>)
 8000d0c:	801a      	strh	r2, [r3, #0]
			operation = 0;
 8000d0e:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <calculate+0xc8>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	701a      	strb	r2, [r3, #0]
			operation_UART = '/';
 8000d14:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <calculate+0xd8>)
 8000d16:	222f      	movs	r2, #47	; 0x2f
 8000d18:	701a      	strb	r2, [r3, #0]
			break;
 8000d1a:	e004      	b.n	8000d26 <calculate+0xbe>
		default:
			result = 9999;
 8000d1c:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <calculate+0xd4>)
 8000d1e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d22:	801a      	strh	r2, [r3, #0]
			break;
 8000d24:	bf00      	nop
	}
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	200000a3 	.word	0x200000a3
 8000d34:	2000009c 	.word	0x2000009c
 8000d38:	2000009e 	.word	0x2000009e
 8000d3c:	200000a0 	.word	0x200000a0
 8000d40:	20000294 	.word	0x20000294

08000d44 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){ //interrupt from button and choose of operation type
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Blue_Btn_Pin){
 8000d4e:	88fb      	ldrh	r3, [r7, #6]
 8000d50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d54:	d130      	bne.n	8000db8 <HAL_GPIO_EXTI_Callback+0x74>
		cnt_btn++;
 8000d56:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000d62:	701a      	strb	r2, [r3, #0]
		switch (cnt_btn) {
 8000d64:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	2b03      	cmp	r3, #3
 8000d6e:	d81b      	bhi.n	8000da8 <HAL_GPIO_EXTI_Callback+0x64>
 8000d70:	a201      	add	r2, pc, #4	; (adr r2, 8000d78 <HAL_GPIO_EXTI_Callback+0x34>)
 8000d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d76:	bf00      	nop
 8000d78:	08000d89 	.word	0x08000d89
 8000d7c:	08000d91 	.word	0x08000d91
 8000d80:	08000d99 	.word	0x08000d99
 8000d84:	08000da1 	.word	0x08000da1
			case 1:
				operation = 1;
 8000d88:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0x80>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	701a      	strb	r2, [r3, #0]
				break;
 8000d8e:	e00f      	b.n	8000db0 <HAL_GPIO_EXTI_Callback+0x6c>
			case 2:
				operation = 2;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0x80>)
 8000d92:	2202      	movs	r2, #2
 8000d94:	701a      	strb	r2, [r3, #0]
				break;
 8000d96:	e00b      	b.n	8000db0 <HAL_GPIO_EXTI_Callback+0x6c>
			case 3:
				operation = 3;
 8000d98:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0x80>)
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	701a      	strb	r2, [r3, #0]
				break;
 8000d9e:	e007      	b.n	8000db0 <HAL_GPIO_EXTI_Callback+0x6c>
			case 4:
				operation = 4;
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0x80>)
 8000da2:	2204      	movs	r2, #4
 8000da4:	701a      	strb	r2, [r3, #0]
				break;
 8000da6:	e003      	b.n	8000db0 <HAL_GPIO_EXTI_Callback+0x6c>
			default:
				operation = 0;
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0x80>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
				break;
 8000dae:	bf00      	nop
		}
		HAL_GPIO_TogglePin(LD2_GREEN_GPIO_Port, LD2_GREEN_Pin); //led to observe interrupts from button
 8000db0:	2120      	movs	r1, #32
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <HAL_GPIO_EXTI_Callback+0x84>)
 8000db4:	f002 f87d 	bl	8002eb2 <HAL_GPIO_TogglePin>
	}
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	200000a2 	.word	0x200000a2
 8000dc4:	200000a3 	.word	0x200000a3
 8000dc8:	40020000 	.word	0x40020000

08000dcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd0:	f000 fd32 	bl	8001838 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd4:	f000 f83a 	bl	8000e4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd8:	f000 f9fa 	bl	80011d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ddc:	f000 f9d0 	bl	8001180 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000de0:	f000 f9a4 	bl	800112c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000de4:	f000 f89c 	bl	8000f20 <MX_ADC1_Init>
  MX_TIM9_Init();
 8000de8:	f000 f966 	bl	80010b8 <MX_TIM9_Init>
  MX_TIM3_Init();
 8000dec:	f000 f8ea 	bl	8000fc4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim9);
 8000df0:	4810      	ldr	r0, [pc, #64]	; (8000e34 <main+0x68>)
 8000df2:	f002 fd1e 	bl	8003832 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA(&huart2, &Received_first, 1); //UART with DMA
 8000df6:	2201      	movs	r2, #1
 8000df8:	490f      	ldr	r1, [pc, #60]	; (8000e38 <main+0x6c>)
 8000dfa:	4810      	ldr	r0, [pc, #64]	; (8000e3c <main+0x70>)
 8000dfc:	f003 fc50 	bl	80046a0 <HAL_UART_Receive_DMA>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e00:	2100      	movs	r1, #0
 8000e02:	480f      	ldr	r0, [pc, #60]	; (8000e40 <main+0x74>)
 8000e04:	f002 fd64 	bl	80038d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000e08:	2104      	movs	r1, #4
 8000e0a:	480d      	ldr	r0, [pc, #52]	; (8000e40 <main+0x74>)
 8000e0c:	f002 fd60 	bl	80038d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000e10:	2108      	movs	r1, #8
 8000e12:	480b      	ldr	r0, [pc, #44]	; (8000e40 <main+0x74>)
 8000e14:	f002 fd5c 	bl	80038d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000e18:	210c      	movs	r1, #12
 8000e1a:	4809      	ldr	r0, [pc, #36]	; (8000e40 <main+0x74>)
 8000e1c:	f002 fd58 	bl	80038d0 <HAL_TIM_PWM_Start>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_ADC_Start_IT(&hadc1); // start interrupts from light sensor
 8000e20:	4808      	ldr	r0, [pc, #32]	; (8000e44 <main+0x78>)
 8000e22:	f000 fdbf 	bl	80019a4 <HAL_ADC_Start_IT>
	  number_to_digits(result); //division of number to digits for multiplexing
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <main+0x7c>)
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fd47 	bl	80008c0 <number_to_digits>
	  HAL_ADC_Start_IT(&hadc1); // start interrupts from light sensor
 8000e32:	e7f5      	b.n	8000e20 <main+0x54>
 8000e34:	20000210 	.word	0x20000210
 8000e38:	20000098 	.word	0x20000098
 8000e3c:	20000254 	.word	0x20000254
 8000e40:	20000124 	.word	0x20000124
 8000e44:	20000164 	.word	0x20000164
 8000e48:	200000a0 	.word	0x200000a0

08000e4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b094      	sub	sp, #80	; 0x50
 8000e50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e52:	f107 0320 	add.w	r3, r7, #32
 8000e56:	2230      	movs	r2, #48	; 0x30
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f004 fb68 	bl	8005530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e60:	f107 030c 	add.w	r3, r7, #12
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e70:	2300      	movs	r3, #0
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	4b28      	ldr	r3, [pc, #160]	; (8000f18 <SystemClock_Config+0xcc>)
 8000e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e78:	4a27      	ldr	r2, [pc, #156]	; (8000f18 <SystemClock_Config+0xcc>)
 8000e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e80:	4b25      	ldr	r3, [pc, #148]	; (8000f18 <SystemClock_Config+0xcc>)
 8000e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	4b22      	ldr	r3, [pc, #136]	; (8000f1c <SystemClock_Config+0xd0>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a21      	ldr	r2, [pc, #132]	; (8000f1c <SystemClock_Config+0xd0>)
 8000e96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e9a:	6013      	str	r3, [r2, #0]
 8000e9c:	4b1f      	ldr	r3, [pc, #124]	; (8000f1c <SystemClock_Config+0xd0>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eac:	2301      	movs	r3, #1
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eb0:	2310      	movs	r3, #16
 8000eb2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ebc:	2310      	movs	r3, #16
 8000ebe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ec0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ec4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000eca:	2304      	movs	r3, #4
 8000ecc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ece:	f107 0320 	add.w	r3, r7, #32
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f002 f820 	bl	8002f18 <HAL_RCC_OscConfig>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000ede:	f000 fa03 	bl	80012e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee2:	230f      	movs	r3, #15
 8000ee4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	2102      	movs	r1, #2
 8000efe:	4618      	mov	r0, r3
 8000f00:	f002 fa7a 	bl	80033f8 <HAL_RCC_ClockConfig>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f0a:	f000 f9ed 	bl	80012e8 <Error_Handler>
  }
}
 8000f0e:	bf00      	nop
 8000f10:	3750      	adds	r7, #80	; 0x50
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40007000 	.word	0x40007000

08000f20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f26:	463b      	mov	r3, r7
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000f32:	4b21      	ldr	r3, [pc, #132]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000f34:	4a21      	ldr	r2, [pc, #132]	; (8000fbc <MX_ADC1_Init+0x9c>)
 8000f36:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f38:	4b1f      	ldr	r3, [pc, #124]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000f3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f3e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f40:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f46:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f4c:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f52:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f60:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000f62:	4a17      	ldr	r2, [pc, #92]	; (8000fc0 <MX_ADC1_Init+0xa0>)
 8000f64:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f80:	480d      	ldr	r0, [pc, #52]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000f82:	f000 fccb 	bl	800191c <HAL_ADC_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f8c:	f000 f9ac 	bl	80012e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f90:	2301      	movs	r3, #1
 8000f92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f94:	2301      	movs	r3, #1
 8000f96:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000fa2:	f000 ff11 	bl	8001dc8 <HAL_ADC_ConfigChannel>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fac:	f000 f99c 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fb0:	bf00      	nop
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000164 	.word	0x20000164
 8000fbc:	40012000 	.word	0x40012000
 8000fc0:	0f000001 	.word	0x0f000001

08000fc4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	; 0x28
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fca:	f107 0320 	add.w	r3, r7, #32
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
 8000fe0:	611a      	str	r2, [r3, #16]
 8000fe2:	615a      	str	r2, [r3, #20]
 8000fe4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fe6:	4b32      	ldr	r3, [pc, #200]	; (80010b0 <MX_TIM3_Init+0xec>)
 8000fe8:	4a32      	ldr	r2, [pc, #200]	; (80010b4 <MX_TIM3_Init+0xf0>)
 8000fea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 89;
 8000fec:	4b30      	ldr	r3, [pc, #192]	; (80010b0 <MX_TIM3_Init+0xec>)
 8000fee:	2259      	movs	r2, #89	; 0x59
 8000ff0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff2:	4b2f      	ldr	r3, [pc, #188]	; (80010b0 <MX_TIM3_Init+0xec>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000ff8:	4b2d      	ldr	r3, [pc, #180]	; (80010b0 <MX_TIM3_Init+0xec>)
 8000ffa:	2263      	movs	r2, #99	; 0x63
 8000ffc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffe:	4b2c      	ldr	r3, [pc, #176]	; (80010b0 <MX_TIM3_Init+0xec>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001004:	4b2a      	ldr	r3, [pc, #168]	; (80010b0 <MX_TIM3_Init+0xec>)
 8001006:	2200      	movs	r2, #0
 8001008:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800100a:	4829      	ldr	r0, [pc, #164]	; (80010b0 <MX_TIM3_Init+0xec>)
 800100c:	f002 fc35 	bl	800387a <HAL_TIM_PWM_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001016:	f000 f967 	bl	80012e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800101a:	2300      	movs	r3, #0
 800101c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101e:	2300      	movs	r3, #0
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001022:	f107 0320 	add.w	r3, r7, #32
 8001026:	4619      	mov	r1, r3
 8001028:	4821      	ldr	r0, [pc, #132]	; (80010b0 <MX_TIM3_Init+0xec>)
 800102a:	f003 f9fd 	bl	8004428 <HAL_TIMEx_MasterConfigSynchronization>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001034:	f000 f958 	bl	80012e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001038:	2360      	movs	r3, #96	; 0x60
 800103a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001040:	2300      	movs	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	2200      	movs	r2, #0
 800104c:	4619      	mov	r1, r3
 800104e:	4818      	ldr	r0, [pc, #96]	; (80010b0 <MX_TIM3_Init+0xec>)
 8001050:	f002 fd78 	bl	8003b44 <HAL_TIM_PWM_ConfigChannel>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800105a:	f000 f945 	bl	80012e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	2204      	movs	r2, #4
 8001062:	4619      	mov	r1, r3
 8001064:	4812      	ldr	r0, [pc, #72]	; (80010b0 <MX_TIM3_Init+0xec>)
 8001066:	f002 fd6d 	bl	8003b44 <HAL_TIM_PWM_ConfigChannel>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001070:	f000 f93a 	bl	80012e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	2208      	movs	r2, #8
 8001078:	4619      	mov	r1, r3
 800107a:	480d      	ldr	r0, [pc, #52]	; (80010b0 <MX_TIM3_Init+0xec>)
 800107c:	f002 fd62 	bl	8003b44 <HAL_TIM_PWM_ConfigChannel>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 8001086:	f000 f92f 	bl	80012e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	220c      	movs	r2, #12
 800108e:	4619      	mov	r1, r3
 8001090:	4807      	ldr	r0, [pc, #28]	; (80010b0 <MX_TIM3_Init+0xec>)
 8001092:	f002 fd57 	bl	8003b44 <HAL_TIM_PWM_ConfigChannel>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 800109c:	f000 f924 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010a0:	4803      	ldr	r0, [pc, #12]	; (80010b0 <MX_TIM3_Init+0xec>)
 80010a2:	f000 f9e7 	bl	8001474 <HAL_TIM_MspPostInit>

}
 80010a6:	bf00      	nop
 80010a8:	3728      	adds	r7, #40	; 0x28
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000124 	.word	0x20000124
 80010b4:	40000400 	.word	0x40000400

080010b8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010be:	463b      	mov	r3, r7
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80010ca:	4b16      	ldr	r3, [pc, #88]	; (8001124 <MX_TIM9_Init+0x6c>)
 80010cc:	4a16      	ldr	r2, [pc, #88]	; (8001128 <MX_TIM9_Init+0x70>)
 80010ce:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 999;
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <MX_TIM9_Init+0x6c>)
 80010d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010d6:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d8:	4b12      	ldr	r3, [pc, #72]	; (8001124 <MX_TIM9_Init+0x6c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 99;
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <MX_TIM9_Init+0x6c>)
 80010e0:	2263      	movs	r2, #99	; 0x63
 80010e2:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <MX_TIM9_Init+0x6c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <MX_TIM9_Init+0x6c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80010f0:	480c      	ldr	r0, [pc, #48]	; (8001124 <MX_TIM9_Init+0x6c>)
 80010f2:	f002 fb73 	bl	80037dc <HAL_TIM_Base_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 80010fc:	f000 f8f4 	bl	80012e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001100:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001104:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001106:	463b      	mov	r3, r7
 8001108:	4619      	mov	r1, r3
 800110a:	4806      	ldr	r0, [pc, #24]	; (8001124 <MX_TIM9_Init+0x6c>)
 800110c:	f002 fde0 	bl	8003cd0 <HAL_TIM_ConfigClockSource>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8001116:	f000 f8e7 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000210 	.word	0x20000210
 8001128:	40014000 	.word	0x40014000

0800112c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <MX_USART2_UART_Init+0x4c>)
 8001132:	4a12      	ldr	r2, [pc, #72]	; (800117c <MX_USART2_UART_Init+0x50>)
 8001134:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <MX_USART2_UART_Init+0x4c>)
 8001138:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800113c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <MX_USART2_UART_Init+0x4c>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <MX_USART2_UART_Init+0x4c>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800114a:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <MX_USART2_UART_Init+0x4c>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001150:	4b09      	ldr	r3, [pc, #36]	; (8001178 <MX_USART2_UART_Init+0x4c>)
 8001152:	220c      	movs	r2, #12
 8001154:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <MX_USART2_UART_Init+0x4c>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <MX_USART2_UART_Init+0x4c>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001162:	4805      	ldr	r0, [pc, #20]	; (8001178 <MX_USART2_UART_Init+0x4c>)
 8001164:	f003 f9e2 	bl	800452c <HAL_UART_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800116e:	f000 f8bb 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000254 	.word	0x20000254
 800117c:	40004400 	.word	0x40004400

08001180 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	4b10      	ldr	r3, [pc, #64]	; (80011cc <MX_DMA_Init+0x4c>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a0f      	ldr	r2, [pc, #60]	; (80011cc <MX_DMA_Init+0x4c>)
 8001190:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <MX_DMA_Init+0x4c>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2100      	movs	r1, #0
 80011a6:	2010      	movs	r0, #16
 80011a8:	f001 f921 	bl	80023ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80011ac:	2010      	movs	r0, #16
 80011ae:	f001 f93a 	bl	8002426 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2100      	movs	r1, #0
 80011b6:	2011      	movs	r0, #17
 80011b8:	f001 f919 	bl	80023ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80011bc:	2011      	movs	r0, #17
 80011be:	f001 f932 	bl	8002426 <HAL_NVIC_EnableIRQ>

}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40023800 	.word	0x40023800

080011d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	; 0x28
 80011d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
 80011e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	4b3b      	ldr	r3, [pc, #236]	; (80012d8 <MX_GPIO_Init+0x108>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a3a      	ldr	r2, [pc, #232]	; (80012d8 <MX_GPIO_Init+0x108>)
 80011f0:	f043 0304 	orr.w	r3, r3, #4
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b38      	ldr	r3, [pc, #224]	; (80012d8 <MX_GPIO_Init+0x108>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0304 	and.w	r3, r3, #4
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	4b34      	ldr	r3, [pc, #208]	; (80012d8 <MX_GPIO_Init+0x108>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a33      	ldr	r2, [pc, #204]	; (80012d8 <MX_GPIO_Init+0x108>)
 800120c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b31      	ldr	r3, [pc, #196]	; (80012d8 <MX_GPIO_Init+0x108>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	4b2d      	ldr	r3, [pc, #180]	; (80012d8 <MX_GPIO_Init+0x108>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a2c      	ldr	r2, [pc, #176]	; (80012d8 <MX_GPIO_Init+0x108>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b2a      	ldr	r3, [pc, #168]	; (80012d8 <MX_GPIO_Init+0x108>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <MX_GPIO_Init+0x108>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a25      	ldr	r2, [pc, #148]	; (80012d8 <MX_GPIO_Init+0x108>)
 8001244:	f043 0302 	orr.w	r3, r3, #2
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <MX_GPIO_Init+0x108>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SEG_G_Pin|SEG_D_Pin|SEG_E_Pin|SEG_C_Pin 
 8001256:	2200      	movs	r2, #0
 8001258:	f640 71ff 	movw	r1, #4095	; 0xfff
 800125c:	481f      	ldr	r0, [pc, #124]	; (80012dc <MX_GPIO_Init+0x10c>)
 800125e:	f001 fe0f 	bl	8002e80 <HAL_GPIO_WritePin>
                          |SEG_B_Pin|SEG_F_Pin|SEG_A_Pin|SEG_DP_Pin 
                          |COM4_Pin|COM3_Pin|COM2_Pin|COM1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GREEN_GPIO_Port, LD2_GREEN_Pin, GPIO_PIN_RESET);
 8001262:	2200      	movs	r2, #0
 8001264:	2120      	movs	r1, #32
 8001266:	481e      	ldr	r0, [pc, #120]	; (80012e0 <MX_GPIO_Init+0x110>)
 8001268:	f001 fe0a 	bl	8002e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_Btn_Pin */
  GPIO_InitStruct.Pin = Blue_Btn_Pin;
 800126c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001270:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001272:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <MX_GPIO_Init+0x114>)
 8001274:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Blue_Btn_GPIO_Port, &GPIO_InitStruct);
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	4619      	mov	r1, r3
 8001280:	4816      	ldr	r0, [pc, #88]	; (80012dc <MX_GPIO_Init+0x10c>)
 8001282:	f001 fc7b 	bl	8002b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_G_Pin SEG_D_Pin SEG_E_Pin SEG_C_Pin 
                           SEG_B_Pin SEG_F_Pin SEG_A_Pin SEG_DP_Pin 
                           COM4_Pin COM3_Pin COM2_Pin COM1_Pin */
  GPIO_InitStruct.Pin = SEG_G_Pin|SEG_D_Pin|SEG_E_Pin|SEG_C_Pin 
 8001286:	f640 73ff 	movw	r3, #4095	; 0xfff
 800128a:	617b      	str	r3, [r7, #20]
                          |SEG_B_Pin|SEG_F_Pin|SEG_A_Pin|SEG_DP_Pin 
                          |COM4_Pin|COM3_Pin|COM2_Pin|COM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128c:	2301      	movs	r3, #1
 800128e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	2300      	movs	r3, #0
 8001296:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	4619      	mov	r1, r3
 800129e:	480f      	ldr	r0, [pc, #60]	; (80012dc <MX_GPIO_Init+0x10c>)
 80012a0:	f001 fc6c 	bl	8002b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_GREEN_Pin */
  GPIO_InitStruct.Pin = LD2_GREEN_Pin;
 80012a4:	2320      	movs	r3, #32
 80012a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a8:	2301      	movs	r3, #1
 80012aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2300      	movs	r3, #0
 80012b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GREEN_GPIO_Port, &GPIO_InitStruct);
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	4619      	mov	r1, r3
 80012ba:	4809      	ldr	r0, [pc, #36]	; (80012e0 <MX_GPIO_Init+0x110>)
 80012bc:	f001 fc5e 	bl	8002b7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2100      	movs	r1, #0
 80012c4:	2028      	movs	r0, #40	; 0x28
 80012c6:	f001 f892 	bl	80023ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012ca:	2028      	movs	r0, #40	; 0x28
 80012cc:	f001 f8ab 	bl	8002426 <HAL_NVIC_EnableIRQ>

}
 80012d0:	bf00      	nop
 80012d2:	3728      	adds	r7, #40	; 0x28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40020800 	.word	0x40020800
 80012e0:	40020000 	.word	0x40020000
 80012e4:	10210000 	.word	0x10210000

080012e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	4b10      	ldr	r3, [pc, #64]	; (8001344 <HAL_MspInit+0x4c>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	4a0f      	ldr	r2, [pc, #60]	; (8001344 <HAL_MspInit+0x4c>)
 8001308:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800130c:	6453      	str	r3, [r2, #68]	; 0x44
 800130e:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <HAL_MspInit+0x4c>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	603b      	str	r3, [r7, #0]
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <HAL_MspInit+0x4c>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	4a08      	ldr	r2, [pc, #32]	; (8001344 <HAL_MspInit+0x4c>)
 8001324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001328:	6413      	str	r3, [r2, #64]	; 0x40
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_MspInit+0x4c>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001332:	603b      	str	r3, [r7, #0]
 8001334:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001336:	2007      	movs	r0, #7
 8001338:	f001 f84e 	bl	80023d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40023800 	.word	0x40023800

08001348 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	; 0x28
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a1b      	ldr	r2, [pc, #108]	; (80013d4 <HAL_ADC_MspInit+0x8c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d12f      	bne.n	80013ca <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <HAL_ADC_MspInit+0x90>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	4a19      	ldr	r2, [pc, #100]	; (80013d8 <HAL_ADC_MspInit+0x90>)
 8001374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001378:	6453      	str	r3, [r2, #68]	; 0x44
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <HAL_ADC_MspInit+0x90>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <HAL_ADC_MspInit+0x90>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a12      	ldr	r2, [pc, #72]	; (80013d8 <HAL_ADC_MspInit+0x90>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <HAL_ADC_MspInit+0x90>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013a2:	2302      	movs	r3, #2
 80013a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a6:	2303      	movs	r3, #3
 80013a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	4809      	ldr	r0, [pc, #36]	; (80013dc <HAL_ADC_MspInit+0x94>)
 80013b6:	f001 fbe1 	bl	8002b7c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2100      	movs	r1, #0
 80013be:	2012      	movs	r0, #18
 80013c0:	f001 f815 	bl	80023ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80013c4:	2012      	movs	r0, #18
 80013c6:	f001 f82e 	bl	8002426 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013ca:	bf00      	nop
 80013cc:	3728      	adds	r7, #40	; 0x28
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40012000 	.word	0x40012000
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40020000 	.word	0x40020000

080013e0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a0b      	ldr	r2, [pc, #44]	; (800141c <HAL_TIM_PWM_MspInit+0x3c>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d10d      	bne.n	800140e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <HAL_TIM_PWM_MspInit+0x40>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	4a09      	ldr	r2, [pc, #36]	; (8001420 <HAL_TIM_PWM_MspInit+0x40>)
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	6413      	str	r3, [r2, #64]	; 0x40
 8001402:	4b07      	ldr	r3, [pc, #28]	; (8001420 <HAL_TIM_PWM_MspInit+0x40>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800140e:	bf00      	nop
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40000400 	.word	0x40000400
 8001420:	40023800 	.word	0x40023800

08001424 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a0e      	ldr	r2, [pc, #56]	; (800146c <HAL_TIM_Base_MspInit+0x48>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d115      	bne.n	8001462 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <HAL_TIM_Base_MspInit+0x4c>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	4a0c      	ldr	r2, [pc, #48]	; (8001470 <HAL_TIM_Base_MspInit+0x4c>)
 8001440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001444:	6453      	str	r3, [r2, #68]	; 0x44
 8001446:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <HAL_TIM_Base_MspInit+0x4c>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	2100      	movs	r1, #0
 8001456:	2018      	movs	r0, #24
 8001458:	f000 ffc9 	bl	80023ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800145c:	2018      	movs	r0, #24
 800145e:	f000 ffe2 	bl	8002426 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001462:	bf00      	nop
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40014000 	.word	0x40014000
 8001470:	40023800 	.word	0x40023800

08001474 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08a      	sub	sp, #40	; 0x28
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a21      	ldr	r2, [pc, #132]	; (8001518 <HAL_TIM_MspPostInit+0xa4>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d13b      	bne.n	800150e <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	4b20      	ldr	r3, [pc, #128]	; (800151c <HAL_TIM_MspPostInit+0xa8>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a1f      	ldr	r2, [pc, #124]	; (800151c <HAL_TIM_MspPostInit+0xa8>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b1d      	ldr	r3, [pc, #116]	; (800151c <HAL_TIM_MspPostInit+0xa8>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	4b19      	ldr	r3, [pc, #100]	; (800151c <HAL_TIM_MspPostInit+0xa8>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a18      	ldr	r2, [pc, #96]	; (800151c <HAL_TIM_MspPostInit+0xa8>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b16      	ldr	r3, [pc, #88]	; (800151c <HAL_TIM_MspPostInit+0xa8>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014ce:	23c0      	movs	r3, #192	; 0xc0
 80014d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d2:	2302      	movs	r3, #2
 80014d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014da:	2300      	movs	r3, #0
 80014dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014de:	2302      	movs	r3, #2
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	4619      	mov	r1, r3
 80014e8:	480d      	ldr	r0, [pc, #52]	; (8001520 <HAL_TIM_MspPostInit+0xac>)
 80014ea:	f001 fb47 	bl	8002b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014ee:	2303      	movs	r3, #3
 80014f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f2:	2302      	movs	r3, #2
 80014f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fa:	2300      	movs	r3, #0
 80014fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014fe:	2302      	movs	r3, #2
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	4619      	mov	r1, r3
 8001508:	4806      	ldr	r0, [pc, #24]	; (8001524 <HAL_TIM_MspPostInit+0xb0>)
 800150a:	f001 fb37 	bl	8002b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800150e:	bf00      	nop
 8001510:	3728      	adds	r7, #40	; 0x28
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40000400 	.word	0x40000400
 800151c:	40023800 	.word	0x40023800
 8001520:	40020000 	.word	0x40020000
 8001524:	40020400 	.word	0x40020400

08001528 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	; 0x28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a4b      	ldr	r2, [pc, #300]	; (8001674 <HAL_UART_MspInit+0x14c>)
 8001546:	4293      	cmp	r3, r2
 8001548:	f040 8090 	bne.w	800166c <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800154c:	2300      	movs	r3, #0
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	4b49      	ldr	r3, [pc, #292]	; (8001678 <HAL_UART_MspInit+0x150>)
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	4a48      	ldr	r2, [pc, #288]	; (8001678 <HAL_UART_MspInit+0x150>)
 8001556:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800155a:	6413      	str	r3, [r2, #64]	; 0x40
 800155c:	4b46      	ldr	r3, [pc, #280]	; (8001678 <HAL_UART_MspInit+0x150>)
 800155e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	4b42      	ldr	r3, [pc, #264]	; (8001678 <HAL_UART_MspInit+0x150>)
 800156e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001570:	4a41      	ldr	r2, [pc, #260]	; (8001678 <HAL_UART_MspInit+0x150>)
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	6313      	str	r3, [r2, #48]	; 0x30
 8001578:	4b3f      	ldr	r3, [pc, #252]	; (8001678 <HAL_UART_MspInit+0x150>)
 800157a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001584:	230c      	movs	r3, #12
 8001586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001590:	2303      	movs	r3, #3
 8001592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001594:	2307      	movs	r3, #7
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4619      	mov	r1, r3
 800159e:	4837      	ldr	r0, [pc, #220]	; (800167c <HAL_UART_MspInit+0x154>)
 80015a0:	f001 faec 	bl	8002b7c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80015a4:	4b36      	ldr	r3, [pc, #216]	; (8001680 <HAL_UART_MspInit+0x158>)
 80015a6:	4a37      	ldr	r2, [pc, #220]	; (8001684 <HAL_UART_MspInit+0x15c>)
 80015a8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80015aa:	4b35      	ldr	r3, [pc, #212]	; (8001680 <HAL_UART_MspInit+0x158>)
 80015ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015b0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015b2:	4b33      	ldr	r3, [pc, #204]	; (8001680 <HAL_UART_MspInit+0x158>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015b8:	4b31      	ldr	r3, [pc, #196]	; (8001680 <HAL_UART_MspInit+0x158>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015be:	4b30      	ldr	r3, [pc, #192]	; (8001680 <HAL_UART_MspInit+0x158>)
 80015c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015c4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015c6:	4b2e      	ldr	r3, [pc, #184]	; (8001680 <HAL_UART_MspInit+0x158>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015cc:	4b2c      	ldr	r3, [pc, #176]	; (8001680 <HAL_UART_MspInit+0x158>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80015d2:	4b2b      	ldr	r3, [pc, #172]	; (8001680 <HAL_UART_MspInit+0x158>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015d8:	4b29      	ldr	r3, [pc, #164]	; (8001680 <HAL_UART_MspInit+0x158>)
 80015da:	2200      	movs	r2, #0
 80015dc:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015de:	4b28      	ldr	r3, [pc, #160]	; (8001680 <HAL_UART_MspInit+0x158>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80015e4:	4826      	ldr	r0, [pc, #152]	; (8001680 <HAL_UART_MspInit+0x158>)
 80015e6:	f000 ff39 	bl	800245c <HAL_DMA_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80015f0:	f7ff fe7a 	bl	80012e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a22      	ldr	r2, [pc, #136]	; (8001680 <HAL_UART_MspInit+0x158>)
 80015f8:	635a      	str	r2, [r3, #52]	; 0x34
 80015fa:	4a21      	ldr	r2, [pc, #132]	; (8001680 <HAL_UART_MspInit+0x158>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001600:	4b21      	ldr	r3, [pc, #132]	; (8001688 <HAL_UART_MspInit+0x160>)
 8001602:	4a22      	ldr	r2, [pc, #136]	; (800168c <HAL_UART_MspInit+0x164>)
 8001604:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001606:	4b20      	ldr	r3, [pc, #128]	; (8001688 <HAL_UART_MspInit+0x160>)
 8001608:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800160c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800160e:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <HAL_UART_MspInit+0x160>)
 8001610:	2240      	movs	r2, #64	; 0x40
 8001612:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001614:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <HAL_UART_MspInit+0x160>)
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800161a:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <HAL_UART_MspInit+0x160>)
 800161c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001620:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001622:	4b19      	ldr	r3, [pc, #100]	; (8001688 <HAL_UART_MspInit+0x160>)
 8001624:	2200      	movs	r2, #0
 8001626:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001628:	4b17      	ldr	r3, [pc, #92]	; (8001688 <HAL_UART_MspInit+0x160>)
 800162a:	2200      	movs	r2, #0
 800162c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800162e:	4b16      	ldr	r3, [pc, #88]	; (8001688 <HAL_UART_MspInit+0x160>)
 8001630:	2200      	movs	r2, #0
 8001632:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001634:	4b14      	ldr	r3, [pc, #80]	; (8001688 <HAL_UART_MspInit+0x160>)
 8001636:	2200      	movs	r2, #0
 8001638:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800163a:	4b13      	ldr	r3, [pc, #76]	; (8001688 <HAL_UART_MspInit+0x160>)
 800163c:	2200      	movs	r2, #0
 800163e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001640:	4811      	ldr	r0, [pc, #68]	; (8001688 <HAL_UART_MspInit+0x160>)
 8001642:	f000 ff0b 	bl	800245c <HAL_DMA_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 800164c:	f7ff fe4c 	bl	80012e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a0d      	ldr	r2, [pc, #52]	; (8001688 <HAL_UART_MspInit+0x160>)
 8001654:	631a      	str	r2, [r3, #48]	; 0x30
 8001656:	4a0c      	ldr	r2, [pc, #48]	; (8001688 <HAL_UART_MspInit+0x160>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800165c:	2200      	movs	r2, #0
 800165e:	2100      	movs	r1, #0
 8001660:	2026      	movs	r0, #38	; 0x26
 8001662:	f000 fec4 	bl	80023ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001666:	2026      	movs	r0, #38	; 0x26
 8001668:	f000 fedd 	bl	8002426 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800166c:	bf00      	nop
 800166e:	3728      	adds	r7, #40	; 0x28
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40004400 	.word	0x40004400
 8001678:	40023800 	.word	0x40023800
 800167c:	40020000 	.word	0x40020000
 8001680:	200000c4 	.word	0x200000c4
 8001684:	40026088 	.word	0x40026088
 8001688:	200001ac 	.word	0x200001ac
 800168c:	400260a0 	.word	0x400260a0

08001690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a2:	e7fe      	b.n	80016a2 <HardFault_Handler+0x4>

080016a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <MemManage_Handler+0x4>

080016aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ae:	e7fe      	b.n	80016ae <BusFault_Handler+0x4>

080016b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <UsageFault_Handler+0x4>

080016b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e4:	f000 f8fa 	bl	80018dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}

080016ec <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80016f0:	4802      	ldr	r0, [pc, #8]	; (80016fc <DMA1_Stream5_IRQHandler+0x10>)
 80016f2:	f000 ffdb 	bl	80026ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	200000c4 	.word	0x200000c4

08001700 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <DMA1_Stream6_IRQHandler+0x10>)
 8001706:	f000 ffd1 	bl	80026ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200001ac 	.word	0x200001ac

08001714 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001718:	4802      	ldr	r0, [pc, #8]	; (8001724 <ADC_IRQHandler+0x10>)
 800171a:	f000 f9f3 	bl	8001b04 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000164 	.word	0x20000164

08001728 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 800172c:	4802      	ldr	r0, [pc, #8]	; (8001738 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800172e:	f002 f901 	bl	8003934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000210 	.word	0x20000210

0800173c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <USART2_IRQHandler+0x10>)
 8001742:	f003 f82d 	bl	80047a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000254 	.word	0x20000254

08001750 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001754:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001758:	f001 fbc6 	bl	8002ee8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}

08001760 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <_sbrk+0x50>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d102      	bne.n	8001776 <_sbrk+0x16>
		heap_end = &end;
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <_sbrk+0x50>)
 8001772:	4a10      	ldr	r2, [pc, #64]	; (80017b4 <_sbrk+0x54>)
 8001774:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <_sbrk+0x50>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <_sbrk+0x50>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4413      	add	r3, r2
 8001784:	466a      	mov	r2, sp
 8001786:	4293      	cmp	r3, r2
 8001788:	d907      	bls.n	800179a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800178a:	f003 fea7 	bl	80054dc <__errno>
 800178e:	4602      	mov	r2, r0
 8001790:	230c      	movs	r3, #12
 8001792:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001794:	f04f 33ff 	mov.w	r3, #4294967295
 8001798:	e006      	b.n	80017a8 <_sbrk+0x48>
	}

	heap_end += incr;
 800179a:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <_sbrk+0x50>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	4a03      	ldr	r2, [pc, #12]	; (80017b0 <_sbrk+0x50>)
 80017a4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80017a6:	68fb      	ldr	r3, [r7, #12]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	200000b4 	.word	0x200000b4
 80017b4:	200002a0 	.word	0x200002a0

080017b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <SystemInit+0x28>)
 80017be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017c2:	4a07      	ldr	r2, [pc, #28]	; (80017e0 <SystemInit+0x28>)
 80017c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017cc:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <SystemInit+0x28>)
 80017ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017d2:	609a      	str	r2, [r3, #8]
#endif
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800181c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80017e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80017ea:	e003      	b.n	80017f4 <LoopCopyDataInit>

080017ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80017ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80017f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80017f2:	3104      	adds	r1, #4

080017f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80017f4:	480b      	ldr	r0, [pc, #44]	; (8001824 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80017f6:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80017f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017fc:	d3f6      	bcc.n	80017ec <CopyDataInit>
  ldr  r2, =_sbss
 80017fe:	4a0b      	ldr	r2, [pc, #44]	; (800182c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001800:	e002      	b.n	8001808 <LoopFillZerobss>

08001802 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001802:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001804:	f842 3b04 	str.w	r3, [r2], #4

08001808 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800180a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800180c:	d3f9      	bcc.n	8001802 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800180e:	f7ff ffd3 	bl	80017b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001812:	f003 fe69 	bl	80054e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001816:	f7ff fad9 	bl	8000dcc <main>
  bx  lr    
 800181a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800181c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001820:	08005dd8 	.word	0x08005dd8
  ldr  r0, =_sdata
 8001824:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001828:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 800182c:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001830:	200002a0 	.word	0x200002a0

08001834 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001834:	e7fe      	b.n	8001834 <DMA1_Stream0_IRQHandler>
	...

08001838 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800183c:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <HAL_Init+0x40>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a0d      	ldr	r2, [pc, #52]	; (8001878 <HAL_Init+0x40>)
 8001842:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001846:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001848:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <HAL_Init+0x40>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <HAL_Init+0x40>)
 800184e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001852:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001854:	4b08      	ldr	r3, [pc, #32]	; (8001878 <HAL_Init+0x40>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a07      	ldr	r2, [pc, #28]	; (8001878 <HAL_Init+0x40>)
 800185a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001860:	2003      	movs	r0, #3
 8001862:	f000 fdb9 	bl	80023d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001866:	2000      	movs	r0, #0
 8001868:	f000 f808 	bl	800187c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800186c:	f7ff fd44 	bl	80012f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40023c00 	.word	0x40023c00

0800187c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001884:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <HAL_InitTick+0x54>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <HAL_InitTick+0x58>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	4619      	mov	r1, r3
 800188e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001892:	fbb3 f3f1 	udiv	r3, r3, r1
 8001896:	fbb2 f3f3 	udiv	r3, r2, r3
 800189a:	4618      	mov	r0, r3
 800189c:	f000 fdd1 	bl	8002442 <HAL_SYSTICK_Config>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e00e      	b.n	80018c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b0f      	cmp	r3, #15
 80018ae:	d80a      	bhi.n	80018c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b0:	2200      	movs	r2, #0
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	f04f 30ff 	mov.w	r0, #4294967295
 80018b8:	f000 fd99 	bl	80023ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018bc:	4a06      	ldr	r2, [pc, #24]	; (80018d8 <HAL_InitTick+0x5c>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	e000      	b.n	80018c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000004 	.word	0x20000004
 80018d4:	2000000c 	.word	0x2000000c
 80018d8:	20000008 	.word	0x20000008

080018dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_IncTick+0x20>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_IncTick+0x24>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4413      	add	r3, r2
 80018ec:	4a04      	ldr	r2, [pc, #16]	; (8001900 <HAL_IncTick+0x24>)
 80018ee:	6013      	str	r3, [r2, #0]
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	2000000c 	.word	0x2000000c
 8001900:	20000298 	.word	0x20000298

08001904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return uwTick;
 8001908:	4b03      	ldr	r3, [pc, #12]	; (8001918 <HAL_GetTick+0x14>)
 800190a:	681b      	ldr	r3, [r3, #0]
}
 800190c:	4618      	mov	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	20000298 	.word	0x20000298

0800191c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001924:	2300      	movs	r3, #0
 8001926:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e033      	b.n	800199a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	2b00      	cmp	r3, #0
 8001938:	d109      	bne.n	800194e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff fd04 	bl	8001348 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f003 0310 	and.w	r3, r3, #16
 8001956:	2b00      	cmp	r3, #0
 8001958:	d118      	bne.n	800198c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001962:	f023 0302 	bic.w	r3, r3, #2
 8001966:	f043 0202 	orr.w	r2, r3, #2
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 fb5c 	bl	800202c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	f023 0303 	bic.w	r3, r3, #3
 8001982:	f043 0201 	orr.w	r2, r3, #1
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	641a      	str	r2, [r3, #64]	; 0x40
 800198a:	e001      	b.n	8001990 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001998:	7bfb      	ldrb	r3, [r7, #15]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d101      	bne.n	80019be <HAL_ADC_Start_IT+0x1a>
 80019ba:	2302      	movs	r3, #2
 80019bc:	e094      	b.n	8001ae8 <HAL_ADC_Start_IT+0x144>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d018      	beq.n	8001a06 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0201 	orr.w	r2, r2, #1
 80019e2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019e4:	4b43      	ldr	r3, [pc, #268]	; (8001af4 <HAL_ADC_Start_IT+0x150>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a43      	ldr	r2, [pc, #268]	; (8001af8 <HAL_ADC_Start_IT+0x154>)
 80019ea:	fba2 2303 	umull	r2, r3, r2, r3
 80019ee:	0c9a      	lsrs	r2, r3, #18
 80019f0:	4613      	mov	r3, r2
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	4413      	add	r3, r2
 80019f6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80019f8:	e002      	b.n	8001a00 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	3b01      	subs	r3, #1
 80019fe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f9      	bne.n	80019fa <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d168      	bne.n	8001ae6 <HAL_ADC_Start_IT+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a1c:	f023 0301 	bic.w	r3, r3, #1
 8001a20:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d007      	beq.n	8001a46 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a3e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a52:	d106      	bne.n	8001a62 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a58:	f023 0206 	bic.w	r2, r3, #6
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	645a      	str	r2, [r3, #68]	; 0x44
 8001a60:	e002      	b.n	8001a68 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a70:	4b22      	ldr	r3, [pc, #136]	; (8001afc <HAL_ADC_Start_IT+0x158>)
 8001a72:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a7c:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	6812      	ldr	r2, [r2, #0]
 8001a88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a8c:	f043 0320 	orr.w	r3, r3, #32
 8001a90:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f003 031f 	and.w	r3, r3, #31
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10f      	bne.n	8001abe <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d11c      	bne.n	8001ae6 <HAL_ADC_Start_IT+0x142>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	e013      	b.n	8001ae6 <HAL_ADC_Start_IT+0x142>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a0f      	ldr	r2, [pc, #60]	; (8001b00 <HAL_ADC_Start_IT+0x15c>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d10e      	bne.n	8001ae6 <HAL_ADC_Start_IT+0x142>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d107      	bne.n	8001ae6 <HAL_ADC_Start_IT+0x142>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ae4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	20000004 	.word	0x20000004
 8001af8:	431bde83 	.word	0x431bde83
 8001afc:	40012300 	.word	0x40012300
 8001b00:	40012000 	.word	0x40012000

08001b04 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	2300      	movs	r3, #0
 8001b12:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	bf0c      	ite	eq
 8001b22:	2301      	moveq	r3, #1
 8001b24:	2300      	movne	r3, #0
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0320 	and.w	r3, r3, #32
 8001b34:	2b20      	cmp	r3, #32
 8001b36:	bf0c      	ite	eq
 8001b38:	2301      	moveq	r3, #1
 8001b3a:	2300      	movne	r3, #0
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d049      	beq.n	8001bda <HAL_ADC_IRQHandler+0xd6>
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d046      	beq.n	8001bda <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b50:	f003 0310 	and.w	r3, r3, #16
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d105      	bne.n	8001b64 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d12b      	bne.n	8001bca <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d127      	bne.n	8001bca <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b80:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d006      	beq.n	8001b96 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d119      	bne.n	8001bca <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 0220 	bic.w	r2, r2, #32
 8001ba4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d105      	bne.n	8001bca <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	f043 0201 	orr.w	r2, r3, #1
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7fe fe66 	bl	800089c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f06f 0212 	mvn.w	r2, #18
 8001bd8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	bf0c      	ite	eq
 8001be8:	2301      	moveq	r3, #1
 8001bea:	2300      	movne	r3, #0
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bfa:	2b80      	cmp	r3, #128	; 0x80
 8001bfc:	bf0c      	ite	eq
 8001bfe:	2301      	moveq	r3, #1
 8001c00:	2300      	movne	r3, #0
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d057      	beq.n	8001cbc <HAL_ADC_IRQHandler+0x1b8>
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d054      	beq.n	8001cbc <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	f003 0310 	and.w	r3, r3, #16
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d105      	bne.n	8001c2a <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d139      	bne.n	8001cac <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c3e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d006      	beq.n	8001c54 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d12b      	bne.n	8001cac <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d124      	bne.n	8001cac <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d11d      	bne.n	8001cac <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d119      	bne.n	8001cac <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	685a      	ldr	r2, [r3, #4]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c86:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d105      	bne.n	8001cac <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	f043 0201 	orr.w	r2, r3, #1
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 fab9 	bl	8002224 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f06f 020c 	mvn.w	r2, #12
 8001cba:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	bf0c      	ite	eq
 8001cca:	2301      	moveq	r3, #1
 8001ccc:	2300      	movne	r3, #0
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cdc:	2b40      	cmp	r3, #64	; 0x40
 8001cde:	bf0c      	ite	eq
 8001ce0:	2301      	moveq	r3, #1
 8001ce2:	2300      	movne	r3, #0
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d017      	beq.n	8001d1e <HAL_ADC_IRQHandler+0x21a>
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d014      	beq.n	8001d1e <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d10d      	bne.n	8001d1e <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f846 	bl	8001da0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f06f 0201 	mvn.w	r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0320 	and.w	r3, r3, #32
 8001d28:	2b20      	cmp	r3, #32
 8001d2a:	bf0c      	ite	eq
 8001d2c:	2301      	moveq	r3, #1
 8001d2e:	2300      	movne	r3, #0
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d42:	bf0c      	ite	eq
 8001d44:	2301      	moveq	r3, #1
 8001d46:	2300      	movne	r3, #0
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d015      	beq.n	8001d7e <HAL_ADC_IRQHandler+0x27a>
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d012      	beq.n	8001d7e <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5c:	f043 0202 	orr.w	r2, r3, #2
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f06f 0220 	mvn.w	r2, #32
 8001d6c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f820 	bl	8001db4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f06f 0220 	mvn.w	r2, #32
 8001d7c:	601a      	str	r2, [r3, #0]
  }
}
 8001d7e:	bf00      	nop
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d101      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x1c>
 8001de0:	2302      	movs	r3, #2
 8001de2:	e113      	b.n	800200c <HAL_ADC_ConfigChannel+0x244>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b09      	cmp	r3, #9
 8001df2:	d925      	bls.n	8001e40 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68d9      	ldr	r1, [r3, #12]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	461a      	mov	r2, r3
 8001e02:	4613      	mov	r3, r2
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	4413      	add	r3, r2
 8001e08:	3b1e      	subs	r3, #30
 8001e0a:	2207      	movs	r2, #7
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43da      	mvns	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	400a      	ands	r2, r1
 8001e18:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68d9      	ldr	r1, [r3, #12]
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	4403      	add	r3, r0
 8001e32:	3b1e      	subs	r3, #30
 8001e34:	409a      	lsls	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	e022      	b.n	8001e86 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6919      	ldr	r1, [r3, #16]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4613      	mov	r3, r2
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	4413      	add	r3, r2
 8001e54:	2207      	movs	r2, #7
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43da      	mvns	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	400a      	ands	r2, r1
 8001e62:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6919      	ldr	r1, [r3, #16]
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	4618      	mov	r0, r3
 8001e76:	4603      	mov	r3, r0
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	4403      	add	r3, r0
 8001e7c:	409a      	lsls	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b06      	cmp	r3, #6
 8001e8c:	d824      	bhi.n	8001ed8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3b05      	subs	r3, #5
 8001ea0:	221f      	movs	r2, #31
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43da      	mvns	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	400a      	ands	r2, r1
 8001eae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	3b05      	subs	r3, #5
 8001eca:	fa00 f203 	lsl.w	r2, r0, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ed6:	e04c      	b.n	8001f72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b0c      	cmp	r3, #12
 8001ede:	d824      	bhi.n	8001f2a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	4613      	mov	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	3b23      	subs	r3, #35	; 0x23
 8001ef2:	221f      	movs	r2, #31
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43da      	mvns	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	400a      	ands	r2, r1
 8001f00:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	4618      	mov	r0, r3
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	4613      	mov	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	3b23      	subs	r3, #35	; 0x23
 8001f1c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	631a      	str	r2, [r3, #48]	; 0x30
 8001f28:	e023      	b.n	8001f72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	4613      	mov	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	3b41      	subs	r3, #65	; 0x41
 8001f3c:	221f      	movs	r2, #31
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43da      	mvns	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	400a      	ands	r2, r1
 8001f4a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	4618      	mov	r0, r3
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4413      	add	r3, r2
 8001f64:	3b41      	subs	r3, #65	; 0x41
 8001f66:	fa00 f203 	lsl.w	r2, r0, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f72:	4b29      	ldr	r3, [pc, #164]	; (8002018 <HAL_ADC_ConfigChannel+0x250>)
 8001f74:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a28      	ldr	r2, [pc, #160]	; (800201c <HAL_ADC_ConfigChannel+0x254>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d10f      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x1d8>
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b12      	cmp	r3, #18
 8001f86:	d10b      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a1d      	ldr	r2, [pc, #116]	; (800201c <HAL_ADC_ConfigChannel+0x254>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d12b      	bne.n	8002002 <HAL_ADC_ConfigChannel+0x23a>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a1c      	ldr	r2, [pc, #112]	; (8002020 <HAL_ADC_ConfigChannel+0x258>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d003      	beq.n	8001fbc <HAL_ADC_ConfigChannel+0x1f4>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b11      	cmp	r3, #17
 8001fba:	d122      	bne.n	8002002 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a11      	ldr	r2, [pc, #68]	; (8002020 <HAL_ADC_ConfigChannel+0x258>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d111      	bne.n	8002002 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fde:	4b11      	ldr	r3, [pc, #68]	; (8002024 <HAL_ADC_ConfigChannel+0x25c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a11      	ldr	r2, [pc, #68]	; (8002028 <HAL_ADC_ConfigChannel+0x260>)
 8001fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe8:	0c9a      	lsrs	r2, r3, #18
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ff4:	e002      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f9      	bne.n	8001ff6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	40012300 	.word	0x40012300
 800201c:	40012000 	.word	0x40012000
 8002020:	10000012 	.word	0x10000012
 8002024:	20000004 	.word	0x20000004
 8002028:	431bde83 	.word	0x431bde83

0800202c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002034:	4b79      	ldr	r3, [pc, #484]	; (800221c <ADC_Init+0x1f0>)
 8002036:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	431a      	orrs	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002060:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6859      	ldr	r1, [r3, #4]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	021a      	lsls	r2, r3, #8
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002084:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6859      	ldr	r1, [r3, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6899      	ldr	r1, [r3, #8]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68da      	ldr	r2, [r3, #12]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020be:	4a58      	ldr	r2, [pc, #352]	; (8002220 <ADC_Init+0x1f4>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d022      	beq.n	800210a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689a      	ldr	r2, [r3, #8]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6899      	ldr	r1, [r3, #8]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6899      	ldr	r1, [r3, #8]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	430a      	orrs	r2, r1
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	e00f      	b.n	800212a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002118:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002128:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 0202 	bic.w	r2, r2, #2
 8002138:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6899      	ldr	r1, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	7e1b      	ldrb	r3, [r3, #24]
 8002144:	005a      	lsls	r2, r3, #1
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d01b      	beq.n	8002190 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	685a      	ldr	r2, [r3, #4]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002166:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002176:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6859      	ldr	r1, [r3, #4]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	3b01      	subs	r3, #1
 8002184:	035a      	lsls	r2, r3, #13
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	e007      	b.n	80021a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800219e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	051a      	lsls	r2, r3, #20
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6899      	ldr	r1, [r3, #8]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021e2:	025a      	lsls	r2, r3, #9
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6899      	ldr	r1, [r3, #8]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	029a      	lsls	r2, r3, #10
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	609a      	str	r2, [r3, #8]
}
 8002210:	bf00      	nop
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	40012300 	.word	0x40012300
 8002220:	0f000001 	.word	0x0f000001

08002224 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002248:	4b0c      	ldr	r3, [pc, #48]	; (800227c <__NVIC_SetPriorityGrouping+0x44>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002254:	4013      	ands	r3, r2
 8002256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002260:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800226a:	4a04      	ldr	r2, [pc, #16]	; (800227c <__NVIC_SetPriorityGrouping+0x44>)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	60d3      	str	r3, [r2, #12]
}
 8002270:	bf00      	nop
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002284:	4b04      	ldr	r3, [pc, #16]	; (8002298 <__NVIC_GetPriorityGrouping+0x18>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	0a1b      	lsrs	r3, r3, #8
 800228a:	f003 0307 	and.w	r3, r3, #7
}
 800228e:	4618      	mov	r0, r3
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	db0b      	blt.n	80022c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	f003 021f 	and.w	r2, r3, #31
 80022b4:	4907      	ldr	r1, [pc, #28]	; (80022d4 <__NVIC_EnableIRQ+0x38>)
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	095b      	lsrs	r3, r3, #5
 80022bc:	2001      	movs	r0, #1
 80022be:	fa00 f202 	lsl.w	r2, r0, r2
 80022c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	e000e100 	.word	0xe000e100

080022d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	6039      	str	r1, [r7, #0]
 80022e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	db0a      	blt.n	8002302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	490c      	ldr	r1, [pc, #48]	; (8002324 <__NVIC_SetPriority+0x4c>)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	0112      	lsls	r2, r2, #4
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	440b      	add	r3, r1
 80022fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002300:	e00a      	b.n	8002318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	b2da      	uxtb	r2, r3
 8002306:	4908      	ldr	r1, [pc, #32]	; (8002328 <__NVIC_SetPriority+0x50>)
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	3b04      	subs	r3, #4
 8002310:	0112      	lsls	r2, r2, #4
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	440b      	add	r3, r1
 8002316:	761a      	strb	r2, [r3, #24]
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	e000e100 	.word	0xe000e100
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800232c:	b480      	push	{r7}
 800232e:	b089      	sub	sp, #36	; 0x24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f1c3 0307 	rsb	r3, r3, #7
 8002346:	2b04      	cmp	r3, #4
 8002348:	bf28      	it	cs
 800234a:	2304      	movcs	r3, #4
 800234c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	3304      	adds	r3, #4
 8002352:	2b06      	cmp	r3, #6
 8002354:	d902      	bls.n	800235c <NVIC_EncodePriority+0x30>
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	3b03      	subs	r3, #3
 800235a:	e000      	b.n	800235e <NVIC_EncodePriority+0x32>
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002360:	f04f 32ff 	mov.w	r2, #4294967295
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43da      	mvns	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	401a      	ands	r2, r3
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002374:	f04f 31ff 	mov.w	r1, #4294967295
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	fa01 f303 	lsl.w	r3, r1, r3
 800237e:	43d9      	mvns	r1, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002384:	4313      	orrs	r3, r2
         );
}
 8002386:	4618      	mov	r0, r3
 8002388:	3724      	adds	r7, #36	; 0x24
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
	...

08002394 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3b01      	subs	r3, #1
 80023a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023a4:	d301      	bcc.n	80023aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023a6:	2301      	movs	r3, #1
 80023a8:	e00f      	b.n	80023ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023aa:	4a0a      	ldr	r2, [pc, #40]	; (80023d4 <SysTick_Config+0x40>)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023b2:	210f      	movs	r1, #15
 80023b4:	f04f 30ff 	mov.w	r0, #4294967295
 80023b8:	f7ff ff8e 	bl	80022d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <SysTick_Config+0x40>)
 80023be:	2200      	movs	r2, #0
 80023c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023c2:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <SysTick_Config+0x40>)
 80023c4:	2207      	movs	r2, #7
 80023c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	e000e010 	.word	0xe000e010

080023d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f7ff ff29 	bl	8002238 <__NVIC_SetPriorityGrouping>
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b086      	sub	sp, #24
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	4603      	mov	r3, r0
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	607a      	str	r2, [r7, #4]
 80023fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002400:	f7ff ff3e 	bl	8002280 <__NVIC_GetPriorityGrouping>
 8002404:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	68b9      	ldr	r1, [r7, #8]
 800240a:	6978      	ldr	r0, [r7, #20]
 800240c:	f7ff ff8e 	bl	800232c <NVIC_EncodePriority>
 8002410:	4602      	mov	r2, r0
 8002412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002416:	4611      	mov	r1, r2
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ff5d 	bl	80022d8 <__NVIC_SetPriority>
}
 800241e:	bf00      	nop
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	4603      	mov	r3, r0
 800242e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff ff31 	bl	800229c <__NVIC_EnableIRQ>
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff ffa2 	bl	8002394 <SysTick_Config>
 8002450:	4603      	mov	r3, r0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002468:	f7ff fa4c 	bl	8001904 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e099      	b.n	80025ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2202      	movs	r2, #2
 8002484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0201 	bic.w	r2, r2, #1
 8002496:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002498:	e00f      	b.n	80024ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800249a:	f7ff fa33 	bl	8001904 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b05      	cmp	r3, #5
 80024a6:	d908      	bls.n	80024ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2220      	movs	r2, #32
 80024ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2203      	movs	r2, #3
 80024b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e078      	b.n	80025ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1e8      	bne.n	800249a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	4b38      	ldr	r3, [pc, #224]	; (80025b4 <HAL_DMA_Init+0x158>)
 80024d4:	4013      	ands	r3, r2
 80024d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	4313      	orrs	r3, r2
 800250a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	2b04      	cmp	r3, #4
 8002512:	d107      	bne.n	8002524 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	4313      	orrs	r3, r2
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	4313      	orrs	r3, r2
 8002522:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	f023 0307 	bic.w	r3, r3, #7
 800253a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	4313      	orrs	r3, r2
 8002544:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	2b04      	cmp	r3, #4
 800254c:	d117      	bne.n	800257e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	4313      	orrs	r3, r2
 8002556:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00e      	beq.n	800257e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 fa91 	bl	8002a88 <DMA_CheckFifoParam>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d008      	beq.n	800257e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2240      	movs	r2, #64	; 0x40
 8002570:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800257a:	2301      	movs	r3, #1
 800257c:	e016      	b.n	80025ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 fa48 	bl	8002a1c <DMA_CalcBaseAndBitshift>
 800258c:	4603      	mov	r3, r0
 800258e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002594:	223f      	movs	r2, #63	; 0x3f
 8002596:	409a      	lsls	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	f010803f 	.word	0xf010803f

080025b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
 80025c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025c6:	2300      	movs	r3, #0
 80025c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d101      	bne.n	80025de <HAL_DMA_Start_IT+0x26>
 80025da:	2302      	movs	r3, #2
 80025dc:	e040      	b.n	8002660 <HAL_DMA_Start_IT+0xa8>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d12f      	bne.n	8002652 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2202      	movs	r2, #2
 80025f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	68b9      	ldr	r1, [r7, #8]
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 f9da 	bl	80029c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002610:	223f      	movs	r2, #63	; 0x3f
 8002612:	409a      	lsls	r2, r3
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0216 	orr.w	r2, r2, #22
 8002626:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	2b00      	cmp	r3, #0
 800262e:	d007      	beq.n	8002640 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0208 	orr.w	r2, r2, #8
 800263e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0201 	orr.w	r2, r2, #1
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	e005      	b.n	800265e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800265a:	2302      	movs	r3, #2
 800265c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800265e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d004      	beq.n	8002686 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2280      	movs	r2, #128	; 0x80
 8002680:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e00c      	b.n	80026a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2205      	movs	r2, #5
 800268a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 0201 	bic.w	r2, r2, #1
 800269c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026b8:	4b92      	ldr	r3, [pc, #584]	; (8002904 <HAL_DMA_IRQHandler+0x258>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a92      	ldr	r2, [pc, #584]	; (8002908 <HAL_DMA_IRQHandler+0x25c>)
 80026be:	fba2 2303 	umull	r2, r3, r2, r3
 80026c2:	0a9b      	lsrs	r3, r3, #10
 80026c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d6:	2208      	movs	r2, #8
 80026d8:	409a      	lsls	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	4013      	ands	r3, r2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d01a      	beq.n	8002718 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d013      	beq.n	8002718 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0204 	bic.w	r2, r2, #4
 80026fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002704:	2208      	movs	r2, #8
 8002706:	409a      	lsls	r2, r3
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002710:	f043 0201 	orr.w	r2, r3, #1
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271c:	2201      	movs	r2, #1
 800271e:	409a      	lsls	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4013      	ands	r3, r2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d012      	beq.n	800274e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00b      	beq.n	800274e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273a:	2201      	movs	r2, #1
 800273c:	409a      	lsls	r2, r3
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002746:	f043 0202 	orr.w	r2, r3, #2
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002752:	2204      	movs	r2, #4
 8002754:	409a      	lsls	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4013      	ands	r3, r2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d012      	beq.n	8002784 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00b      	beq.n	8002784 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002770:	2204      	movs	r2, #4
 8002772:	409a      	lsls	r2, r3
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277c:	f043 0204 	orr.w	r2, r3, #4
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002788:	2210      	movs	r2, #16
 800278a:	409a      	lsls	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4013      	ands	r3, r2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d043      	beq.n	800281c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d03c      	beq.n	800281c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a6:	2210      	movs	r2, #16
 80027a8:	409a      	lsls	r2, r3
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d018      	beq.n	80027ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d108      	bne.n	80027dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d024      	beq.n	800281c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	4798      	blx	r3
 80027da:	e01f      	b.n	800281c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d01b      	beq.n	800281c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	4798      	blx	r3
 80027ec:	e016      	b.n	800281c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d107      	bne.n	800280c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0208 	bic.w	r2, r2, #8
 800280a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002820:	2220      	movs	r2, #32
 8002822:	409a      	lsls	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4013      	ands	r3, r2
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 808e 	beq.w	800294a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0310 	and.w	r3, r3, #16
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 8086 	beq.w	800294a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002842:	2220      	movs	r2, #32
 8002844:	409a      	lsls	r2, r3
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b05      	cmp	r3, #5
 8002854:	d136      	bne.n	80028c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0216 	bic.w	r2, r2, #22
 8002864:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695a      	ldr	r2, [r3, #20]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002874:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	2b00      	cmp	r3, #0
 800287c:	d103      	bne.n	8002886 <HAL_DMA_IRQHandler+0x1da>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002882:	2b00      	cmp	r3, #0
 8002884:	d007      	beq.n	8002896 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 0208 	bic.w	r2, r2, #8
 8002894:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289a:	223f      	movs	r2, #63	; 0x3f
 800289c:	409a      	lsls	r2, r3
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d07d      	beq.n	80029b6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	4798      	blx	r3
        }
        return;
 80028c2:	e078      	b.n	80029b6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d01c      	beq.n	800290c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d108      	bne.n	80028f2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d030      	beq.n	800294a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	4798      	blx	r3
 80028f0:	e02b      	b.n	800294a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d027      	beq.n	800294a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	4798      	blx	r3
 8002902:	e022      	b.n	800294a <HAL_DMA_IRQHandler+0x29e>
 8002904:	20000004 	.word	0x20000004
 8002908:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10f      	bne.n	800293a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 0210 	bic.w	r2, r2, #16
 8002928:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294e:	2b00      	cmp	r3, #0
 8002950:	d032      	beq.n	80029b8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d022      	beq.n	80029a4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2205      	movs	r2, #5
 8002962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 0201 	bic.w	r2, r2, #1
 8002974:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	3301      	adds	r3, #1
 800297a:	60bb      	str	r3, [r7, #8]
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	429a      	cmp	r2, r3
 8002980:	d307      	bcc.n	8002992 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1f2      	bne.n	8002976 <HAL_DMA_IRQHandler+0x2ca>
 8002990:	e000      	b.n	8002994 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002992:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	4798      	blx	r3
 80029b4:	e000      	b.n	80029b8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80029b6:	bf00      	nop
    }
  }
}
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop

080029c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
 80029cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2b40      	cmp	r3, #64	; 0x40
 80029ec:	d108      	bne.n	8002a00 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029fe:	e007      	b.n	8002a10 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	60da      	str	r2, [r3, #12]
}
 8002a10:	bf00      	nop
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	3b10      	subs	r3, #16
 8002a2c:	4a14      	ldr	r2, [pc, #80]	; (8002a80 <DMA_CalcBaseAndBitshift+0x64>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	091b      	lsrs	r3, r3, #4
 8002a34:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a36:	4a13      	ldr	r2, [pc, #76]	; (8002a84 <DMA_CalcBaseAndBitshift+0x68>)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2b03      	cmp	r3, #3
 8002a48:	d909      	bls.n	8002a5e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a52:	f023 0303 	bic.w	r3, r3, #3
 8002a56:	1d1a      	adds	r2, r3, #4
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	659a      	str	r2, [r3, #88]	; 0x58
 8002a5c:	e007      	b.n	8002a6e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a66:	f023 0303 	bic.w	r3, r3, #3
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	aaaaaaab 	.word	0xaaaaaaab
 8002a84:	08005d8c 	.word	0x08005d8c

08002a88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a90:	2300      	movs	r3, #0
 8002a92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d11f      	bne.n	8002ae2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2b03      	cmp	r3, #3
 8002aa6:	d855      	bhi.n	8002b54 <DMA_CheckFifoParam+0xcc>
 8002aa8:	a201      	add	r2, pc, #4	; (adr r2, 8002ab0 <DMA_CheckFifoParam+0x28>)
 8002aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aae:	bf00      	nop
 8002ab0:	08002ac1 	.word	0x08002ac1
 8002ab4:	08002ad3 	.word	0x08002ad3
 8002ab8:	08002ac1 	.word	0x08002ac1
 8002abc:	08002b55 	.word	0x08002b55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d045      	beq.n	8002b58 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ad0:	e042      	b.n	8002b58 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ada:	d13f      	bne.n	8002b5c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ae0:	e03c      	b.n	8002b5c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aea:	d121      	bne.n	8002b30 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2b03      	cmp	r3, #3
 8002af0:	d836      	bhi.n	8002b60 <DMA_CheckFifoParam+0xd8>
 8002af2:	a201      	add	r2, pc, #4	; (adr r2, 8002af8 <DMA_CheckFifoParam+0x70>)
 8002af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af8:	08002b09 	.word	0x08002b09
 8002afc:	08002b0f 	.word	0x08002b0f
 8002b00:	08002b09 	.word	0x08002b09
 8002b04:	08002b21 	.word	0x08002b21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b0c:	e02f      	b.n	8002b6e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d024      	beq.n	8002b64 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b1e:	e021      	b.n	8002b64 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b24:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b28:	d11e      	bne.n	8002b68 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b2e:	e01b      	b.n	8002b68 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d902      	bls.n	8002b3c <DMA_CheckFifoParam+0xb4>
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	d003      	beq.n	8002b42 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b3a:	e018      	b.n	8002b6e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b40:	e015      	b.n	8002b6e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00e      	beq.n	8002b6c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	73fb      	strb	r3, [r7, #15]
      break;
 8002b52:	e00b      	b.n	8002b6c <DMA_CheckFifoParam+0xe4>
      break;
 8002b54:	bf00      	nop
 8002b56:	e00a      	b.n	8002b6e <DMA_CheckFifoParam+0xe6>
      break;
 8002b58:	bf00      	nop
 8002b5a:	e008      	b.n	8002b6e <DMA_CheckFifoParam+0xe6>
      break;
 8002b5c:	bf00      	nop
 8002b5e:	e006      	b.n	8002b6e <DMA_CheckFifoParam+0xe6>
      break;
 8002b60:	bf00      	nop
 8002b62:	e004      	b.n	8002b6e <DMA_CheckFifoParam+0xe6>
      break;
 8002b64:	bf00      	nop
 8002b66:	e002      	b.n	8002b6e <DMA_CheckFifoParam+0xe6>
      break;   
 8002b68:	bf00      	nop
 8002b6a:	e000      	b.n	8002b6e <DMA_CheckFifoParam+0xe6>
      break;
 8002b6c:	bf00      	nop
    }
  } 
  
  return status; 
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b089      	sub	sp, #36	; 0x24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b92:	2300      	movs	r3, #0
 8002b94:	61fb      	str	r3, [r7, #28]
 8002b96:	e159      	b.n	8002e4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b98:	2201      	movs	r2, #1
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	f040 8148 	bne.w	8002e46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d00b      	beq.n	8002bd6 <HAL_GPIO_Init+0x5a>
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d007      	beq.n	8002bd6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bca:	2b11      	cmp	r3, #17
 8002bcc:	d003      	beq.n	8002bd6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b12      	cmp	r3, #18
 8002bd4:	d130      	bne.n	8002c38 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	2203      	movs	r2, #3
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	43db      	mvns	r3, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4013      	ands	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	43db      	mvns	r3, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	091b      	lsrs	r3, r3, #4
 8002c22:	f003 0201 	and.w	r2, r3, #1
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	2203      	movs	r2, #3
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d003      	beq.n	8002c78 <HAL_GPIO_Init+0xfc>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	2b12      	cmp	r3, #18
 8002c76:	d123      	bne.n	8002cc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	08da      	lsrs	r2, r3, #3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3208      	adds	r2, #8
 8002c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	220f      	movs	r2, #15
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	43db      	mvns	r3, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	691a      	ldr	r2, [r3, #16]
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	08da      	lsrs	r2, r3, #3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	3208      	adds	r2, #8
 8002cba:	69b9      	ldr	r1, [r7, #24]
 8002cbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	2203      	movs	r2, #3
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f003 0203 	and.w	r2, r3, #3
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f000 80a2 	beq.w	8002e46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	4b56      	ldr	r3, [pc, #344]	; (8002e60 <HAL_GPIO_Init+0x2e4>)
 8002d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0a:	4a55      	ldr	r2, [pc, #340]	; (8002e60 <HAL_GPIO_Init+0x2e4>)
 8002d0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d10:	6453      	str	r3, [r2, #68]	; 0x44
 8002d12:	4b53      	ldr	r3, [pc, #332]	; (8002e60 <HAL_GPIO_Init+0x2e4>)
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d1e:	4a51      	ldr	r2, [pc, #324]	; (8002e64 <HAL_GPIO_Init+0x2e8>)
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	089b      	lsrs	r3, r3, #2
 8002d24:	3302      	adds	r3, #2
 8002d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f003 0303 	and.w	r3, r3, #3
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	220f      	movs	r2, #15
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a48      	ldr	r2, [pc, #288]	; (8002e68 <HAL_GPIO_Init+0x2ec>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d019      	beq.n	8002d7e <HAL_GPIO_Init+0x202>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a47      	ldr	r2, [pc, #284]	; (8002e6c <HAL_GPIO_Init+0x2f0>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d013      	beq.n	8002d7a <HAL_GPIO_Init+0x1fe>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a46      	ldr	r2, [pc, #280]	; (8002e70 <HAL_GPIO_Init+0x2f4>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d00d      	beq.n	8002d76 <HAL_GPIO_Init+0x1fa>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a45      	ldr	r2, [pc, #276]	; (8002e74 <HAL_GPIO_Init+0x2f8>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d007      	beq.n	8002d72 <HAL_GPIO_Init+0x1f6>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a44      	ldr	r2, [pc, #272]	; (8002e78 <HAL_GPIO_Init+0x2fc>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d101      	bne.n	8002d6e <HAL_GPIO_Init+0x1f2>
 8002d6a:	2304      	movs	r3, #4
 8002d6c:	e008      	b.n	8002d80 <HAL_GPIO_Init+0x204>
 8002d6e:	2307      	movs	r3, #7
 8002d70:	e006      	b.n	8002d80 <HAL_GPIO_Init+0x204>
 8002d72:	2303      	movs	r3, #3
 8002d74:	e004      	b.n	8002d80 <HAL_GPIO_Init+0x204>
 8002d76:	2302      	movs	r3, #2
 8002d78:	e002      	b.n	8002d80 <HAL_GPIO_Init+0x204>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e000      	b.n	8002d80 <HAL_GPIO_Init+0x204>
 8002d7e:	2300      	movs	r3, #0
 8002d80:	69fa      	ldr	r2, [r7, #28]
 8002d82:	f002 0203 	and.w	r2, r2, #3
 8002d86:	0092      	lsls	r2, r2, #2
 8002d88:	4093      	lsls	r3, r2
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d90:	4934      	ldr	r1, [pc, #208]	; (8002e64 <HAL_GPIO_Init+0x2e8>)
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	089b      	lsrs	r3, r3, #2
 8002d96:	3302      	adds	r3, #2
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d9e:	4b37      	ldr	r3, [pc, #220]	; (8002e7c <HAL_GPIO_Init+0x300>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	43db      	mvns	r3, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4013      	ands	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dc2:	4a2e      	ldr	r2, [pc, #184]	; (8002e7c <HAL_GPIO_Init+0x300>)
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002dc8:	4b2c      	ldr	r3, [pc, #176]	; (8002e7c <HAL_GPIO_Init+0x300>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dec:	4a23      	ldr	r2, [pc, #140]	; (8002e7c <HAL_GPIO_Init+0x300>)
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002df2:	4b22      	ldr	r3, [pc, #136]	; (8002e7c <HAL_GPIO_Init+0x300>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e16:	4a19      	ldr	r2, [pc, #100]	; (8002e7c <HAL_GPIO_Init+0x300>)
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e1c:	4b17      	ldr	r3, [pc, #92]	; (8002e7c <HAL_GPIO_Init+0x300>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	43db      	mvns	r3, r3
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d003      	beq.n	8002e40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e40:	4a0e      	ldr	r2, [pc, #56]	; (8002e7c <HAL_GPIO_Init+0x300>)
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	61fb      	str	r3, [r7, #28]
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	2b0f      	cmp	r3, #15
 8002e50:	f67f aea2 	bls.w	8002b98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e54:	bf00      	nop
 8002e56:	3724      	adds	r7, #36	; 0x24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	40023800 	.word	0x40023800
 8002e64:	40013800 	.word	0x40013800
 8002e68:	40020000 	.word	0x40020000
 8002e6c:	40020400 	.word	0x40020400
 8002e70:	40020800 	.word	0x40020800
 8002e74:	40020c00 	.word	0x40020c00
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	40013c00 	.word	0x40013c00

08002e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	807b      	strh	r3, [r7, #2]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e90:	787b      	ldrb	r3, [r7, #1]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e96:	887a      	ldrh	r2, [r7, #2]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e9c:	e003      	b.n	8002ea6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e9e:	887b      	ldrh	r3, [r7, #2]
 8002ea0:	041a      	lsls	r2, r3, #16
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	619a      	str	r2, [r3, #24]
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
 8002eba:	460b      	mov	r3, r1
 8002ebc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	695a      	ldr	r2, [r3, #20]
 8002ec2:	887b      	ldrh	r3, [r7, #2]
 8002ec4:	401a      	ands	r2, r3
 8002ec6:	887b      	ldrh	r3, [r7, #2]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d104      	bne.n	8002ed6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002ecc:	887b      	ldrh	r3, [r7, #2]
 8002ece:	041a      	lsls	r2, r3, #16
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002ed4:	e002      	b.n	8002edc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002ed6:	887a      	ldrh	r2, [r7, #2]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	619a      	str	r2, [r3, #24]
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ef2:	4b08      	ldr	r3, [pc, #32]	; (8002f14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ef4:	695a      	ldr	r2, [r3, #20]
 8002ef6:	88fb      	ldrh	r3, [r7, #6]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d006      	beq.n	8002f0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002efe:	4a05      	ldr	r2, [pc, #20]	; (8002f14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f00:	88fb      	ldrh	r3, [r7, #6]
 8002f02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f04:	88fb      	ldrh	r3, [r7, #6]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fd ff1c 	bl	8000d44 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f0c:	bf00      	nop
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40013c00 	.word	0x40013c00

08002f18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e25b      	b.n	80033e2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d075      	beq.n	8003022 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f36:	4ba3      	ldr	r3, [pc, #652]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d00c      	beq.n	8002f5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f42:	4ba0      	ldr	r3, [pc, #640]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f4a:	2b08      	cmp	r3, #8
 8002f4c:	d112      	bne.n	8002f74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f4e:	4b9d      	ldr	r3, [pc, #628]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f5a:	d10b      	bne.n	8002f74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f5c:	4b99      	ldr	r3, [pc, #612]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d05b      	beq.n	8003020 <HAL_RCC_OscConfig+0x108>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d157      	bne.n	8003020 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e236      	b.n	80033e2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f7c:	d106      	bne.n	8002f8c <HAL_RCC_OscConfig+0x74>
 8002f7e:	4b91      	ldr	r3, [pc, #580]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a90      	ldr	r2, [pc, #576]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8002f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	e01d      	b.n	8002fc8 <HAL_RCC_OscConfig+0xb0>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f94:	d10c      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x98>
 8002f96:	4b8b      	ldr	r3, [pc, #556]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a8a      	ldr	r2, [pc, #552]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8002f9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fa0:	6013      	str	r3, [r2, #0]
 8002fa2:	4b88      	ldr	r3, [pc, #544]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a87      	ldr	r2, [pc, #540]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8002fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	e00b      	b.n	8002fc8 <HAL_RCC_OscConfig+0xb0>
 8002fb0:	4b84      	ldr	r3, [pc, #528]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a83      	ldr	r2, [pc, #524]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8002fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fba:	6013      	str	r3, [r2, #0]
 8002fbc:	4b81      	ldr	r3, [pc, #516]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a80      	ldr	r2, [pc, #512]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8002fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d013      	beq.n	8002ff8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd0:	f7fe fc98 	bl	8001904 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fd8:	f7fe fc94 	bl	8001904 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b64      	cmp	r3, #100	; 0x64
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e1fb      	b.n	80033e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fea:	4b76      	ldr	r3, [pc, #472]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0f0      	beq.n	8002fd8 <HAL_RCC_OscConfig+0xc0>
 8002ff6:	e014      	b.n	8003022 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff8:	f7fe fc84 	bl	8001904 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003000:	f7fe fc80 	bl	8001904 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b64      	cmp	r3, #100	; 0x64
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e1e7      	b.n	80033e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003012:	4b6c      	ldr	r3, [pc, #432]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f0      	bne.n	8003000 <HAL_RCC_OscConfig+0xe8>
 800301e:	e000      	b.n	8003022 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d063      	beq.n	80030f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800302e:	4b65      	ldr	r3, [pc, #404]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 030c 	and.w	r3, r3, #12
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00b      	beq.n	8003052 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800303a:	4b62      	ldr	r3, [pc, #392]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003042:	2b08      	cmp	r3, #8
 8003044:	d11c      	bne.n	8003080 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003046:	4b5f      	ldr	r3, [pc, #380]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d116      	bne.n	8003080 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003052:	4b5c      	ldr	r3, [pc, #368]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d005      	beq.n	800306a <HAL_RCC_OscConfig+0x152>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d001      	beq.n	800306a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e1bb      	b.n	80033e2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800306a:	4b56      	ldr	r3, [pc, #344]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4952      	ldr	r1, [pc, #328]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 800307a:	4313      	orrs	r3, r2
 800307c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800307e:	e03a      	b.n	80030f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d020      	beq.n	80030ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003088:	4b4f      	ldr	r3, [pc, #316]	; (80031c8 <HAL_RCC_OscConfig+0x2b0>)
 800308a:	2201      	movs	r2, #1
 800308c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308e:	f7fe fc39 	bl	8001904 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003096:	f7fe fc35 	bl	8001904 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e19c      	b.n	80033e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a8:	4b46      	ldr	r3, [pc, #280]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0f0      	beq.n	8003096 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b4:	4b43      	ldr	r3, [pc, #268]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	4940      	ldr	r1, [pc, #256]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	600b      	str	r3, [r1, #0]
 80030c8:	e015      	b.n	80030f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ca:	4b3f      	ldr	r3, [pc, #252]	; (80031c8 <HAL_RCC_OscConfig+0x2b0>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d0:	f7fe fc18 	bl	8001904 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030d8:	f7fe fc14 	bl	8001904 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e17b      	b.n	80033e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ea:	4b36      	ldr	r3, [pc, #216]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f0      	bne.n	80030d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d030      	beq.n	8003164 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d016      	beq.n	8003138 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800310a:	4b30      	ldr	r3, [pc, #192]	; (80031cc <HAL_RCC_OscConfig+0x2b4>)
 800310c:	2201      	movs	r2, #1
 800310e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003110:	f7fe fbf8 	bl	8001904 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003118:	f7fe fbf4 	bl	8001904 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e15b      	b.n	80033e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800312a:	4b26      	ldr	r3, [pc, #152]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 800312c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0f0      	beq.n	8003118 <HAL_RCC_OscConfig+0x200>
 8003136:	e015      	b.n	8003164 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003138:	4b24      	ldr	r3, [pc, #144]	; (80031cc <HAL_RCC_OscConfig+0x2b4>)
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800313e:	f7fe fbe1 	bl	8001904 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003146:	f7fe fbdd 	bl	8001904 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e144      	b.n	80033e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003158:	4b1a      	ldr	r3, [pc, #104]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 800315a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1f0      	bne.n	8003146 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 80a0 	beq.w	80032b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003172:	2300      	movs	r3, #0
 8003174:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003176:	4b13      	ldr	r3, [pc, #76]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10f      	bne.n	80031a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003182:	2300      	movs	r3, #0
 8003184:	60bb      	str	r3, [r7, #8]
 8003186:	4b0f      	ldr	r3, [pc, #60]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	4a0e      	ldr	r2, [pc, #56]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 800318c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003190:	6413      	str	r3, [r2, #64]	; 0x40
 8003192:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319a:	60bb      	str	r3, [r7, #8]
 800319c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800319e:	2301      	movs	r3, #1
 80031a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a2:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <HAL_RCC_OscConfig+0x2b8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d121      	bne.n	80031f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ae:	4b08      	ldr	r3, [pc, #32]	; (80031d0 <HAL_RCC_OscConfig+0x2b8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a07      	ldr	r2, [pc, #28]	; (80031d0 <HAL_RCC_OscConfig+0x2b8>)
 80031b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ba:	f7fe fba3 	bl	8001904 <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c0:	e011      	b.n	80031e6 <HAL_RCC_OscConfig+0x2ce>
 80031c2:	bf00      	nop
 80031c4:	40023800 	.word	0x40023800
 80031c8:	42470000 	.word	0x42470000
 80031cc:	42470e80 	.word	0x42470e80
 80031d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d4:	f7fe fb96 	bl	8001904 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e0fd      	b.n	80033e2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e6:	4b81      	ldr	r3, [pc, #516]	; (80033ec <HAL_RCC_OscConfig+0x4d4>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0f0      	beq.n	80031d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d106      	bne.n	8003208 <HAL_RCC_OscConfig+0x2f0>
 80031fa:	4b7d      	ldr	r3, [pc, #500]	; (80033f0 <HAL_RCC_OscConfig+0x4d8>)
 80031fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fe:	4a7c      	ldr	r2, [pc, #496]	; (80033f0 <HAL_RCC_OscConfig+0x4d8>)
 8003200:	f043 0301 	orr.w	r3, r3, #1
 8003204:	6713      	str	r3, [r2, #112]	; 0x70
 8003206:	e01c      	b.n	8003242 <HAL_RCC_OscConfig+0x32a>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	2b05      	cmp	r3, #5
 800320e:	d10c      	bne.n	800322a <HAL_RCC_OscConfig+0x312>
 8003210:	4b77      	ldr	r3, [pc, #476]	; (80033f0 <HAL_RCC_OscConfig+0x4d8>)
 8003212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003214:	4a76      	ldr	r2, [pc, #472]	; (80033f0 <HAL_RCC_OscConfig+0x4d8>)
 8003216:	f043 0304 	orr.w	r3, r3, #4
 800321a:	6713      	str	r3, [r2, #112]	; 0x70
 800321c:	4b74      	ldr	r3, [pc, #464]	; (80033f0 <HAL_RCC_OscConfig+0x4d8>)
 800321e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003220:	4a73      	ldr	r2, [pc, #460]	; (80033f0 <HAL_RCC_OscConfig+0x4d8>)
 8003222:	f043 0301 	orr.w	r3, r3, #1
 8003226:	6713      	str	r3, [r2, #112]	; 0x70
 8003228:	e00b      	b.n	8003242 <HAL_RCC_OscConfig+0x32a>
 800322a:	4b71      	ldr	r3, [pc, #452]	; (80033f0 <HAL_RCC_OscConfig+0x4d8>)
 800322c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322e:	4a70      	ldr	r2, [pc, #448]	; (80033f0 <HAL_RCC_OscConfig+0x4d8>)
 8003230:	f023 0301 	bic.w	r3, r3, #1
 8003234:	6713      	str	r3, [r2, #112]	; 0x70
 8003236:	4b6e      	ldr	r3, [pc, #440]	; (80033f0 <HAL_RCC_OscConfig+0x4d8>)
 8003238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323a:	4a6d      	ldr	r2, [pc, #436]	; (80033f0 <HAL_RCC_OscConfig+0x4d8>)
 800323c:	f023 0304 	bic.w	r3, r3, #4
 8003240:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d015      	beq.n	8003276 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800324a:	f7fe fb5b 	bl	8001904 <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003250:	e00a      	b.n	8003268 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003252:	f7fe fb57 	bl	8001904 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003260:	4293      	cmp	r3, r2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e0bc      	b.n	80033e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003268:	4b61      	ldr	r3, [pc, #388]	; (80033f0 <HAL_RCC_OscConfig+0x4d8>)
 800326a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0ee      	beq.n	8003252 <HAL_RCC_OscConfig+0x33a>
 8003274:	e014      	b.n	80032a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003276:	f7fe fb45 	bl	8001904 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800327c:	e00a      	b.n	8003294 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800327e:	f7fe fb41 	bl	8001904 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	f241 3288 	movw	r2, #5000	; 0x1388
 800328c:	4293      	cmp	r3, r2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e0a6      	b.n	80033e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003294:	4b56      	ldr	r3, [pc, #344]	; (80033f0 <HAL_RCC_OscConfig+0x4d8>)
 8003296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1ee      	bne.n	800327e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032a0:	7dfb      	ldrb	r3, [r7, #23]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d105      	bne.n	80032b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032a6:	4b52      	ldr	r3, [pc, #328]	; (80033f0 <HAL_RCC_OscConfig+0x4d8>)
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	4a51      	ldr	r2, [pc, #324]	; (80033f0 <HAL_RCC_OscConfig+0x4d8>)
 80032ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 8092 	beq.w	80033e0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032bc:	4b4c      	ldr	r3, [pc, #304]	; (80033f0 <HAL_RCC_OscConfig+0x4d8>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 030c 	and.w	r3, r3, #12
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d05c      	beq.n	8003382 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d141      	bne.n	8003354 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032d0:	4b48      	ldr	r3, [pc, #288]	; (80033f4 <HAL_RCC_OscConfig+0x4dc>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d6:	f7fe fb15 	bl	8001904 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032de:	f7fe fb11 	bl	8001904 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e078      	b.n	80033e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f0:	4b3f      	ldr	r3, [pc, #252]	; (80033f0 <HAL_RCC_OscConfig+0x4d8>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1f0      	bne.n	80032de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	69da      	ldr	r2, [r3, #28]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	431a      	orrs	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	019b      	lsls	r3, r3, #6
 800330c:	431a      	orrs	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003312:	085b      	lsrs	r3, r3, #1
 8003314:	3b01      	subs	r3, #1
 8003316:	041b      	lsls	r3, r3, #16
 8003318:	431a      	orrs	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331e:	061b      	lsls	r3, r3, #24
 8003320:	4933      	ldr	r1, [pc, #204]	; (80033f0 <HAL_RCC_OscConfig+0x4d8>)
 8003322:	4313      	orrs	r3, r2
 8003324:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003326:	4b33      	ldr	r3, [pc, #204]	; (80033f4 <HAL_RCC_OscConfig+0x4dc>)
 8003328:	2201      	movs	r2, #1
 800332a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332c:	f7fe faea 	bl	8001904 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003334:	f7fe fae6 	bl	8001904 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e04d      	b.n	80033e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003346:	4b2a      	ldr	r3, [pc, #168]	; (80033f0 <HAL_RCC_OscConfig+0x4d8>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0f0      	beq.n	8003334 <HAL_RCC_OscConfig+0x41c>
 8003352:	e045      	b.n	80033e0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003354:	4b27      	ldr	r3, [pc, #156]	; (80033f4 <HAL_RCC_OscConfig+0x4dc>)
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335a:	f7fe fad3 	bl	8001904 <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003360:	e008      	b.n	8003374 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003362:	f7fe facf 	bl	8001904 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e036      	b.n	80033e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003374:	4b1e      	ldr	r3, [pc, #120]	; (80033f0 <HAL_RCC_OscConfig+0x4d8>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1f0      	bne.n	8003362 <HAL_RCC_OscConfig+0x44a>
 8003380:	e02e      	b.n	80033e0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d101      	bne.n	800338e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e029      	b.n	80033e2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800338e:	4b18      	ldr	r3, [pc, #96]	; (80033f0 <HAL_RCC_OscConfig+0x4d8>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d11c      	bne.n	80033dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d115      	bne.n	80033dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033b6:	4013      	ands	r3, r2
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033bc:	4293      	cmp	r3, r2
 80033be:	d10d      	bne.n	80033dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d106      	bne.n	80033dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80033d8:	429a      	cmp	r2, r3
 80033da:	d001      	beq.n	80033e0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e000      	b.n	80033e2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3718      	adds	r7, #24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40007000 	.word	0x40007000
 80033f0:	40023800 	.word	0x40023800
 80033f4:	42470060 	.word	0x42470060

080033f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e0cc      	b.n	80035a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800340c:	4b68      	ldr	r3, [pc, #416]	; (80035b0 <HAL_RCC_ClockConfig+0x1b8>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 030f 	and.w	r3, r3, #15
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	429a      	cmp	r2, r3
 8003418:	d90c      	bls.n	8003434 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341a:	4b65      	ldr	r3, [pc, #404]	; (80035b0 <HAL_RCC_ClockConfig+0x1b8>)
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	b2d2      	uxtb	r2, r2
 8003420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003422:	4b63      	ldr	r3, [pc, #396]	; (80035b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 030f 	and.w	r3, r3, #15
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	429a      	cmp	r2, r3
 800342e:	d001      	beq.n	8003434 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e0b8      	b.n	80035a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d020      	beq.n	8003482 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b00      	cmp	r3, #0
 800344a:	d005      	beq.n	8003458 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800344c:	4b59      	ldr	r3, [pc, #356]	; (80035b4 <HAL_RCC_ClockConfig+0x1bc>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	4a58      	ldr	r2, [pc, #352]	; (80035b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003452:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003456:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0308 	and.w	r3, r3, #8
 8003460:	2b00      	cmp	r3, #0
 8003462:	d005      	beq.n	8003470 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003464:	4b53      	ldr	r3, [pc, #332]	; (80035b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	4a52      	ldr	r2, [pc, #328]	; (80035b4 <HAL_RCC_ClockConfig+0x1bc>)
 800346a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800346e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003470:	4b50      	ldr	r3, [pc, #320]	; (80035b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	494d      	ldr	r1, [pc, #308]	; (80035b4 <HAL_RCC_ClockConfig+0x1bc>)
 800347e:	4313      	orrs	r3, r2
 8003480:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d044      	beq.n	8003518 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d107      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003496:	4b47      	ldr	r3, [pc, #284]	; (80035b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d119      	bne.n	80034d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e07f      	b.n	80035a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d003      	beq.n	80034b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034b2:	2b03      	cmp	r3, #3
 80034b4:	d107      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b6:	4b3f      	ldr	r3, [pc, #252]	; (80035b4 <HAL_RCC_ClockConfig+0x1bc>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d109      	bne.n	80034d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e06f      	b.n	80035a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c6:	4b3b      	ldr	r3, [pc, #236]	; (80035b4 <HAL_RCC_ClockConfig+0x1bc>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e067      	b.n	80035a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034d6:	4b37      	ldr	r3, [pc, #220]	; (80035b4 <HAL_RCC_ClockConfig+0x1bc>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f023 0203 	bic.w	r2, r3, #3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	4934      	ldr	r1, [pc, #208]	; (80035b4 <HAL_RCC_ClockConfig+0x1bc>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034e8:	f7fe fa0c 	bl	8001904 <HAL_GetTick>
 80034ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ee:	e00a      	b.n	8003506 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034f0:	f7fe fa08 	bl	8001904 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fe:	4293      	cmp	r3, r2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e04f      	b.n	80035a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003506:	4b2b      	ldr	r3, [pc, #172]	; (80035b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 020c 	and.w	r2, r3, #12
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	429a      	cmp	r2, r3
 8003516:	d1eb      	bne.n	80034f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003518:	4b25      	ldr	r3, [pc, #148]	; (80035b0 <HAL_RCC_ClockConfig+0x1b8>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 030f 	and.w	r3, r3, #15
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	429a      	cmp	r2, r3
 8003524:	d20c      	bcs.n	8003540 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003526:	4b22      	ldr	r3, [pc, #136]	; (80035b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800352e:	4b20      	ldr	r3, [pc, #128]	; (80035b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	429a      	cmp	r2, r3
 800353a:	d001      	beq.n	8003540 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e032      	b.n	80035a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	2b00      	cmp	r3, #0
 800354a:	d008      	beq.n	800355e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800354c:	4b19      	ldr	r3, [pc, #100]	; (80035b4 <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	4916      	ldr	r1, [pc, #88]	; (80035b4 <HAL_RCC_ClockConfig+0x1bc>)
 800355a:	4313      	orrs	r3, r2
 800355c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	2b00      	cmp	r3, #0
 8003568:	d009      	beq.n	800357e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800356a:	4b12      	ldr	r3, [pc, #72]	; (80035b4 <HAL_RCC_ClockConfig+0x1bc>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	490e      	ldr	r1, [pc, #56]	; (80035b4 <HAL_RCC_ClockConfig+0x1bc>)
 800357a:	4313      	orrs	r3, r2
 800357c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800357e:	f000 f821 	bl	80035c4 <HAL_RCC_GetSysClockFreq>
 8003582:	4601      	mov	r1, r0
 8003584:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	091b      	lsrs	r3, r3, #4
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	4a0a      	ldr	r2, [pc, #40]	; (80035b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003590:	5cd3      	ldrb	r3, [r2, r3]
 8003592:	fa21 f303 	lsr.w	r3, r1, r3
 8003596:	4a09      	ldr	r2, [pc, #36]	; (80035bc <HAL_RCC_ClockConfig+0x1c4>)
 8003598:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800359a:	4b09      	ldr	r3, [pc, #36]	; (80035c0 <HAL_RCC_ClockConfig+0x1c8>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fe f96c 	bl	800187c <HAL_InitTick>

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40023c00 	.word	0x40023c00
 80035b4:	40023800 	.word	0x40023800
 80035b8:	08005d74 	.word	0x08005d74
 80035bc:	20000004 	.word	0x20000004
 80035c0:	20000008 	.word	0x20000008

080035c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035ca:	2300      	movs	r3, #0
 80035cc:	607b      	str	r3, [r7, #4]
 80035ce:	2300      	movs	r3, #0
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	2300      	movs	r3, #0
 80035d4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80035d6:	2300      	movs	r3, #0
 80035d8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035da:	4b63      	ldr	r3, [pc, #396]	; (8003768 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 030c 	and.w	r3, r3, #12
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	d007      	beq.n	80035f6 <HAL_RCC_GetSysClockFreq+0x32>
 80035e6:	2b08      	cmp	r3, #8
 80035e8:	d008      	beq.n	80035fc <HAL_RCC_GetSysClockFreq+0x38>
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f040 80b4 	bne.w	8003758 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035f0:	4b5e      	ldr	r3, [pc, #376]	; (800376c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80035f2:	60bb      	str	r3, [r7, #8]
       break;
 80035f4:	e0b3      	b.n	800375e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035f6:	4b5e      	ldr	r3, [pc, #376]	; (8003770 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80035f8:	60bb      	str	r3, [r7, #8]
      break;
 80035fa:	e0b0      	b.n	800375e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035fc:	4b5a      	ldr	r3, [pc, #360]	; (8003768 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003604:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003606:	4b58      	ldr	r3, [pc, #352]	; (8003768 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d04a      	beq.n	80036a8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003612:	4b55      	ldr	r3, [pc, #340]	; (8003768 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	099b      	lsrs	r3, r3, #6
 8003618:	f04f 0400 	mov.w	r4, #0
 800361c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003620:	f04f 0200 	mov.w	r2, #0
 8003624:	ea03 0501 	and.w	r5, r3, r1
 8003628:	ea04 0602 	and.w	r6, r4, r2
 800362c:	4629      	mov	r1, r5
 800362e:	4632      	mov	r2, r6
 8003630:	f04f 0300 	mov.w	r3, #0
 8003634:	f04f 0400 	mov.w	r4, #0
 8003638:	0154      	lsls	r4, r2, #5
 800363a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800363e:	014b      	lsls	r3, r1, #5
 8003640:	4619      	mov	r1, r3
 8003642:	4622      	mov	r2, r4
 8003644:	1b49      	subs	r1, r1, r5
 8003646:	eb62 0206 	sbc.w	r2, r2, r6
 800364a:	f04f 0300 	mov.w	r3, #0
 800364e:	f04f 0400 	mov.w	r4, #0
 8003652:	0194      	lsls	r4, r2, #6
 8003654:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003658:	018b      	lsls	r3, r1, #6
 800365a:	1a5b      	subs	r3, r3, r1
 800365c:	eb64 0402 	sbc.w	r4, r4, r2
 8003660:	f04f 0100 	mov.w	r1, #0
 8003664:	f04f 0200 	mov.w	r2, #0
 8003668:	00e2      	lsls	r2, r4, #3
 800366a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800366e:	00d9      	lsls	r1, r3, #3
 8003670:	460b      	mov	r3, r1
 8003672:	4614      	mov	r4, r2
 8003674:	195b      	adds	r3, r3, r5
 8003676:	eb44 0406 	adc.w	r4, r4, r6
 800367a:	f04f 0100 	mov.w	r1, #0
 800367e:	f04f 0200 	mov.w	r2, #0
 8003682:	0262      	lsls	r2, r4, #9
 8003684:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003688:	0259      	lsls	r1, r3, #9
 800368a:	460b      	mov	r3, r1
 800368c:	4614      	mov	r4, r2
 800368e:	4618      	mov	r0, r3
 8003690:	4621      	mov	r1, r4
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f04f 0400 	mov.w	r4, #0
 8003698:	461a      	mov	r2, r3
 800369a:	4623      	mov	r3, r4
 800369c:	f7fc fdf0 	bl	8000280 <__aeabi_uldivmod>
 80036a0:	4603      	mov	r3, r0
 80036a2:	460c      	mov	r4, r1
 80036a4:	60fb      	str	r3, [r7, #12]
 80036a6:	e049      	b.n	800373c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036a8:	4b2f      	ldr	r3, [pc, #188]	; (8003768 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	099b      	lsrs	r3, r3, #6
 80036ae:	f04f 0400 	mov.w	r4, #0
 80036b2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	ea03 0501 	and.w	r5, r3, r1
 80036be:	ea04 0602 	and.w	r6, r4, r2
 80036c2:	4629      	mov	r1, r5
 80036c4:	4632      	mov	r2, r6
 80036c6:	f04f 0300 	mov.w	r3, #0
 80036ca:	f04f 0400 	mov.w	r4, #0
 80036ce:	0154      	lsls	r4, r2, #5
 80036d0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80036d4:	014b      	lsls	r3, r1, #5
 80036d6:	4619      	mov	r1, r3
 80036d8:	4622      	mov	r2, r4
 80036da:	1b49      	subs	r1, r1, r5
 80036dc:	eb62 0206 	sbc.w	r2, r2, r6
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	f04f 0400 	mov.w	r4, #0
 80036e8:	0194      	lsls	r4, r2, #6
 80036ea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80036ee:	018b      	lsls	r3, r1, #6
 80036f0:	1a5b      	subs	r3, r3, r1
 80036f2:	eb64 0402 	sbc.w	r4, r4, r2
 80036f6:	f04f 0100 	mov.w	r1, #0
 80036fa:	f04f 0200 	mov.w	r2, #0
 80036fe:	00e2      	lsls	r2, r4, #3
 8003700:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003704:	00d9      	lsls	r1, r3, #3
 8003706:	460b      	mov	r3, r1
 8003708:	4614      	mov	r4, r2
 800370a:	195b      	adds	r3, r3, r5
 800370c:	eb44 0406 	adc.w	r4, r4, r6
 8003710:	f04f 0100 	mov.w	r1, #0
 8003714:	f04f 0200 	mov.w	r2, #0
 8003718:	02a2      	lsls	r2, r4, #10
 800371a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800371e:	0299      	lsls	r1, r3, #10
 8003720:	460b      	mov	r3, r1
 8003722:	4614      	mov	r4, r2
 8003724:	4618      	mov	r0, r3
 8003726:	4621      	mov	r1, r4
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f04f 0400 	mov.w	r4, #0
 800372e:	461a      	mov	r2, r3
 8003730:	4623      	mov	r3, r4
 8003732:	f7fc fda5 	bl	8000280 <__aeabi_uldivmod>
 8003736:	4603      	mov	r3, r0
 8003738:	460c      	mov	r4, r1
 800373a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800373c:	4b0a      	ldr	r3, [pc, #40]	; (8003768 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	0c1b      	lsrs	r3, r3, #16
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	3301      	adds	r3, #1
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	fbb2 f3f3 	udiv	r3, r2, r3
 8003754:	60bb      	str	r3, [r7, #8]
      break;
 8003756:	e002      	b.n	800375e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003758:	4b04      	ldr	r3, [pc, #16]	; (800376c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800375a:	60bb      	str	r3, [r7, #8]
      break;
 800375c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800375e:	68bb      	ldr	r3, [r7, #8]
}
 8003760:	4618      	mov	r0, r3
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003768:	40023800 	.word	0x40023800
 800376c:	00f42400 	.word	0x00f42400
 8003770:	007a1200 	.word	0x007a1200

08003774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003778:	4b03      	ldr	r3, [pc, #12]	; (8003788 <HAL_RCC_GetHCLKFreq+0x14>)
 800377a:	681b      	ldr	r3, [r3, #0]
}
 800377c:	4618      	mov	r0, r3
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	20000004 	.word	0x20000004

0800378c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003790:	f7ff fff0 	bl	8003774 <HAL_RCC_GetHCLKFreq>
 8003794:	4601      	mov	r1, r0
 8003796:	4b05      	ldr	r3, [pc, #20]	; (80037ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	0a9b      	lsrs	r3, r3, #10
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	4a03      	ldr	r2, [pc, #12]	; (80037b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037a2:	5cd3      	ldrb	r3, [r2, r3]
 80037a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40023800 	.word	0x40023800
 80037b0:	08005d84 	.word	0x08005d84

080037b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037b8:	f7ff ffdc 	bl	8003774 <HAL_RCC_GetHCLKFreq>
 80037bc:	4601      	mov	r1, r0
 80037be:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	0b5b      	lsrs	r3, r3, #13
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	4a03      	ldr	r2, [pc, #12]	; (80037d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037ca:	5cd3      	ldrb	r3, [r2, r3]
 80037cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40023800 	.word	0x40023800
 80037d8:	08005d84 	.word	0x08005d84

080037dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e01d      	b.n	800382a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d106      	bne.n	8003808 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7fd fe0e 	bl	8001424 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3304      	adds	r3, #4
 8003818:	4619      	mov	r1, r3
 800381a:	4610      	mov	r0, r2
 800381c:	f000 fb38 	bl	8003e90 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003832:	b480      	push	{r7}
 8003834:	b085      	sub	sp, #20
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f042 0201 	orr.w	r2, r2, #1
 8003848:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2b06      	cmp	r3, #6
 800385a:	d007      	beq.n	800386c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0201 	orr.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b082      	sub	sp, #8
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d101      	bne.n	800388c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e01d      	b.n	80038c8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d106      	bne.n	80038a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f7fd fd9d 	bl	80013e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2202      	movs	r2, #2
 80038aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	3304      	adds	r3, #4
 80038b6:	4619      	mov	r1, r3
 80038b8:	4610      	mov	r0, r2
 80038ba:	f000 fae9 	bl	8003e90 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2201      	movs	r2, #1
 80038e0:	6839      	ldr	r1, [r7, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 fd7a 	bl	80043dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a10      	ldr	r2, [pc, #64]	; (8003930 <HAL_TIM_PWM_Start+0x60>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d107      	bne.n	8003902 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003900:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2b06      	cmp	r3, #6
 8003912:	d007      	beq.n	8003924 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f042 0201 	orr.w	r2, r2, #1
 8003922:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	40010000 	.word	0x40010000

08003934 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b02      	cmp	r3, #2
 8003948:	d122      	bne.n	8003990 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b02      	cmp	r3, #2
 8003956:	d11b      	bne.n	8003990 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f06f 0202 	mvn.w	r2, #2
 8003960:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	f003 0303 	and.w	r3, r3, #3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 fa6b 	bl	8003e52 <HAL_TIM_IC_CaptureCallback>
 800397c:	e005      	b.n	800398a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 fa5d 	bl	8003e3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 fa6e 	bl	8003e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	f003 0304 	and.w	r3, r3, #4
 800399a:	2b04      	cmp	r3, #4
 800399c:	d122      	bne.n	80039e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b04      	cmp	r3, #4
 80039aa:	d11b      	bne.n	80039e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f06f 0204 	mvn.w	r2, #4
 80039b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2202      	movs	r2, #2
 80039ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 fa41 	bl	8003e52 <HAL_TIM_IC_CaptureCallback>
 80039d0:	e005      	b.n	80039de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 fa33 	bl	8003e3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 fa44 	bl	8003e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f003 0308 	and.w	r3, r3, #8
 80039ee:	2b08      	cmp	r3, #8
 80039f0:	d122      	bne.n	8003a38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f003 0308 	and.w	r3, r3, #8
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d11b      	bne.n	8003a38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f06f 0208 	mvn.w	r2, #8
 8003a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2204      	movs	r2, #4
 8003a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	f003 0303 	and.w	r3, r3, #3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 fa17 	bl	8003e52 <HAL_TIM_IC_CaptureCallback>
 8003a24:	e005      	b.n	8003a32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 fa09 	bl	8003e3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 fa1a 	bl	8003e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	f003 0310 	and.w	r3, r3, #16
 8003a42:	2b10      	cmp	r3, #16
 8003a44:	d122      	bne.n	8003a8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f003 0310 	and.w	r3, r3, #16
 8003a50:	2b10      	cmp	r3, #16
 8003a52:	d11b      	bne.n	8003a8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f06f 0210 	mvn.w	r2, #16
 8003a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2208      	movs	r2, #8
 8003a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f9ed 	bl	8003e52 <HAL_TIM_IC_CaptureCallback>
 8003a78:	e005      	b.n	8003a86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f9df 	bl	8003e3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 f9f0 	bl	8003e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d10e      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d107      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f06f 0201 	mvn.w	r2, #1
 8003ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7fd f842 	bl	8000b3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac2:	2b80      	cmp	r3, #128	; 0x80
 8003ac4:	d10e      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad0:	2b80      	cmp	r3, #128	; 0x80
 8003ad2:	d107      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 fd1a 	bl	8004518 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aee:	2b40      	cmp	r3, #64	; 0x40
 8003af0:	d10e      	bne.n	8003b10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afc:	2b40      	cmp	r3, #64	; 0x40
 8003afe:	d107      	bne.n	8003b10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f9b5 	bl	8003e7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	2b20      	cmp	r3, #32
 8003b1c:	d10e      	bne.n	8003b3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f003 0320 	and.w	r3, r3, #32
 8003b28:	2b20      	cmp	r3, #32
 8003b2a:	d107      	bne.n	8003b3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f06f 0220 	mvn.w	r2, #32
 8003b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 fce4 	bl	8004504 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b3c:	bf00      	nop
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d101      	bne.n	8003b5e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	e0b4      	b.n	8003cc8 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2202      	movs	r2, #2
 8003b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b0c      	cmp	r3, #12
 8003b72:	f200 809f 	bhi.w	8003cb4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003b76:	a201      	add	r2, pc, #4	; (adr r2, 8003b7c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7c:	08003bb1 	.word	0x08003bb1
 8003b80:	08003cb5 	.word	0x08003cb5
 8003b84:	08003cb5 	.word	0x08003cb5
 8003b88:	08003cb5 	.word	0x08003cb5
 8003b8c:	08003bf1 	.word	0x08003bf1
 8003b90:	08003cb5 	.word	0x08003cb5
 8003b94:	08003cb5 	.word	0x08003cb5
 8003b98:	08003cb5 	.word	0x08003cb5
 8003b9c:	08003c33 	.word	0x08003c33
 8003ba0:	08003cb5 	.word	0x08003cb5
 8003ba4:	08003cb5 	.word	0x08003cb5
 8003ba8:	08003cb5 	.word	0x08003cb5
 8003bac:	08003c73 	.word	0x08003c73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68b9      	ldr	r1, [r7, #8]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 f9ea 	bl	8003f90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	699a      	ldr	r2, [r3, #24]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f042 0208 	orr.w	r2, r2, #8
 8003bca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	699a      	ldr	r2, [r3, #24]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0204 	bic.w	r2, r2, #4
 8003bda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6999      	ldr	r1, [r3, #24]
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	691a      	ldr	r2, [r3, #16]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	619a      	str	r2, [r3, #24]
      break;
 8003bee:	e062      	b.n	8003cb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68b9      	ldr	r1, [r7, #8]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 fa30 	bl	800405c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	699a      	ldr	r2, [r3, #24]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699a      	ldr	r2, [r3, #24]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6999      	ldr	r1, [r3, #24]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	021a      	lsls	r2, r3, #8
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	619a      	str	r2, [r3, #24]
      break;
 8003c30:	e041      	b.n	8003cb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68b9      	ldr	r1, [r7, #8]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 fa7b 	bl	8004134 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	69da      	ldr	r2, [r3, #28]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f042 0208 	orr.w	r2, r2, #8
 8003c4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	69da      	ldr	r2, [r3, #28]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0204 	bic.w	r2, r2, #4
 8003c5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	69d9      	ldr	r1, [r3, #28]
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	691a      	ldr	r2, [r3, #16]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	61da      	str	r2, [r3, #28]
      break;
 8003c70:	e021      	b.n	8003cb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68b9      	ldr	r1, [r7, #8]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f000 fac5 	bl	8004208 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	69da      	ldr	r2, [r3, #28]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	69da      	ldr	r2, [r3, #28]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	69d9      	ldr	r1, [r3, #28]
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	021a      	lsls	r2, r3, #8
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	61da      	str	r2, [r3, #28]
      break;
 8003cb2:	e000      	b.n	8003cb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003cb4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <HAL_TIM_ConfigClockSource+0x18>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e0a6      	b.n	8003e36 <HAL_TIM_ConfigClockSource+0x166>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d0e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2b40      	cmp	r3, #64	; 0x40
 8003d1e:	d067      	beq.n	8003df0 <HAL_TIM_ConfigClockSource+0x120>
 8003d20:	2b40      	cmp	r3, #64	; 0x40
 8003d22:	d80b      	bhi.n	8003d3c <HAL_TIM_ConfigClockSource+0x6c>
 8003d24:	2b10      	cmp	r3, #16
 8003d26:	d073      	beq.n	8003e10 <HAL_TIM_ConfigClockSource+0x140>
 8003d28:	2b10      	cmp	r3, #16
 8003d2a:	d802      	bhi.n	8003d32 <HAL_TIM_ConfigClockSource+0x62>
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d06f      	beq.n	8003e10 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003d30:	e078      	b.n	8003e24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d32:	2b20      	cmp	r3, #32
 8003d34:	d06c      	beq.n	8003e10 <HAL_TIM_ConfigClockSource+0x140>
 8003d36:	2b30      	cmp	r3, #48	; 0x30
 8003d38:	d06a      	beq.n	8003e10 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003d3a:	e073      	b.n	8003e24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d3c:	2b70      	cmp	r3, #112	; 0x70
 8003d3e:	d00d      	beq.n	8003d5c <HAL_TIM_ConfigClockSource+0x8c>
 8003d40:	2b70      	cmp	r3, #112	; 0x70
 8003d42:	d804      	bhi.n	8003d4e <HAL_TIM_ConfigClockSource+0x7e>
 8003d44:	2b50      	cmp	r3, #80	; 0x50
 8003d46:	d033      	beq.n	8003db0 <HAL_TIM_ConfigClockSource+0xe0>
 8003d48:	2b60      	cmp	r3, #96	; 0x60
 8003d4a:	d041      	beq.n	8003dd0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003d4c:	e06a      	b.n	8003e24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d52:	d066      	beq.n	8003e22 <HAL_TIM_ConfigClockSource+0x152>
 8003d54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d58:	d017      	beq.n	8003d8a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003d5a:	e063      	b.n	8003e24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6818      	ldr	r0, [r3, #0]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	6899      	ldr	r1, [r3, #8]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f000 fb16 	bl	800439c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d7e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	609a      	str	r2, [r3, #8]
      break;
 8003d88:	e04c      	b.n	8003e24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6818      	ldr	r0, [r3, #0]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	6899      	ldr	r1, [r3, #8]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f000 faff 	bl	800439c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dac:	609a      	str	r2, [r3, #8]
      break;
 8003dae:	e039      	b.n	8003e24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6818      	ldr	r0, [r3, #0]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	6859      	ldr	r1, [r3, #4]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	f000 fa73 	bl	80042a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2150      	movs	r1, #80	; 0x50
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 facc 	bl	8004366 <TIM_ITRx_SetConfig>
      break;
 8003dce:	e029      	b.n	8003e24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6818      	ldr	r0, [r3, #0]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	6859      	ldr	r1, [r3, #4]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	461a      	mov	r2, r3
 8003dde:	f000 fa92 	bl	8004306 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2160      	movs	r1, #96	; 0x60
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 fabc 	bl	8004366 <TIM_ITRx_SetConfig>
      break;
 8003dee:	e019      	b.n	8003e24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6818      	ldr	r0, [r3, #0]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	6859      	ldr	r1, [r3, #4]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	f000 fa53 	bl	80042a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2140      	movs	r1, #64	; 0x40
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f000 faac 	bl	8004366 <TIM_ITRx_SetConfig>
      break;
 8003e0e:	e009      	b.n	8003e24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4619      	mov	r1, r3
 8003e1a:	4610      	mov	r0, r2
 8003e1c:	f000 faa3 	bl	8004366 <TIM_ITRx_SetConfig>
      break;
 8003e20:	e000      	b.n	8003e24 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003e22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b083      	sub	sp, #12
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e46:	bf00      	nop
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b083      	sub	sp, #12
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e6e:	bf00      	nop
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b083      	sub	sp, #12
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e82:	bf00      	nop
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
	...

08003e90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a34      	ldr	r2, [pc, #208]	; (8003f74 <TIM_Base_SetConfig+0xe4>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d00f      	beq.n	8003ec8 <TIM_Base_SetConfig+0x38>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eae:	d00b      	beq.n	8003ec8 <TIM_Base_SetConfig+0x38>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a31      	ldr	r2, [pc, #196]	; (8003f78 <TIM_Base_SetConfig+0xe8>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d007      	beq.n	8003ec8 <TIM_Base_SetConfig+0x38>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a30      	ldr	r2, [pc, #192]	; (8003f7c <TIM_Base_SetConfig+0xec>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d003      	beq.n	8003ec8 <TIM_Base_SetConfig+0x38>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a2f      	ldr	r2, [pc, #188]	; (8003f80 <TIM_Base_SetConfig+0xf0>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d108      	bne.n	8003eda <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ece:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a25      	ldr	r2, [pc, #148]	; (8003f74 <TIM_Base_SetConfig+0xe4>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d01b      	beq.n	8003f1a <TIM_Base_SetConfig+0x8a>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee8:	d017      	beq.n	8003f1a <TIM_Base_SetConfig+0x8a>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a22      	ldr	r2, [pc, #136]	; (8003f78 <TIM_Base_SetConfig+0xe8>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d013      	beq.n	8003f1a <TIM_Base_SetConfig+0x8a>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a21      	ldr	r2, [pc, #132]	; (8003f7c <TIM_Base_SetConfig+0xec>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d00f      	beq.n	8003f1a <TIM_Base_SetConfig+0x8a>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a20      	ldr	r2, [pc, #128]	; (8003f80 <TIM_Base_SetConfig+0xf0>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d00b      	beq.n	8003f1a <TIM_Base_SetConfig+0x8a>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a1f      	ldr	r2, [pc, #124]	; (8003f84 <TIM_Base_SetConfig+0xf4>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d007      	beq.n	8003f1a <TIM_Base_SetConfig+0x8a>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a1e      	ldr	r2, [pc, #120]	; (8003f88 <TIM_Base_SetConfig+0xf8>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d003      	beq.n	8003f1a <TIM_Base_SetConfig+0x8a>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a1d      	ldr	r2, [pc, #116]	; (8003f8c <TIM_Base_SetConfig+0xfc>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d108      	bne.n	8003f2c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a08      	ldr	r2, [pc, #32]	; (8003f74 <TIM_Base_SetConfig+0xe4>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d103      	bne.n	8003f60 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	691a      	ldr	r2, [r3, #16]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	615a      	str	r2, [r3, #20]
}
 8003f66:	bf00      	nop
 8003f68:	3714      	adds	r7, #20
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	40010000 	.word	0x40010000
 8003f78:	40000400 	.word	0x40000400
 8003f7c:	40000800 	.word	0x40000800
 8003f80:	40000c00 	.word	0x40000c00
 8003f84:	40014000 	.word	0x40014000
 8003f88:	40014400 	.word	0x40014400
 8003f8c:	40014800 	.word	0x40014800

08003f90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	f023 0201 	bic.w	r2, r3, #1
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f023 0303 	bic.w	r3, r3, #3
 8003fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f023 0302 	bic.w	r3, r3, #2
 8003fd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a1c      	ldr	r2, [pc, #112]	; (8004058 <TIM_OC1_SetConfig+0xc8>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d10c      	bne.n	8004006 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	f023 0308 	bic.w	r3, r3, #8
 8003ff2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f023 0304 	bic.w	r3, r3, #4
 8004004:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a13      	ldr	r2, [pc, #76]	; (8004058 <TIM_OC1_SetConfig+0xc8>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d111      	bne.n	8004032 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004014:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800401c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4313      	orrs	r3, r2
 8004026:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	4313      	orrs	r3, r2
 8004030:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	621a      	str	r2, [r3, #32]
}
 800404c:	bf00      	nop
 800404e:	371c      	adds	r7, #28
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr
 8004058:	40010000 	.word	0x40010000

0800405c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800405c:	b480      	push	{r7}
 800405e:	b087      	sub	sp, #28
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	f023 0210 	bic.w	r2, r3, #16
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800408a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004092:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	021b      	lsls	r3, r3, #8
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	4313      	orrs	r3, r2
 800409e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f023 0320 	bic.w	r3, r3, #32
 80040a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a1e      	ldr	r2, [pc, #120]	; (8004130 <TIM_OC2_SetConfig+0xd4>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d10d      	bne.n	80040d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a15      	ldr	r2, [pc, #84]	; (8004130 <TIM_OC2_SetConfig+0xd4>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d113      	bne.n	8004108 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	4313      	orrs	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	621a      	str	r2, [r3, #32]
}
 8004122:	bf00      	nop
 8004124:	371c      	adds	r7, #28
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	40010000 	.word	0x40010000

08004134 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f023 0303 	bic.w	r3, r3, #3
 800416a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	4313      	orrs	r3, r2
 8004174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800417c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	021b      	lsls	r3, r3, #8
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	4313      	orrs	r3, r2
 8004188:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a1d      	ldr	r2, [pc, #116]	; (8004204 <TIM_OC3_SetConfig+0xd0>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d10d      	bne.n	80041ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004198:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a14      	ldr	r2, [pc, #80]	; (8004204 <TIM_OC3_SetConfig+0xd0>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d113      	bne.n	80041de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	011b      	lsls	r3, r3, #4
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	4313      	orrs	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	621a      	str	r2, [r3, #32]
}
 80041f8:	bf00      	nop
 80041fa:	371c      	adds	r7, #28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	40010000 	.word	0x40010000

08004208 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800423e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	021b      	lsls	r3, r3, #8
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	4313      	orrs	r3, r2
 800424a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004252:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	031b      	lsls	r3, r3, #12
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	4313      	orrs	r3, r2
 800425e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a10      	ldr	r2, [pc, #64]	; (80042a4 <TIM_OC4_SetConfig+0x9c>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d109      	bne.n	800427c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800426e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	019b      	lsls	r3, r3, #6
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	4313      	orrs	r3, r2
 800427a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	621a      	str	r2, [r3, #32]
}
 8004296:	bf00      	nop
 8004298:	371c      	adds	r7, #28
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	40010000 	.word	0x40010000

080042a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	f023 0201 	bic.w	r2, r3, #1
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f023 030a 	bic.w	r3, r3, #10
 80042e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	621a      	str	r2, [r3, #32]
}
 80042fa:	bf00      	nop
 80042fc:	371c      	adds	r7, #28
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004306:	b480      	push	{r7}
 8004308:	b087      	sub	sp, #28
 800430a:	af00      	add	r7, sp, #0
 800430c:	60f8      	str	r0, [r7, #12]
 800430e:	60b9      	str	r1, [r7, #8]
 8004310:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	f023 0210 	bic.w	r2, r3, #16
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004330:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	031b      	lsls	r3, r3, #12
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	4313      	orrs	r3, r2
 800433a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004342:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	4313      	orrs	r3, r2
 800434c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	621a      	str	r2, [r3, #32]
}
 800435a:	bf00      	nop
 800435c:	371c      	adds	r7, #28
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004366:	b480      	push	{r7}
 8004368:	b085      	sub	sp, #20
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
 800436e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4313      	orrs	r3, r2
 8004384:	f043 0307 	orr.w	r3, r3, #7
 8004388:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	609a      	str	r2, [r3, #8]
}
 8004390:	bf00      	nop
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
 80043a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	021a      	lsls	r2, r3, #8
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	431a      	orrs	r2, r3
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	609a      	str	r2, [r3, #8]
}
 80043d0:	bf00      	nop
 80043d2:	371c      	adds	r7, #28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043dc:	b480      	push	{r7}
 80043de:	b087      	sub	sp, #28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	f003 031f 	and.w	r3, r3, #31
 80043ee:	2201      	movs	r2, #1
 80043f0:	fa02 f303 	lsl.w	r3, r2, r3
 80043f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6a1a      	ldr	r2, [r3, #32]
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	43db      	mvns	r3, r3
 80043fe:	401a      	ands	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6a1a      	ldr	r2, [r3, #32]
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	f003 031f 	and.w	r3, r3, #31
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	fa01 f303 	lsl.w	r3, r1, r3
 8004414:	431a      	orrs	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	621a      	str	r2, [r3, #32]
}
 800441a:	bf00      	nop
 800441c:	371c      	adds	r7, #28
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
	...

08004428 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004438:	2b01      	cmp	r3, #1
 800443a:	d101      	bne.n	8004440 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800443c:	2302      	movs	r3, #2
 800443e:	e050      	b.n	80044e2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2202      	movs	r2, #2
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004466:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	4313      	orrs	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a1c      	ldr	r2, [pc, #112]	; (80044f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d018      	beq.n	80044b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800448c:	d013      	beq.n	80044b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a18      	ldr	r2, [pc, #96]	; (80044f4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d00e      	beq.n	80044b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a16      	ldr	r2, [pc, #88]	; (80044f8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d009      	beq.n	80044b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a15      	ldr	r2, [pc, #84]	; (80044fc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d004      	beq.n	80044b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a13      	ldr	r2, [pc, #76]	; (8004500 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d10c      	bne.n	80044d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	40010000 	.word	0x40010000
 80044f4:	40000400 	.word	0x40000400
 80044f8:	40000800 	.word	0x40000800
 80044fc:	40000c00 	.word	0x40000c00
 8004500:	40014000 	.word	0x40014000

08004504 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e03f      	b.n	80045be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d106      	bne.n	8004558 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7fc ffe8 	bl	8001528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2224      	movs	r2, #36	; 0x24
 800455c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68da      	ldr	r2, [r3, #12]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800456e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 fc37 	bl	8004de4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004584:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	695a      	ldr	r2, [r3, #20]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004594:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68da      	ldr	r2, [r3, #12]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2220      	movs	r2, #32
 80045b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2220      	movs	r2, #32
 80045b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
	...

080045c8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	4613      	mov	r3, r2
 80045d4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b20      	cmp	r3, #32
 80045e0:	d153      	bne.n	800468a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d002      	beq.n	80045ee <HAL_UART_Transmit_DMA+0x26>
 80045e8:	88fb      	ldrh	r3, [r7, #6]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e04c      	b.n	800468c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d101      	bne.n	8004600 <HAL_UART_Transmit_DMA+0x38>
 80045fc:	2302      	movs	r3, #2
 80045fe:	e045      	b.n	800468c <HAL_UART_Transmit_DMA+0xc4>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	88fa      	ldrh	r2, [r7, #6]
 8004612:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	88fa      	ldrh	r2, [r7, #6]
 8004618:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2221      	movs	r2, #33	; 0x21
 8004624:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462c:	4a19      	ldr	r2, [pc, #100]	; (8004694 <HAL_UART_Transmit_DMA+0xcc>)
 800462e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004634:	4a18      	ldr	r2, [pc, #96]	; (8004698 <HAL_UART_Transmit_DMA+0xd0>)
 8004636:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463c:	4a17      	ldr	r2, [pc, #92]	; (800469c <HAL_UART_Transmit_DMA+0xd4>)
 800463e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004644:	2200      	movs	r2, #0
 8004646:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8004648:	f107 0308 	add.w	r3, r7, #8
 800464c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	6819      	ldr	r1, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	3304      	adds	r3, #4
 800465c:	461a      	mov	r2, r3
 800465e:	88fb      	ldrh	r3, [r7, #6]
 8004660:	f7fd ffaa 	bl	80025b8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800466c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	695a      	ldr	r2, [r3, #20]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004684:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004686:	2300      	movs	r3, #0
 8004688:	e000      	b.n	800468c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800468a:	2302      	movs	r3, #2
  }
}
 800468c:	4618      	mov	r0, r3
 800468e:	3718      	adds	r7, #24
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}
 8004694:	080049f1 	.word	0x080049f1
 8004698:	08004a43 	.word	0x08004a43
 800469c:	08004ae3 	.word	0x08004ae3

080046a0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	4613      	mov	r3, r2
 80046ac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b20      	cmp	r3, #32
 80046b8:	d166      	bne.n	8004788 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d002      	beq.n	80046c6 <HAL_UART_Receive_DMA+0x26>
 80046c0:	88fb      	ldrh	r3, [r7, #6]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e05f      	b.n	800478a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d101      	bne.n	80046d8 <HAL_UART_Receive_DMA+0x38>
 80046d4:	2302      	movs	r3, #2
 80046d6:	e058      	b.n	800478a <HAL_UART_Receive_DMA+0xea>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	88fa      	ldrh	r2, [r7, #6]
 80046ea:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2222      	movs	r2, #34	; 0x22
 80046f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046fe:	4a25      	ldr	r2, [pc, #148]	; (8004794 <HAL_UART_Receive_DMA+0xf4>)
 8004700:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004706:	4a24      	ldr	r2, [pc, #144]	; (8004798 <HAL_UART_Receive_DMA+0xf8>)
 8004708:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800470e:	4a23      	ldr	r2, [pc, #140]	; (800479c <HAL_UART_Receive_DMA+0xfc>)
 8004710:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004716:	2200      	movs	r2, #0
 8004718:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800471a:	f107 0308 	add.w	r3, r7, #8
 800471e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	3304      	adds	r3, #4
 800472a:	4619      	mov	r1, r3
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	88fb      	ldrh	r3, [r7, #6]
 8004732:	f7fd ff41 	bl	80025b8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8004736:	2300      	movs	r3, #0
 8004738:	613b      	str	r3, [r7, #16]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	613b      	str	r3, [r7, #16]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	613b      	str	r3, [r7, #16]
 800474a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004762:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	695a      	ldr	r2, [r3, #20]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 0201 	orr.w	r2, r2, #1
 8004772:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	695a      	ldr	r2, [r3, #20]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004782:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004784:	2300      	movs	r3, #0
 8004786:	e000      	b.n	800478a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004788:	2302      	movs	r3, #2
  }
}
 800478a:	4618      	mov	r0, r3
 800478c:	3718      	adds	r7, #24
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	08004a5f 	.word	0x08004a5f
 8004798:	08004ac7 	.word	0x08004ac7
 800479c:	08004ae3 	.word	0x08004ae3

080047a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b088      	sub	sp, #32
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80047c0:	2300      	movs	r3, #0
 80047c2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	f003 030f 	and.w	r3, r3, #15
 80047ce:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10d      	bne.n	80047f2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	f003 0320 	and.w	r3, r3, #32
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d008      	beq.n	80047f2 <HAL_UART_IRQHandler+0x52>
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	f003 0320 	and.w	r3, r3, #32
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 fa79 	bl	8004ce2 <UART_Receive_IT>
      return;
 80047f0:	e0d1      	b.n	8004996 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 80b0 	beq.w	800495a <HAL_UART_IRQHandler+0x1ba>
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b00      	cmp	r3, #0
 8004802:	d105      	bne.n	8004810 <HAL_UART_IRQHandler+0x70>
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 80a5 	beq.w	800495a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <HAL_UART_IRQHandler+0x90>
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004820:	2b00      	cmp	r3, #0
 8004822:	d005      	beq.n	8004830 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004828:	f043 0201 	orr.w	r2, r3, #1
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	f003 0304 	and.w	r3, r3, #4
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00a      	beq.n	8004850 <HAL_UART_IRQHandler+0xb0>
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b00      	cmp	r3, #0
 8004842:	d005      	beq.n	8004850 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004848:	f043 0202 	orr.w	r2, r3, #2
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00a      	beq.n	8004870 <HAL_UART_IRQHandler+0xd0>
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b00      	cmp	r3, #0
 8004862:	d005      	beq.n	8004870 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004868:	f043 0204 	orr.w	r2, r3, #4
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	f003 0308 	and.w	r3, r3, #8
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00f      	beq.n	800489a <HAL_UART_IRQHandler+0xfa>
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	f003 0320 	and.w	r3, r3, #32
 8004880:	2b00      	cmp	r3, #0
 8004882:	d104      	bne.n	800488e <HAL_UART_IRQHandler+0xee>
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	d005      	beq.n	800489a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004892:	f043 0208 	orr.w	r2, r3, #8
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d078      	beq.n	8004994 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	f003 0320 	and.w	r3, r3, #32
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d007      	beq.n	80048bc <HAL_UART_IRQHandler+0x11c>
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	f003 0320 	and.w	r3, r3, #32
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d002      	beq.n	80048bc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 fa13 	bl	8004ce2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c6:	2b40      	cmp	r3, #64	; 0x40
 80048c8:	bf0c      	ite	eq
 80048ca:	2301      	moveq	r3, #1
 80048cc:	2300      	movne	r3, #0
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d6:	f003 0308 	and.w	r3, r3, #8
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d102      	bne.n	80048e4 <HAL_UART_IRQHandler+0x144>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d031      	beq.n	8004948 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f95c 	bl	8004ba2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f4:	2b40      	cmp	r3, #64	; 0x40
 80048f6:	d123      	bne.n	8004940 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	695a      	ldr	r2, [r3, #20]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004906:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800490c:	2b00      	cmp	r3, #0
 800490e:	d013      	beq.n	8004938 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004914:	4a21      	ldr	r2, [pc, #132]	; (800499c <HAL_UART_IRQHandler+0x1fc>)
 8004916:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800491c:	4618      	mov	r0, r3
 800491e:	f7fd fea3 	bl	8002668 <HAL_DMA_Abort_IT>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d016      	beq.n	8004956 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800492c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004932:	4610      	mov	r0, r2
 8004934:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004936:	e00e      	b.n	8004956 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f84f 	bl	80049dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800493e:	e00a      	b.n	8004956 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f84b 	bl	80049dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004946:	e006      	b.n	8004956 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f847 	bl	80049dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004954:	e01e      	b.n	8004994 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004956:	bf00      	nop
    return;
 8004958:	e01c      	b.n	8004994 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004960:	2b00      	cmp	r3, #0
 8004962:	d008      	beq.n	8004976 <HAL_UART_IRQHandler+0x1d6>
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f949 	bl	8004c06 <UART_Transmit_IT>
    return;
 8004974:	e00f      	b.n	8004996 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00a      	beq.n	8004996 <HAL_UART_IRQHandler+0x1f6>
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004986:	2b00      	cmp	r3, #0
 8004988:	d005      	beq.n	8004996 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f991 	bl	8004cb2 <UART_EndTransmit_IT>
    return;
 8004990:	bf00      	nop
 8004992:	e000      	b.n	8004996 <HAL_UART_IRQHandler+0x1f6>
    return;
 8004994:	bf00      	nop
  }
}
 8004996:	3720      	adds	r7, #32
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	08004bdf 	.word	0x08004bdf

080049a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d113      	bne.n	8004a34 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	695a      	ldr	r2, [r3, #20]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a20:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68da      	ldr	r2, [r3, #12]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a30:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a32:	e002      	b.n	8004a3a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f7ff ffb3 	bl	80049a0 <HAL_UART_TxCpltCallback>
}
 8004a3a:	bf00      	nop
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b084      	sub	sp, #16
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f7ff ffaf 	bl	80049b4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a56:	bf00      	nop
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b084      	sub	sp, #16
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d11e      	bne.n	8004ab8 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68da      	ldr	r2, [r3, #12]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a8e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	695a      	ldr	r2, [r3, #20]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 0201 	bic.w	r2, r2, #1
 8004a9e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	695a      	ldr	r2, [r3, #20]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aae:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f7fc f871 	bl	8000ba0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004abe:	bf00      	nop
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b084      	sub	sp, #16
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f7ff ff77 	bl	80049c8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ada:	bf00      	nop
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b084      	sub	sp, #16
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004aea:	2300      	movs	r3, #0
 8004aec:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004afe:	2b80      	cmp	r3, #128	; 0x80
 8004b00:	bf0c      	ite	eq
 8004b02:	2301      	moveq	r3, #1
 8004b04:	2300      	movne	r3, #0
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b21      	cmp	r3, #33	; 0x21
 8004b14:	d108      	bne.n	8004b28 <UART_DMAError+0x46>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d005      	beq.n	8004b28 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004b22:	68b8      	ldr	r0, [r7, #8]
 8004b24:	f000 f827 	bl	8004b76 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b32:	2b40      	cmp	r3, #64	; 0x40
 8004b34:	bf0c      	ite	eq
 8004b36:	2301      	moveq	r3, #1
 8004b38:	2300      	movne	r3, #0
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b22      	cmp	r3, #34	; 0x22
 8004b48:	d108      	bne.n	8004b5c <UART_DMAError+0x7a>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d005      	beq.n	8004b5c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2200      	movs	r2, #0
 8004b54:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004b56:	68b8      	ldr	r0, [r7, #8]
 8004b58:	f000 f823 	bl	8004ba2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b60:	f043 0210 	orr.w	r2, r3, #16
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b68:	68b8      	ldr	r0, [r7, #8]
 8004b6a:	f7ff ff37 	bl	80049dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b6e:	bf00      	nop
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b083      	sub	sp, #12
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68da      	ldr	r2, [r3, #12]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004b8c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2220      	movs	r2, #32
 8004b92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004b96:	bf00      	nop
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b083      	sub	sp, #12
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68da      	ldr	r2, [r3, #12]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004bb8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	695a      	ldr	r2, [r3, #20]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0201 	bic.w	r2, r2, #1
 8004bc8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004bd2:	bf00      	nop
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr

08004bde <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b084      	sub	sp, #16
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f7ff feef 	bl	80049dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bfe:	bf00      	nop
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b085      	sub	sp, #20
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b21      	cmp	r3, #33	; 0x21
 8004c18:	d144      	bne.n	8004ca4 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c22:	d11a      	bne.n	8004c5a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	881b      	ldrh	r3, [r3, #0]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c38:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d105      	bne.n	8004c4e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	1c9a      	adds	r2, r3, #2
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	621a      	str	r2, [r3, #32]
 8004c4c:	e00e      	b.n	8004c6c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	1c5a      	adds	r2, r3, #1
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	621a      	str	r2, [r3, #32]
 8004c58:	e008      	b.n	8004c6c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	1c59      	adds	r1, r3, #1
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	6211      	str	r1, [r2, #32]
 8004c64:	781a      	ldrb	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	3b01      	subs	r3, #1
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	4619      	mov	r1, r3
 8004c7a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10f      	bne.n	8004ca0 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68da      	ldr	r2, [r3, #12]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68da      	ldr	r2, [r3, #12]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	e000      	b.n	8004ca6 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004ca4:	2302      	movs	r3, #2
  }
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b082      	sub	sp, #8
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68da      	ldr	r2, [r3, #12]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cc8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7ff fe64 	bl	80049a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b084      	sub	sp, #16
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b22      	cmp	r3, #34	; 0x22
 8004cf4:	d171      	bne.n	8004dda <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cfe:	d123      	bne.n	8004d48 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d04:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10e      	bne.n	8004d2c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d24:	1c9a      	adds	r2, r3, #2
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	629a      	str	r2, [r3, #40]	; 0x28
 8004d2a:	e029      	b.n	8004d80 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d40:	1c5a      	adds	r2, r3, #1
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	629a      	str	r2, [r3, #40]	; 0x28
 8004d46:	e01b      	b.n	8004d80 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10a      	bne.n	8004d66 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6858      	ldr	r0, [r3, #4]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5a:	1c59      	adds	r1, r3, #1
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	6291      	str	r1, [r2, #40]	; 0x28
 8004d60:	b2c2      	uxtb	r2, r0
 8004d62:	701a      	strb	r2, [r3, #0]
 8004d64:	e00c      	b.n	8004d80 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d72:	1c58      	adds	r0, r3, #1
 8004d74:	6879      	ldr	r1, [r7, #4]
 8004d76:	6288      	str	r0, [r1, #40]	; 0x28
 8004d78:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d7c:	b2d2      	uxtb	r2, r2
 8004d7e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	3b01      	subs	r3, #1
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d120      	bne.n	8004dd6 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68da      	ldr	r2, [r3, #12]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 0220 	bic.w	r2, r2, #32
 8004da2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68da      	ldr	r2, [r3, #12]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004db2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	695a      	ldr	r2, [r3, #20]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 0201 	bic.w	r2, r2, #1
 8004dc2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f7fb fee7 	bl	8000ba0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	e002      	b.n	8004ddc <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	e000      	b.n	8004ddc <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004dda:	2302      	movs	r3, #2
  }
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3710      	adds	r7, #16
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004de8:	b085      	sub	sp, #20
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68da      	ldr	r2, [r3, #12]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689a      	ldr	r2, [r3, #8]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	431a      	orrs	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004e26:	f023 030c 	bic.w	r3, r3, #12
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	6812      	ldr	r2, [r2, #0]
 8004e2e:	68f9      	ldr	r1, [r7, #12]
 8004e30:	430b      	orrs	r3, r1
 8004e32:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	699a      	ldr	r2, [r3, #24]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	430a      	orrs	r2, r1
 8004e48:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e52:	f040 818b 	bne.w	800516c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4ac1      	ldr	r2, [pc, #772]	; (8005160 <UART_SetConfig+0x37c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d005      	beq.n	8004e6c <UART_SetConfig+0x88>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4abf      	ldr	r2, [pc, #764]	; (8005164 <UART_SetConfig+0x380>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	f040 80bd 	bne.w	8004fe6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e6c:	f7fe fca2 	bl	80037b4 <HAL_RCC_GetPCLK2Freq>
 8004e70:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	461d      	mov	r5, r3
 8004e76:	f04f 0600 	mov.w	r6, #0
 8004e7a:	46a8      	mov	r8, r5
 8004e7c:	46b1      	mov	r9, r6
 8004e7e:	eb18 0308 	adds.w	r3, r8, r8
 8004e82:	eb49 0409 	adc.w	r4, r9, r9
 8004e86:	4698      	mov	r8, r3
 8004e88:	46a1      	mov	r9, r4
 8004e8a:	eb18 0805 	adds.w	r8, r8, r5
 8004e8e:	eb49 0906 	adc.w	r9, r9, r6
 8004e92:	f04f 0100 	mov.w	r1, #0
 8004e96:	f04f 0200 	mov.w	r2, #0
 8004e9a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004e9e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004ea2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004ea6:	4688      	mov	r8, r1
 8004ea8:	4691      	mov	r9, r2
 8004eaa:	eb18 0005 	adds.w	r0, r8, r5
 8004eae:	eb49 0106 	adc.w	r1, r9, r6
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	461d      	mov	r5, r3
 8004eb8:	f04f 0600 	mov.w	r6, #0
 8004ebc:	196b      	adds	r3, r5, r5
 8004ebe:	eb46 0406 	adc.w	r4, r6, r6
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	4623      	mov	r3, r4
 8004ec6:	f7fb f9db 	bl	8000280 <__aeabi_uldivmod>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	460c      	mov	r4, r1
 8004ece:	461a      	mov	r2, r3
 8004ed0:	4ba5      	ldr	r3, [pc, #660]	; (8005168 <UART_SetConfig+0x384>)
 8004ed2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ed6:	095b      	lsrs	r3, r3, #5
 8004ed8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	461d      	mov	r5, r3
 8004ee0:	f04f 0600 	mov.w	r6, #0
 8004ee4:	46a9      	mov	r9, r5
 8004ee6:	46b2      	mov	sl, r6
 8004ee8:	eb19 0309 	adds.w	r3, r9, r9
 8004eec:	eb4a 040a 	adc.w	r4, sl, sl
 8004ef0:	4699      	mov	r9, r3
 8004ef2:	46a2      	mov	sl, r4
 8004ef4:	eb19 0905 	adds.w	r9, r9, r5
 8004ef8:	eb4a 0a06 	adc.w	sl, sl, r6
 8004efc:	f04f 0100 	mov.w	r1, #0
 8004f00:	f04f 0200 	mov.w	r2, #0
 8004f04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f10:	4689      	mov	r9, r1
 8004f12:	4692      	mov	sl, r2
 8004f14:	eb19 0005 	adds.w	r0, r9, r5
 8004f18:	eb4a 0106 	adc.w	r1, sl, r6
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	461d      	mov	r5, r3
 8004f22:	f04f 0600 	mov.w	r6, #0
 8004f26:	196b      	adds	r3, r5, r5
 8004f28:	eb46 0406 	adc.w	r4, r6, r6
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	4623      	mov	r3, r4
 8004f30:	f7fb f9a6 	bl	8000280 <__aeabi_uldivmod>
 8004f34:	4603      	mov	r3, r0
 8004f36:	460c      	mov	r4, r1
 8004f38:	461a      	mov	r2, r3
 8004f3a:	4b8b      	ldr	r3, [pc, #556]	; (8005168 <UART_SetConfig+0x384>)
 8004f3c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f40:	095b      	lsrs	r3, r3, #5
 8004f42:	2164      	movs	r1, #100	; 0x64
 8004f44:	fb01 f303 	mul.w	r3, r1, r3
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	3332      	adds	r3, #50	; 0x32
 8004f4e:	4a86      	ldr	r2, [pc, #536]	; (8005168 <UART_SetConfig+0x384>)
 8004f50:	fba2 2303 	umull	r2, r3, r2, r3
 8004f54:	095b      	lsrs	r3, r3, #5
 8004f56:	005b      	lsls	r3, r3, #1
 8004f58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f5c:	4498      	add	r8, r3
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	461d      	mov	r5, r3
 8004f62:	f04f 0600 	mov.w	r6, #0
 8004f66:	46a9      	mov	r9, r5
 8004f68:	46b2      	mov	sl, r6
 8004f6a:	eb19 0309 	adds.w	r3, r9, r9
 8004f6e:	eb4a 040a 	adc.w	r4, sl, sl
 8004f72:	4699      	mov	r9, r3
 8004f74:	46a2      	mov	sl, r4
 8004f76:	eb19 0905 	adds.w	r9, r9, r5
 8004f7a:	eb4a 0a06 	adc.w	sl, sl, r6
 8004f7e:	f04f 0100 	mov.w	r1, #0
 8004f82:	f04f 0200 	mov.w	r2, #0
 8004f86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f8a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f8e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f92:	4689      	mov	r9, r1
 8004f94:	4692      	mov	sl, r2
 8004f96:	eb19 0005 	adds.w	r0, r9, r5
 8004f9a:	eb4a 0106 	adc.w	r1, sl, r6
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	461d      	mov	r5, r3
 8004fa4:	f04f 0600 	mov.w	r6, #0
 8004fa8:	196b      	adds	r3, r5, r5
 8004faa:	eb46 0406 	adc.w	r4, r6, r6
 8004fae:	461a      	mov	r2, r3
 8004fb0:	4623      	mov	r3, r4
 8004fb2:	f7fb f965 	bl	8000280 <__aeabi_uldivmod>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	460c      	mov	r4, r1
 8004fba:	461a      	mov	r2, r3
 8004fbc:	4b6a      	ldr	r3, [pc, #424]	; (8005168 <UART_SetConfig+0x384>)
 8004fbe:	fba3 1302 	umull	r1, r3, r3, r2
 8004fc2:	095b      	lsrs	r3, r3, #5
 8004fc4:	2164      	movs	r1, #100	; 0x64
 8004fc6:	fb01 f303 	mul.w	r3, r1, r3
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	3332      	adds	r3, #50	; 0x32
 8004fd0:	4a65      	ldr	r2, [pc, #404]	; (8005168 <UART_SetConfig+0x384>)
 8004fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd6:	095b      	lsrs	r3, r3, #5
 8004fd8:	f003 0207 	and.w	r2, r3, #7
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4442      	add	r2, r8
 8004fe2:	609a      	str	r2, [r3, #8]
 8004fe4:	e26f      	b.n	80054c6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fe6:	f7fe fbd1 	bl	800378c <HAL_RCC_GetPCLK1Freq>
 8004fea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	461d      	mov	r5, r3
 8004ff0:	f04f 0600 	mov.w	r6, #0
 8004ff4:	46a8      	mov	r8, r5
 8004ff6:	46b1      	mov	r9, r6
 8004ff8:	eb18 0308 	adds.w	r3, r8, r8
 8004ffc:	eb49 0409 	adc.w	r4, r9, r9
 8005000:	4698      	mov	r8, r3
 8005002:	46a1      	mov	r9, r4
 8005004:	eb18 0805 	adds.w	r8, r8, r5
 8005008:	eb49 0906 	adc.w	r9, r9, r6
 800500c:	f04f 0100 	mov.w	r1, #0
 8005010:	f04f 0200 	mov.w	r2, #0
 8005014:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005018:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800501c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005020:	4688      	mov	r8, r1
 8005022:	4691      	mov	r9, r2
 8005024:	eb18 0005 	adds.w	r0, r8, r5
 8005028:	eb49 0106 	adc.w	r1, r9, r6
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	461d      	mov	r5, r3
 8005032:	f04f 0600 	mov.w	r6, #0
 8005036:	196b      	adds	r3, r5, r5
 8005038:	eb46 0406 	adc.w	r4, r6, r6
 800503c:	461a      	mov	r2, r3
 800503e:	4623      	mov	r3, r4
 8005040:	f7fb f91e 	bl	8000280 <__aeabi_uldivmod>
 8005044:	4603      	mov	r3, r0
 8005046:	460c      	mov	r4, r1
 8005048:	461a      	mov	r2, r3
 800504a:	4b47      	ldr	r3, [pc, #284]	; (8005168 <UART_SetConfig+0x384>)
 800504c:	fba3 2302 	umull	r2, r3, r3, r2
 8005050:	095b      	lsrs	r3, r3, #5
 8005052:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	461d      	mov	r5, r3
 800505a:	f04f 0600 	mov.w	r6, #0
 800505e:	46a9      	mov	r9, r5
 8005060:	46b2      	mov	sl, r6
 8005062:	eb19 0309 	adds.w	r3, r9, r9
 8005066:	eb4a 040a 	adc.w	r4, sl, sl
 800506a:	4699      	mov	r9, r3
 800506c:	46a2      	mov	sl, r4
 800506e:	eb19 0905 	adds.w	r9, r9, r5
 8005072:	eb4a 0a06 	adc.w	sl, sl, r6
 8005076:	f04f 0100 	mov.w	r1, #0
 800507a:	f04f 0200 	mov.w	r2, #0
 800507e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005082:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005086:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800508a:	4689      	mov	r9, r1
 800508c:	4692      	mov	sl, r2
 800508e:	eb19 0005 	adds.w	r0, r9, r5
 8005092:	eb4a 0106 	adc.w	r1, sl, r6
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	461d      	mov	r5, r3
 800509c:	f04f 0600 	mov.w	r6, #0
 80050a0:	196b      	adds	r3, r5, r5
 80050a2:	eb46 0406 	adc.w	r4, r6, r6
 80050a6:	461a      	mov	r2, r3
 80050a8:	4623      	mov	r3, r4
 80050aa:	f7fb f8e9 	bl	8000280 <__aeabi_uldivmod>
 80050ae:	4603      	mov	r3, r0
 80050b0:	460c      	mov	r4, r1
 80050b2:	461a      	mov	r2, r3
 80050b4:	4b2c      	ldr	r3, [pc, #176]	; (8005168 <UART_SetConfig+0x384>)
 80050b6:	fba3 1302 	umull	r1, r3, r3, r2
 80050ba:	095b      	lsrs	r3, r3, #5
 80050bc:	2164      	movs	r1, #100	; 0x64
 80050be:	fb01 f303 	mul.w	r3, r1, r3
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	00db      	lsls	r3, r3, #3
 80050c6:	3332      	adds	r3, #50	; 0x32
 80050c8:	4a27      	ldr	r2, [pc, #156]	; (8005168 <UART_SetConfig+0x384>)
 80050ca:	fba2 2303 	umull	r2, r3, r2, r3
 80050ce:	095b      	lsrs	r3, r3, #5
 80050d0:	005b      	lsls	r3, r3, #1
 80050d2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050d6:	4498      	add	r8, r3
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	461d      	mov	r5, r3
 80050dc:	f04f 0600 	mov.w	r6, #0
 80050e0:	46a9      	mov	r9, r5
 80050e2:	46b2      	mov	sl, r6
 80050e4:	eb19 0309 	adds.w	r3, r9, r9
 80050e8:	eb4a 040a 	adc.w	r4, sl, sl
 80050ec:	4699      	mov	r9, r3
 80050ee:	46a2      	mov	sl, r4
 80050f0:	eb19 0905 	adds.w	r9, r9, r5
 80050f4:	eb4a 0a06 	adc.w	sl, sl, r6
 80050f8:	f04f 0100 	mov.w	r1, #0
 80050fc:	f04f 0200 	mov.w	r2, #0
 8005100:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005104:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005108:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800510c:	4689      	mov	r9, r1
 800510e:	4692      	mov	sl, r2
 8005110:	eb19 0005 	adds.w	r0, r9, r5
 8005114:	eb4a 0106 	adc.w	r1, sl, r6
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	461d      	mov	r5, r3
 800511e:	f04f 0600 	mov.w	r6, #0
 8005122:	196b      	adds	r3, r5, r5
 8005124:	eb46 0406 	adc.w	r4, r6, r6
 8005128:	461a      	mov	r2, r3
 800512a:	4623      	mov	r3, r4
 800512c:	f7fb f8a8 	bl	8000280 <__aeabi_uldivmod>
 8005130:	4603      	mov	r3, r0
 8005132:	460c      	mov	r4, r1
 8005134:	461a      	mov	r2, r3
 8005136:	4b0c      	ldr	r3, [pc, #48]	; (8005168 <UART_SetConfig+0x384>)
 8005138:	fba3 1302 	umull	r1, r3, r3, r2
 800513c:	095b      	lsrs	r3, r3, #5
 800513e:	2164      	movs	r1, #100	; 0x64
 8005140:	fb01 f303 	mul.w	r3, r1, r3
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	3332      	adds	r3, #50	; 0x32
 800514a:	4a07      	ldr	r2, [pc, #28]	; (8005168 <UART_SetConfig+0x384>)
 800514c:	fba2 2303 	umull	r2, r3, r2, r3
 8005150:	095b      	lsrs	r3, r3, #5
 8005152:	f003 0207 	and.w	r2, r3, #7
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4442      	add	r2, r8
 800515c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800515e:	e1b2      	b.n	80054c6 <UART_SetConfig+0x6e2>
 8005160:	40011000 	.word	0x40011000
 8005164:	40011400 	.word	0x40011400
 8005168:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4ad7      	ldr	r2, [pc, #860]	; (80054d0 <UART_SetConfig+0x6ec>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d005      	beq.n	8005182 <UART_SetConfig+0x39e>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4ad6      	ldr	r2, [pc, #856]	; (80054d4 <UART_SetConfig+0x6f0>)
 800517c:	4293      	cmp	r3, r2
 800517e:	f040 80d1 	bne.w	8005324 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005182:	f7fe fb17 	bl	80037b4 <HAL_RCC_GetPCLK2Freq>
 8005186:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	469a      	mov	sl, r3
 800518c:	f04f 0b00 	mov.w	fp, #0
 8005190:	46d0      	mov	r8, sl
 8005192:	46d9      	mov	r9, fp
 8005194:	eb18 0308 	adds.w	r3, r8, r8
 8005198:	eb49 0409 	adc.w	r4, r9, r9
 800519c:	4698      	mov	r8, r3
 800519e:	46a1      	mov	r9, r4
 80051a0:	eb18 080a 	adds.w	r8, r8, sl
 80051a4:	eb49 090b 	adc.w	r9, r9, fp
 80051a8:	f04f 0100 	mov.w	r1, #0
 80051ac:	f04f 0200 	mov.w	r2, #0
 80051b0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80051b4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80051b8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80051bc:	4688      	mov	r8, r1
 80051be:	4691      	mov	r9, r2
 80051c0:	eb1a 0508 	adds.w	r5, sl, r8
 80051c4:	eb4b 0609 	adc.w	r6, fp, r9
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	4619      	mov	r1, r3
 80051ce:	f04f 0200 	mov.w	r2, #0
 80051d2:	f04f 0300 	mov.w	r3, #0
 80051d6:	f04f 0400 	mov.w	r4, #0
 80051da:	0094      	lsls	r4, r2, #2
 80051dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80051e0:	008b      	lsls	r3, r1, #2
 80051e2:	461a      	mov	r2, r3
 80051e4:	4623      	mov	r3, r4
 80051e6:	4628      	mov	r0, r5
 80051e8:	4631      	mov	r1, r6
 80051ea:	f7fb f849 	bl	8000280 <__aeabi_uldivmod>
 80051ee:	4603      	mov	r3, r0
 80051f0:	460c      	mov	r4, r1
 80051f2:	461a      	mov	r2, r3
 80051f4:	4bb8      	ldr	r3, [pc, #736]	; (80054d8 <UART_SetConfig+0x6f4>)
 80051f6:	fba3 2302 	umull	r2, r3, r3, r2
 80051fa:	095b      	lsrs	r3, r3, #5
 80051fc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	469b      	mov	fp, r3
 8005204:	f04f 0c00 	mov.w	ip, #0
 8005208:	46d9      	mov	r9, fp
 800520a:	46e2      	mov	sl, ip
 800520c:	eb19 0309 	adds.w	r3, r9, r9
 8005210:	eb4a 040a 	adc.w	r4, sl, sl
 8005214:	4699      	mov	r9, r3
 8005216:	46a2      	mov	sl, r4
 8005218:	eb19 090b 	adds.w	r9, r9, fp
 800521c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005220:	f04f 0100 	mov.w	r1, #0
 8005224:	f04f 0200 	mov.w	r2, #0
 8005228:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800522c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005230:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005234:	4689      	mov	r9, r1
 8005236:	4692      	mov	sl, r2
 8005238:	eb1b 0509 	adds.w	r5, fp, r9
 800523c:	eb4c 060a 	adc.w	r6, ip, sl
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	4619      	mov	r1, r3
 8005246:	f04f 0200 	mov.w	r2, #0
 800524a:	f04f 0300 	mov.w	r3, #0
 800524e:	f04f 0400 	mov.w	r4, #0
 8005252:	0094      	lsls	r4, r2, #2
 8005254:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005258:	008b      	lsls	r3, r1, #2
 800525a:	461a      	mov	r2, r3
 800525c:	4623      	mov	r3, r4
 800525e:	4628      	mov	r0, r5
 8005260:	4631      	mov	r1, r6
 8005262:	f7fb f80d 	bl	8000280 <__aeabi_uldivmod>
 8005266:	4603      	mov	r3, r0
 8005268:	460c      	mov	r4, r1
 800526a:	461a      	mov	r2, r3
 800526c:	4b9a      	ldr	r3, [pc, #616]	; (80054d8 <UART_SetConfig+0x6f4>)
 800526e:	fba3 1302 	umull	r1, r3, r3, r2
 8005272:	095b      	lsrs	r3, r3, #5
 8005274:	2164      	movs	r1, #100	; 0x64
 8005276:	fb01 f303 	mul.w	r3, r1, r3
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	011b      	lsls	r3, r3, #4
 800527e:	3332      	adds	r3, #50	; 0x32
 8005280:	4a95      	ldr	r2, [pc, #596]	; (80054d8 <UART_SetConfig+0x6f4>)
 8005282:	fba2 2303 	umull	r2, r3, r2, r3
 8005286:	095b      	lsrs	r3, r3, #5
 8005288:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800528c:	4498      	add	r8, r3
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	469b      	mov	fp, r3
 8005292:	f04f 0c00 	mov.w	ip, #0
 8005296:	46d9      	mov	r9, fp
 8005298:	46e2      	mov	sl, ip
 800529a:	eb19 0309 	adds.w	r3, r9, r9
 800529e:	eb4a 040a 	adc.w	r4, sl, sl
 80052a2:	4699      	mov	r9, r3
 80052a4:	46a2      	mov	sl, r4
 80052a6:	eb19 090b 	adds.w	r9, r9, fp
 80052aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80052ae:	f04f 0100 	mov.w	r1, #0
 80052b2:	f04f 0200 	mov.w	r2, #0
 80052b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80052be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80052c2:	4689      	mov	r9, r1
 80052c4:	4692      	mov	sl, r2
 80052c6:	eb1b 0509 	adds.w	r5, fp, r9
 80052ca:	eb4c 060a 	adc.w	r6, ip, sl
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	4619      	mov	r1, r3
 80052d4:	f04f 0200 	mov.w	r2, #0
 80052d8:	f04f 0300 	mov.w	r3, #0
 80052dc:	f04f 0400 	mov.w	r4, #0
 80052e0:	0094      	lsls	r4, r2, #2
 80052e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80052e6:	008b      	lsls	r3, r1, #2
 80052e8:	461a      	mov	r2, r3
 80052ea:	4623      	mov	r3, r4
 80052ec:	4628      	mov	r0, r5
 80052ee:	4631      	mov	r1, r6
 80052f0:	f7fa ffc6 	bl	8000280 <__aeabi_uldivmod>
 80052f4:	4603      	mov	r3, r0
 80052f6:	460c      	mov	r4, r1
 80052f8:	461a      	mov	r2, r3
 80052fa:	4b77      	ldr	r3, [pc, #476]	; (80054d8 <UART_SetConfig+0x6f4>)
 80052fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005300:	095b      	lsrs	r3, r3, #5
 8005302:	2164      	movs	r1, #100	; 0x64
 8005304:	fb01 f303 	mul.w	r3, r1, r3
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	011b      	lsls	r3, r3, #4
 800530c:	3332      	adds	r3, #50	; 0x32
 800530e:	4a72      	ldr	r2, [pc, #456]	; (80054d8 <UART_SetConfig+0x6f4>)
 8005310:	fba2 2303 	umull	r2, r3, r2, r3
 8005314:	095b      	lsrs	r3, r3, #5
 8005316:	f003 020f 	and.w	r2, r3, #15
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4442      	add	r2, r8
 8005320:	609a      	str	r2, [r3, #8]
 8005322:	e0d0      	b.n	80054c6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005324:	f7fe fa32 	bl	800378c <HAL_RCC_GetPCLK1Freq>
 8005328:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	469a      	mov	sl, r3
 800532e:	f04f 0b00 	mov.w	fp, #0
 8005332:	46d0      	mov	r8, sl
 8005334:	46d9      	mov	r9, fp
 8005336:	eb18 0308 	adds.w	r3, r8, r8
 800533a:	eb49 0409 	adc.w	r4, r9, r9
 800533e:	4698      	mov	r8, r3
 8005340:	46a1      	mov	r9, r4
 8005342:	eb18 080a 	adds.w	r8, r8, sl
 8005346:	eb49 090b 	adc.w	r9, r9, fp
 800534a:	f04f 0100 	mov.w	r1, #0
 800534e:	f04f 0200 	mov.w	r2, #0
 8005352:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005356:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800535a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800535e:	4688      	mov	r8, r1
 8005360:	4691      	mov	r9, r2
 8005362:	eb1a 0508 	adds.w	r5, sl, r8
 8005366:	eb4b 0609 	adc.w	r6, fp, r9
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	4619      	mov	r1, r3
 8005370:	f04f 0200 	mov.w	r2, #0
 8005374:	f04f 0300 	mov.w	r3, #0
 8005378:	f04f 0400 	mov.w	r4, #0
 800537c:	0094      	lsls	r4, r2, #2
 800537e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005382:	008b      	lsls	r3, r1, #2
 8005384:	461a      	mov	r2, r3
 8005386:	4623      	mov	r3, r4
 8005388:	4628      	mov	r0, r5
 800538a:	4631      	mov	r1, r6
 800538c:	f7fa ff78 	bl	8000280 <__aeabi_uldivmod>
 8005390:	4603      	mov	r3, r0
 8005392:	460c      	mov	r4, r1
 8005394:	461a      	mov	r2, r3
 8005396:	4b50      	ldr	r3, [pc, #320]	; (80054d8 <UART_SetConfig+0x6f4>)
 8005398:	fba3 2302 	umull	r2, r3, r3, r2
 800539c:	095b      	lsrs	r3, r3, #5
 800539e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	469b      	mov	fp, r3
 80053a6:	f04f 0c00 	mov.w	ip, #0
 80053aa:	46d9      	mov	r9, fp
 80053ac:	46e2      	mov	sl, ip
 80053ae:	eb19 0309 	adds.w	r3, r9, r9
 80053b2:	eb4a 040a 	adc.w	r4, sl, sl
 80053b6:	4699      	mov	r9, r3
 80053b8:	46a2      	mov	sl, r4
 80053ba:	eb19 090b 	adds.w	r9, r9, fp
 80053be:	eb4a 0a0c 	adc.w	sl, sl, ip
 80053c2:	f04f 0100 	mov.w	r1, #0
 80053c6:	f04f 0200 	mov.w	r2, #0
 80053ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80053d6:	4689      	mov	r9, r1
 80053d8:	4692      	mov	sl, r2
 80053da:	eb1b 0509 	adds.w	r5, fp, r9
 80053de:	eb4c 060a 	adc.w	r6, ip, sl
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	4619      	mov	r1, r3
 80053e8:	f04f 0200 	mov.w	r2, #0
 80053ec:	f04f 0300 	mov.w	r3, #0
 80053f0:	f04f 0400 	mov.w	r4, #0
 80053f4:	0094      	lsls	r4, r2, #2
 80053f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80053fa:	008b      	lsls	r3, r1, #2
 80053fc:	461a      	mov	r2, r3
 80053fe:	4623      	mov	r3, r4
 8005400:	4628      	mov	r0, r5
 8005402:	4631      	mov	r1, r6
 8005404:	f7fa ff3c 	bl	8000280 <__aeabi_uldivmod>
 8005408:	4603      	mov	r3, r0
 800540a:	460c      	mov	r4, r1
 800540c:	461a      	mov	r2, r3
 800540e:	4b32      	ldr	r3, [pc, #200]	; (80054d8 <UART_SetConfig+0x6f4>)
 8005410:	fba3 1302 	umull	r1, r3, r3, r2
 8005414:	095b      	lsrs	r3, r3, #5
 8005416:	2164      	movs	r1, #100	; 0x64
 8005418:	fb01 f303 	mul.w	r3, r1, r3
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	3332      	adds	r3, #50	; 0x32
 8005422:	4a2d      	ldr	r2, [pc, #180]	; (80054d8 <UART_SetConfig+0x6f4>)
 8005424:	fba2 2303 	umull	r2, r3, r2, r3
 8005428:	095b      	lsrs	r3, r3, #5
 800542a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800542e:	4498      	add	r8, r3
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	469b      	mov	fp, r3
 8005434:	f04f 0c00 	mov.w	ip, #0
 8005438:	46d9      	mov	r9, fp
 800543a:	46e2      	mov	sl, ip
 800543c:	eb19 0309 	adds.w	r3, r9, r9
 8005440:	eb4a 040a 	adc.w	r4, sl, sl
 8005444:	4699      	mov	r9, r3
 8005446:	46a2      	mov	sl, r4
 8005448:	eb19 090b 	adds.w	r9, r9, fp
 800544c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005450:	f04f 0100 	mov.w	r1, #0
 8005454:	f04f 0200 	mov.w	r2, #0
 8005458:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800545c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005460:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005464:	4689      	mov	r9, r1
 8005466:	4692      	mov	sl, r2
 8005468:	eb1b 0509 	adds.w	r5, fp, r9
 800546c:	eb4c 060a 	adc.w	r6, ip, sl
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	4619      	mov	r1, r3
 8005476:	f04f 0200 	mov.w	r2, #0
 800547a:	f04f 0300 	mov.w	r3, #0
 800547e:	f04f 0400 	mov.w	r4, #0
 8005482:	0094      	lsls	r4, r2, #2
 8005484:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005488:	008b      	lsls	r3, r1, #2
 800548a:	461a      	mov	r2, r3
 800548c:	4623      	mov	r3, r4
 800548e:	4628      	mov	r0, r5
 8005490:	4631      	mov	r1, r6
 8005492:	f7fa fef5 	bl	8000280 <__aeabi_uldivmod>
 8005496:	4603      	mov	r3, r0
 8005498:	460c      	mov	r4, r1
 800549a:	461a      	mov	r2, r3
 800549c:	4b0e      	ldr	r3, [pc, #56]	; (80054d8 <UART_SetConfig+0x6f4>)
 800549e:	fba3 1302 	umull	r1, r3, r3, r2
 80054a2:	095b      	lsrs	r3, r3, #5
 80054a4:	2164      	movs	r1, #100	; 0x64
 80054a6:	fb01 f303 	mul.w	r3, r1, r3
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	011b      	lsls	r3, r3, #4
 80054ae:	3332      	adds	r3, #50	; 0x32
 80054b0:	4a09      	ldr	r2, [pc, #36]	; (80054d8 <UART_SetConfig+0x6f4>)
 80054b2:	fba2 2303 	umull	r2, r3, r2, r3
 80054b6:	095b      	lsrs	r3, r3, #5
 80054b8:	f003 020f 	and.w	r2, r3, #15
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4442      	add	r2, r8
 80054c2:	609a      	str	r2, [r3, #8]
}
 80054c4:	e7ff      	b.n	80054c6 <UART_SetConfig+0x6e2>
 80054c6:	bf00      	nop
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054d0:	40011000 	.word	0x40011000
 80054d4:	40011400 	.word	0x40011400
 80054d8:	51eb851f 	.word	0x51eb851f

080054dc <__errno>:
 80054dc:	4b01      	ldr	r3, [pc, #4]	; (80054e4 <__errno+0x8>)
 80054de:	6818      	ldr	r0, [r3, #0]
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	20000010 	.word	0x20000010

080054e8 <__libc_init_array>:
 80054e8:	b570      	push	{r4, r5, r6, lr}
 80054ea:	4e0d      	ldr	r6, [pc, #52]	; (8005520 <__libc_init_array+0x38>)
 80054ec:	4c0d      	ldr	r4, [pc, #52]	; (8005524 <__libc_init_array+0x3c>)
 80054ee:	1ba4      	subs	r4, r4, r6
 80054f0:	10a4      	asrs	r4, r4, #2
 80054f2:	2500      	movs	r5, #0
 80054f4:	42a5      	cmp	r5, r4
 80054f6:	d109      	bne.n	800550c <__libc_init_array+0x24>
 80054f8:	4e0b      	ldr	r6, [pc, #44]	; (8005528 <__libc_init_array+0x40>)
 80054fa:	4c0c      	ldr	r4, [pc, #48]	; (800552c <__libc_init_array+0x44>)
 80054fc:	f000 fc26 	bl	8005d4c <_init>
 8005500:	1ba4      	subs	r4, r4, r6
 8005502:	10a4      	asrs	r4, r4, #2
 8005504:	2500      	movs	r5, #0
 8005506:	42a5      	cmp	r5, r4
 8005508:	d105      	bne.n	8005516 <__libc_init_array+0x2e>
 800550a:	bd70      	pop	{r4, r5, r6, pc}
 800550c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005510:	4798      	blx	r3
 8005512:	3501      	adds	r5, #1
 8005514:	e7ee      	b.n	80054f4 <__libc_init_array+0xc>
 8005516:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800551a:	4798      	blx	r3
 800551c:	3501      	adds	r5, #1
 800551e:	e7f2      	b.n	8005506 <__libc_init_array+0x1e>
 8005520:	08005dd0 	.word	0x08005dd0
 8005524:	08005dd0 	.word	0x08005dd0
 8005528:	08005dd0 	.word	0x08005dd0
 800552c:	08005dd4 	.word	0x08005dd4

08005530 <memset>:
 8005530:	4402      	add	r2, r0
 8005532:	4603      	mov	r3, r0
 8005534:	4293      	cmp	r3, r2
 8005536:	d100      	bne.n	800553a <memset+0xa>
 8005538:	4770      	bx	lr
 800553a:	f803 1b01 	strb.w	r1, [r3], #1
 800553e:	e7f9      	b.n	8005534 <memset+0x4>

08005540 <siprintf>:
 8005540:	b40e      	push	{r1, r2, r3}
 8005542:	b500      	push	{lr}
 8005544:	b09c      	sub	sp, #112	; 0x70
 8005546:	ab1d      	add	r3, sp, #116	; 0x74
 8005548:	9002      	str	r0, [sp, #8]
 800554a:	9006      	str	r0, [sp, #24]
 800554c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005550:	4809      	ldr	r0, [pc, #36]	; (8005578 <siprintf+0x38>)
 8005552:	9107      	str	r1, [sp, #28]
 8005554:	9104      	str	r1, [sp, #16]
 8005556:	4909      	ldr	r1, [pc, #36]	; (800557c <siprintf+0x3c>)
 8005558:	f853 2b04 	ldr.w	r2, [r3], #4
 800555c:	9105      	str	r1, [sp, #20]
 800555e:	6800      	ldr	r0, [r0, #0]
 8005560:	9301      	str	r3, [sp, #4]
 8005562:	a902      	add	r1, sp, #8
 8005564:	f000 f866 	bl	8005634 <_svfiprintf_r>
 8005568:	9b02      	ldr	r3, [sp, #8]
 800556a:	2200      	movs	r2, #0
 800556c:	701a      	strb	r2, [r3, #0]
 800556e:	b01c      	add	sp, #112	; 0x70
 8005570:	f85d eb04 	ldr.w	lr, [sp], #4
 8005574:	b003      	add	sp, #12
 8005576:	4770      	bx	lr
 8005578:	20000010 	.word	0x20000010
 800557c:	ffff0208 	.word	0xffff0208

08005580 <__ssputs_r>:
 8005580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005584:	688e      	ldr	r6, [r1, #8]
 8005586:	429e      	cmp	r6, r3
 8005588:	4682      	mov	sl, r0
 800558a:	460c      	mov	r4, r1
 800558c:	4690      	mov	r8, r2
 800558e:	4699      	mov	r9, r3
 8005590:	d837      	bhi.n	8005602 <__ssputs_r+0x82>
 8005592:	898a      	ldrh	r2, [r1, #12]
 8005594:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005598:	d031      	beq.n	80055fe <__ssputs_r+0x7e>
 800559a:	6825      	ldr	r5, [r4, #0]
 800559c:	6909      	ldr	r1, [r1, #16]
 800559e:	1a6f      	subs	r7, r5, r1
 80055a0:	6965      	ldr	r5, [r4, #20]
 80055a2:	2302      	movs	r3, #2
 80055a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055a8:	fb95 f5f3 	sdiv	r5, r5, r3
 80055ac:	f109 0301 	add.w	r3, r9, #1
 80055b0:	443b      	add	r3, r7
 80055b2:	429d      	cmp	r5, r3
 80055b4:	bf38      	it	cc
 80055b6:	461d      	movcc	r5, r3
 80055b8:	0553      	lsls	r3, r2, #21
 80055ba:	d530      	bpl.n	800561e <__ssputs_r+0x9e>
 80055bc:	4629      	mov	r1, r5
 80055be:	f000 fb2b 	bl	8005c18 <_malloc_r>
 80055c2:	4606      	mov	r6, r0
 80055c4:	b950      	cbnz	r0, 80055dc <__ssputs_r+0x5c>
 80055c6:	230c      	movs	r3, #12
 80055c8:	f8ca 3000 	str.w	r3, [sl]
 80055cc:	89a3      	ldrh	r3, [r4, #12]
 80055ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055d2:	81a3      	strh	r3, [r4, #12]
 80055d4:	f04f 30ff 	mov.w	r0, #4294967295
 80055d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055dc:	463a      	mov	r2, r7
 80055de:	6921      	ldr	r1, [r4, #16]
 80055e0:	f000 faa8 	bl	8005b34 <memcpy>
 80055e4:	89a3      	ldrh	r3, [r4, #12]
 80055e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80055ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ee:	81a3      	strh	r3, [r4, #12]
 80055f0:	6126      	str	r6, [r4, #16]
 80055f2:	6165      	str	r5, [r4, #20]
 80055f4:	443e      	add	r6, r7
 80055f6:	1bed      	subs	r5, r5, r7
 80055f8:	6026      	str	r6, [r4, #0]
 80055fa:	60a5      	str	r5, [r4, #8]
 80055fc:	464e      	mov	r6, r9
 80055fe:	454e      	cmp	r6, r9
 8005600:	d900      	bls.n	8005604 <__ssputs_r+0x84>
 8005602:	464e      	mov	r6, r9
 8005604:	4632      	mov	r2, r6
 8005606:	4641      	mov	r1, r8
 8005608:	6820      	ldr	r0, [r4, #0]
 800560a:	f000 fa9e 	bl	8005b4a <memmove>
 800560e:	68a3      	ldr	r3, [r4, #8]
 8005610:	1b9b      	subs	r3, r3, r6
 8005612:	60a3      	str	r3, [r4, #8]
 8005614:	6823      	ldr	r3, [r4, #0]
 8005616:	441e      	add	r6, r3
 8005618:	6026      	str	r6, [r4, #0]
 800561a:	2000      	movs	r0, #0
 800561c:	e7dc      	b.n	80055d8 <__ssputs_r+0x58>
 800561e:	462a      	mov	r2, r5
 8005620:	f000 fb54 	bl	8005ccc <_realloc_r>
 8005624:	4606      	mov	r6, r0
 8005626:	2800      	cmp	r0, #0
 8005628:	d1e2      	bne.n	80055f0 <__ssputs_r+0x70>
 800562a:	6921      	ldr	r1, [r4, #16]
 800562c:	4650      	mov	r0, sl
 800562e:	f000 faa5 	bl	8005b7c <_free_r>
 8005632:	e7c8      	b.n	80055c6 <__ssputs_r+0x46>

08005634 <_svfiprintf_r>:
 8005634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005638:	461d      	mov	r5, r3
 800563a:	898b      	ldrh	r3, [r1, #12]
 800563c:	061f      	lsls	r7, r3, #24
 800563e:	b09d      	sub	sp, #116	; 0x74
 8005640:	4680      	mov	r8, r0
 8005642:	460c      	mov	r4, r1
 8005644:	4616      	mov	r6, r2
 8005646:	d50f      	bpl.n	8005668 <_svfiprintf_r+0x34>
 8005648:	690b      	ldr	r3, [r1, #16]
 800564a:	b96b      	cbnz	r3, 8005668 <_svfiprintf_r+0x34>
 800564c:	2140      	movs	r1, #64	; 0x40
 800564e:	f000 fae3 	bl	8005c18 <_malloc_r>
 8005652:	6020      	str	r0, [r4, #0]
 8005654:	6120      	str	r0, [r4, #16]
 8005656:	b928      	cbnz	r0, 8005664 <_svfiprintf_r+0x30>
 8005658:	230c      	movs	r3, #12
 800565a:	f8c8 3000 	str.w	r3, [r8]
 800565e:	f04f 30ff 	mov.w	r0, #4294967295
 8005662:	e0c8      	b.n	80057f6 <_svfiprintf_r+0x1c2>
 8005664:	2340      	movs	r3, #64	; 0x40
 8005666:	6163      	str	r3, [r4, #20]
 8005668:	2300      	movs	r3, #0
 800566a:	9309      	str	r3, [sp, #36]	; 0x24
 800566c:	2320      	movs	r3, #32
 800566e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005672:	2330      	movs	r3, #48	; 0x30
 8005674:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005678:	9503      	str	r5, [sp, #12]
 800567a:	f04f 0b01 	mov.w	fp, #1
 800567e:	4637      	mov	r7, r6
 8005680:	463d      	mov	r5, r7
 8005682:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005686:	b10b      	cbz	r3, 800568c <_svfiprintf_r+0x58>
 8005688:	2b25      	cmp	r3, #37	; 0x25
 800568a:	d13e      	bne.n	800570a <_svfiprintf_r+0xd6>
 800568c:	ebb7 0a06 	subs.w	sl, r7, r6
 8005690:	d00b      	beq.n	80056aa <_svfiprintf_r+0x76>
 8005692:	4653      	mov	r3, sl
 8005694:	4632      	mov	r2, r6
 8005696:	4621      	mov	r1, r4
 8005698:	4640      	mov	r0, r8
 800569a:	f7ff ff71 	bl	8005580 <__ssputs_r>
 800569e:	3001      	adds	r0, #1
 80056a0:	f000 80a4 	beq.w	80057ec <_svfiprintf_r+0x1b8>
 80056a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056a6:	4453      	add	r3, sl
 80056a8:	9309      	str	r3, [sp, #36]	; 0x24
 80056aa:	783b      	ldrb	r3, [r7, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 809d 	beq.w	80057ec <_svfiprintf_r+0x1b8>
 80056b2:	2300      	movs	r3, #0
 80056b4:	f04f 32ff 	mov.w	r2, #4294967295
 80056b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056bc:	9304      	str	r3, [sp, #16]
 80056be:	9307      	str	r3, [sp, #28]
 80056c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056c4:	931a      	str	r3, [sp, #104]	; 0x68
 80056c6:	462f      	mov	r7, r5
 80056c8:	2205      	movs	r2, #5
 80056ca:	f817 1b01 	ldrb.w	r1, [r7], #1
 80056ce:	4850      	ldr	r0, [pc, #320]	; (8005810 <_svfiprintf_r+0x1dc>)
 80056d0:	f7fa fd86 	bl	80001e0 <memchr>
 80056d4:	9b04      	ldr	r3, [sp, #16]
 80056d6:	b9d0      	cbnz	r0, 800570e <_svfiprintf_r+0xda>
 80056d8:	06d9      	lsls	r1, r3, #27
 80056da:	bf44      	itt	mi
 80056dc:	2220      	movmi	r2, #32
 80056de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80056e2:	071a      	lsls	r2, r3, #28
 80056e4:	bf44      	itt	mi
 80056e6:	222b      	movmi	r2, #43	; 0x2b
 80056e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80056ec:	782a      	ldrb	r2, [r5, #0]
 80056ee:	2a2a      	cmp	r2, #42	; 0x2a
 80056f0:	d015      	beq.n	800571e <_svfiprintf_r+0xea>
 80056f2:	9a07      	ldr	r2, [sp, #28]
 80056f4:	462f      	mov	r7, r5
 80056f6:	2000      	movs	r0, #0
 80056f8:	250a      	movs	r5, #10
 80056fa:	4639      	mov	r1, r7
 80056fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005700:	3b30      	subs	r3, #48	; 0x30
 8005702:	2b09      	cmp	r3, #9
 8005704:	d94d      	bls.n	80057a2 <_svfiprintf_r+0x16e>
 8005706:	b1b8      	cbz	r0, 8005738 <_svfiprintf_r+0x104>
 8005708:	e00f      	b.n	800572a <_svfiprintf_r+0xf6>
 800570a:	462f      	mov	r7, r5
 800570c:	e7b8      	b.n	8005680 <_svfiprintf_r+0x4c>
 800570e:	4a40      	ldr	r2, [pc, #256]	; (8005810 <_svfiprintf_r+0x1dc>)
 8005710:	1a80      	subs	r0, r0, r2
 8005712:	fa0b f000 	lsl.w	r0, fp, r0
 8005716:	4318      	orrs	r0, r3
 8005718:	9004      	str	r0, [sp, #16]
 800571a:	463d      	mov	r5, r7
 800571c:	e7d3      	b.n	80056c6 <_svfiprintf_r+0x92>
 800571e:	9a03      	ldr	r2, [sp, #12]
 8005720:	1d11      	adds	r1, r2, #4
 8005722:	6812      	ldr	r2, [r2, #0]
 8005724:	9103      	str	r1, [sp, #12]
 8005726:	2a00      	cmp	r2, #0
 8005728:	db01      	blt.n	800572e <_svfiprintf_r+0xfa>
 800572a:	9207      	str	r2, [sp, #28]
 800572c:	e004      	b.n	8005738 <_svfiprintf_r+0x104>
 800572e:	4252      	negs	r2, r2
 8005730:	f043 0302 	orr.w	r3, r3, #2
 8005734:	9207      	str	r2, [sp, #28]
 8005736:	9304      	str	r3, [sp, #16]
 8005738:	783b      	ldrb	r3, [r7, #0]
 800573a:	2b2e      	cmp	r3, #46	; 0x2e
 800573c:	d10c      	bne.n	8005758 <_svfiprintf_r+0x124>
 800573e:	787b      	ldrb	r3, [r7, #1]
 8005740:	2b2a      	cmp	r3, #42	; 0x2a
 8005742:	d133      	bne.n	80057ac <_svfiprintf_r+0x178>
 8005744:	9b03      	ldr	r3, [sp, #12]
 8005746:	1d1a      	adds	r2, r3, #4
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	9203      	str	r2, [sp, #12]
 800574c:	2b00      	cmp	r3, #0
 800574e:	bfb8      	it	lt
 8005750:	f04f 33ff 	movlt.w	r3, #4294967295
 8005754:	3702      	adds	r7, #2
 8005756:	9305      	str	r3, [sp, #20]
 8005758:	4d2e      	ldr	r5, [pc, #184]	; (8005814 <_svfiprintf_r+0x1e0>)
 800575a:	7839      	ldrb	r1, [r7, #0]
 800575c:	2203      	movs	r2, #3
 800575e:	4628      	mov	r0, r5
 8005760:	f7fa fd3e 	bl	80001e0 <memchr>
 8005764:	b138      	cbz	r0, 8005776 <_svfiprintf_r+0x142>
 8005766:	2340      	movs	r3, #64	; 0x40
 8005768:	1b40      	subs	r0, r0, r5
 800576a:	fa03 f000 	lsl.w	r0, r3, r0
 800576e:	9b04      	ldr	r3, [sp, #16]
 8005770:	4303      	orrs	r3, r0
 8005772:	3701      	adds	r7, #1
 8005774:	9304      	str	r3, [sp, #16]
 8005776:	7839      	ldrb	r1, [r7, #0]
 8005778:	4827      	ldr	r0, [pc, #156]	; (8005818 <_svfiprintf_r+0x1e4>)
 800577a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800577e:	2206      	movs	r2, #6
 8005780:	1c7e      	adds	r6, r7, #1
 8005782:	f7fa fd2d 	bl	80001e0 <memchr>
 8005786:	2800      	cmp	r0, #0
 8005788:	d038      	beq.n	80057fc <_svfiprintf_r+0x1c8>
 800578a:	4b24      	ldr	r3, [pc, #144]	; (800581c <_svfiprintf_r+0x1e8>)
 800578c:	bb13      	cbnz	r3, 80057d4 <_svfiprintf_r+0x1a0>
 800578e:	9b03      	ldr	r3, [sp, #12]
 8005790:	3307      	adds	r3, #7
 8005792:	f023 0307 	bic.w	r3, r3, #7
 8005796:	3308      	adds	r3, #8
 8005798:	9303      	str	r3, [sp, #12]
 800579a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800579c:	444b      	add	r3, r9
 800579e:	9309      	str	r3, [sp, #36]	; 0x24
 80057a0:	e76d      	b.n	800567e <_svfiprintf_r+0x4a>
 80057a2:	fb05 3202 	mla	r2, r5, r2, r3
 80057a6:	2001      	movs	r0, #1
 80057a8:	460f      	mov	r7, r1
 80057aa:	e7a6      	b.n	80056fa <_svfiprintf_r+0xc6>
 80057ac:	2300      	movs	r3, #0
 80057ae:	3701      	adds	r7, #1
 80057b0:	9305      	str	r3, [sp, #20]
 80057b2:	4619      	mov	r1, r3
 80057b4:	250a      	movs	r5, #10
 80057b6:	4638      	mov	r0, r7
 80057b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057bc:	3a30      	subs	r2, #48	; 0x30
 80057be:	2a09      	cmp	r2, #9
 80057c0:	d903      	bls.n	80057ca <_svfiprintf_r+0x196>
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d0c8      	beq.n	8005758 <_svfiprintf_r+0x124>
 80057c6:	9105      	str	r1, [sp, #20]
 80057c8:	e7c6      	b.n	8005758 <_svfiprintf_r+0x124>
 80057ca:	fb05 2101 	mla	r1, r5, r1, r2
 80057ce:	2301      	movs	r3, #1
 80057d0:	4607      	mov	r7, r0
 80057d2:	e7f0      	b.n	80057b6 <_svfiprintf_r+0x182>
 80057d4:	ab03      	add	r3, sp, #12
 80057d6:	9300      	str	r3, [sp, #0]
 80057d8:	4622      	mov	r2, r4
 80057da:	4b11      	ldr	r3, [pc, #68]	; (8005820 <_svfiprintf_r+0x1ec>)
 80057dc:	a904      	add	r1, sp, #16
 80057de:	4640      	mov	r0, r8
 80057e0:	f3af 8000 	nop.w
 80057e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80057e8:	4681      	mov	r9, r0
 80057ea:	d1d6      	bne.n	800579a <_svfiprintf_r+0x166>
 80057ec:	89a3      	ldrh	r3, [r4, #12]
 80057ee:	065b      	lsls	r3, r3, #25
 80057f0:	f53f af35 	bmi.w	800565e <_svfiprintf_r+0x2a>
 80057f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057f6:	b01d      	add	sp, #116	; 0x74
 80057f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057fc:	ab03      	add	r3, sp, #12
 80057fe:	9300      	str	r3, [sp, #0]
 8005800:	4622      	mov	r2, r4
 8005802:	4b07      	ldr	r3, [pc, #28]	; (8005820 <_svfiprintf_r+0x1ec>)
 8005804:	a904      	add	r1, sp, #16
 8005806:	4640      	mov	r0, r8
 8005808:	f000 f882 	bl	8005910 <_printf_i>
 800580c:	e7ea      	b.n	80057e4 <_svfiprintf_r+0x1b0>
 800580e:	bf00      	nop
 8005810:	08005d94 	.word	0x08005d94
 8005814:	08005d9a 	.word	0x08005d9a
 8005818:	08005d9e 	.word	0x08005d9e
 800581c:	00000000 	.word	0x00000000
 8005820:	08005581 	.word	0x08005581

08005824 <_printf_common>:
 8005824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005828:	4691      	mov	r9, r2
 800582a:	461f      	mov	r7, r3
 800582c:	688a      	ldr	r2, [r1, #8]
 800582e:	690b      	ldr	r3, [r1, #16]
 8005830:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005834:	4293      	cmp	r3, r2
 8005836:	bfb8      	it	lt
 8005838:	4613      	movlt	r3, r2
 800583a:	f8c9 3000 	str.w	r3, [r9]
 800583e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005842:	4606      	mov	r6, r0
 8005844:	460c      	mov	r4, r1
 8005846:	b112      	cbz	r2, 800584e <_printf_common+0x2a>
 8005848:	3301      	adds	r3, #1
 800584a:	f8c9 3000 	str.w	r3, [r9]
 800584e:	6823      	ldr	r3, [r4, #0]
 8005850:	0699      	lsls	r1, r3, #26
 8005852:	bf42      	ittt	mi
 8005854:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005858:	3302      	addmi	r3, #2
 800585a:	f8c9 3000 	strmi.w	r3, [r9]
 800585e:	6825      	ldr	r5, [r4, #0]
 8005860:	f015 0506 	ands.w	r5, r5, #6
 8005864:	d107      	bne.n	8005876 <_printf_common+0x52>
 8005866:	f104 0a19 	add.w	sl, r4, #25
 800586a:	68e3      	ldr	r3, [r4, #12]
 800586c:	f8d9 2000 	ldr.w	r2, [r9]
 8005870:	1a9b      	subs	r3, r3, r2
 8005872:	42ab      	cmp	r3, r5
 8005874:	dc28      	bgt.n	80058c8 <_printf_common+0xa4>
 8005876:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800587a:	6822      	ldr	r2, [r4, #0]
 800587c:	3300      	adds	r3, #0
 800587e:	bf18      	it	ne
 8005880:	2301      	movne	r3, #1
 8005882:	0692      	lsls	r2, r2, #26
 8005884:	d42d      	bmi.n	80058e2 <_printf_common+0xbe>
 8005886:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800588a:	4639      	mov	r1, r7
 800588c:	4630      	mov	r0, r6
 800588e:	47c0      	blx	r8
 8005890:	3001      	adds	r0, #1
 8005892:	d020      	beq.n	80058d6 <_printf_common+0xb2>
 8005894:	6823      	ldr	r3, [r4, #0]
 8005896:	68e5      	ldr	r5, [r4, #12]
 8005898:	f8d9 2000 	ldr.w	r2, [r9]
 800589c:	f003 0306 	and.w	r3, r3, #6
 80058a0:	2b04      	cmp	r3, #4
 80058a2:	bf08      	it	eq
 80058a4:	1aad      	subeq	r5, r5, r2
 80058a6:	68a3      	ldr	r3, [r4, #8]
 80058a8:	6922      	ldr	r2, [r4, #16]
 80058aa:	bf0c      	ite	eq
 80058ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058b0:	2500      	movne	r5, #0
 80058b2:	4293      	cmp	r3, r2
 80058b4:	bfc4      	itt	gt
 80058b6:	1a9b      	subgt	r3, r3, r2
 80058b8:	18ed      	addgt	r5, r5, r3
 80058ba:	f04f 0900 	mov.w	r9, #0
 80058be:	341a      	adds	r4, #26
 80058c0:	454d      	cmp	r5, r9
 80058c2:	d11a      	bne.n	80058fa <_printf_common+0xd6>
 80058c4:	2000      	movs	r0, #0
 80058c6:	e008      	b.n	80058da <_printf_common+0xb6>
 80058c8:	2301      	movs	r3, #1
 80058ca:	4652      	mov	r2, sl
 80058cc:	4639      	mov	r1, r7
 80058ce:	4630      	mov	r0, r6
 80058d0:	47c0      	blx	r8
 80058d2:	3001      	adds	r0, #1
 80058d4:	d103      	bne.n	80058de <_printf_common+0xba>
 80058d6:	f04f 30ff 	mov.w	r0, #4294967295
 80058da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058de:	3501      	adds	r5, #1
 80058e0:	e7c3      	b.n	800586a <_printf_common+0x46>
 80058e2:	18e1      	adds	r1, r4, r3
 80058e4:	1c5a      	adds	r2, r3, #1
 80058e6:	2030      	movs	r0, #48	; 0x30
 80058e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058ec:	4422      	add	r2, r4
 80058ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058f6:	3302      	adds	r3, #2
 80058f8:	e7c5      	b.n	8005886 <_printf_common+0x62>
 80058fa:	2301      	movs	r3, #1
 80058fc:	4622      	mov	r2, r4
 80058fe:	4639      	mov	r1, r7
 8005900:	4630      	mov	r0, r6
 8005902:	47c0      	blx	r8
 8005904:	3001      	adds	r0, #1
 8005906:	d0e6      	beq.n	80058d6 <_printf_common+0xb2>
 8005908:	f109 0901 	add.w	r9, r9, #1
 800590c:	e7d8      	b.n	80058c0 <_printf_common+0x9c>
	...

08005910 <_printf_i>:
 8005910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005914:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005918:	460c      	mov	r4, r1
 800591a:	7e09      	ldrb	r1, [r1, #24]
 800591c:	b085      	sub	sp, #20
 800591e:	296e      	cmp	r1, #110	; 0x6e
 8005920:	4617      	mov	r7, r2
 8005922:	4606      	mov	r6, r0
 8005924:	4698      	mov	r8, r3
 8005926:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005928:	f000 80b3 	beq.w	8005a92 <_printf_i+0x182>
 800592c:	d822      	bhi.n	8005974 <_printf_i+0x64>
 800592e:	2963      	cmp	r1, #99	; 0x63
 8005930:	d036      	beq.n	80059a0 <_printf_i+0x90>
 8005932:	d80a      	bhi.n	800594a <_printf_i+0x3a>
 8005934:	2900      	cmp	r1, #0
 8005936:	f000 80b9 	beq.w	8005aac <_printf_i+0x19c>
 800593a:	2958      	cmp	r1, #88	; 0x58
 800593c:	f000 8083 	beq.w	8005a46 <_printf_i+0x136>
 8005940:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005944:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005948:	e032      	b.n	80059b0 <_printf_i+0xa0>
 800594a:	2964      	cmp	r1, #100	; 0x64
 800594c:	d001      	beq.n	8005952 <_printf_i+0x42>
 800594e:	2969      	cmp	r1, #105	; 0x69
 8005950:	d1f6      	bne.n	8005940 <_printf_i+0x30>
 8005952:	6820      	ldr	r0, [r4, #0]
 8005954:	6813      	ldr	r3, [r2, #0]
 8005956:	0605      	lsls	r5, r0, #24
 8005958:	f103 0104 	add.w	r1, r3, #4
 800595c:	d52a      	bpl.n	80059b4 <_printf_i+0xa4>
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6011      	str	r1, [r2, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	da03      	bge.n	800596e <_printf_i+0x5e>
 8005966:	222d      	movs	r2, #45	; 0x2d
 8005968:	425b      	negs	r3, r3
 800596a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800596e:	486f      	ldr	r0, [pc, #444]	; (8005b2c <_printf_i+0x21c>)
 8005970:	220a      	movs	r2, #10
 8005972:	e039      	b.n	80059e8 <_printf_i+0xd8>
 8005974:	2973      	cmp	r1, #115	; 0x73
 8005976:	f000 809d 	beq.w	8005ab4 <_printf_i+0x1a4>
 800597a:	d808      	bhi.n	800598e <_printf_i+0x7e>
 800597c:	296f      	cmp	r1, #111	; 0x6f
 800597e:	d020      	beq.n	80059c2 <_printf_i+0xb2>
 8005980:	2970      	cmp	r1, #112	; 0x70
 8005982:	d1dd      	bne.n	8005940 <_printf_i+0x30>
 8005984:	6823      	ldr	r3, [r4, #0]
 8005986:	f043 0320 	orr.w	r3, r3, #32
 800598a:	6023      	str	r3, [r4, #0]
 800598c:	e003      	b.n	8005996 <_printf_i+0x86>
 800598e:	2975      	cmp	r1, #117	; 0x75
 8005990:	d017      	beq.n	80059c2 <_printf_i+0xb2>
 8005992:	2978      	cmp	r1, #120	; 0x78
 8005994:	d1d4      	bne.n	8005940 <_printf_i+0x30>
 8005996:	2378      	movs	r3, #120	; 0x78
 8005998:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800599c:	4864      	ldr	r0, [pc, #400]	; (8005b30 <_printf_i+0x220>)
 800599e:	e055      	b.n	8005a4c <_printf_i+0x13c>
 80059a0:	6813      	ldr	r3, [r2, #0]
 80059a2:	1d19      	adds	r1, r3, #4
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6011      	str	r1, [r2, #0]
 80059a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059b0:	2301      	movs	r3, #1
 80059b2:	e08c      	b.n	8005ace <_printf_i+0x1be>
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	6011      	str	r1, [r2, #0]
 80059b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059bc:	bf18      	it	ne
 80059be:	b21b      	sxthne	r3, r3
 80059c0:	e7cf      	b.n	8005962 <_printf_i+0x52>
 80059c2:	6813      	ldr	r3, [r2, #0]
 80059c4:	6825      	ldr	r5, [r4, #0]
 80059c6:	1d18      	adds	r0, r3, #4
 80059c8:	6010      	str	r0, [r2, #0]
 80059ca:	0628      	lsls	r0, r5, #24
 80059cc:	d501      	bpl.n	80059d2 <_printf_i+0xc2>
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	e002      	b.n	80059d8 <_printf_i+0xc8>
 80059d2:	0668      	lsls	r0, r5, #25
 80059d4:	d5fb      	bpl.n	80059ce <_printf_i+0xbe>
 80059d6:	881b      	ldrh	r3, [r3, #0]
 80059d8:	4854      	ldr	r0, [pc, #336]	; (8005b2c <_printf_i+0x21c>)
 80059da:	296f      	cmp	r1, #111	; 0x6f
 80059dc:	bf14      	ite	ne
 80059de:	220a      	movne	r2, #10
 80059e0:	2208      	moveq	r2, #8
 80059e2:	2100      	movs	r1, #0
 80059e4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059e8:	6865      	ldr	r5, [r4, #4]
 80059ea:	60a5      	str	r5, [r4, #8]
 80059ec:	2d00      	cmp	r5, #0
 80059ee:	f2c0 8095 	blt.w	8005b1c <_printf_i+0x20c>
 80059f2:	6821      	ldr	r1, [r4, #0]
 80059f4:	f021 0104 	bic.w	r1, r1, #4
 80059f8:	6021      	str	r1, [r4, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d13d      	bne.n	8005a7a <_printf_i+0x16a>
 80059fe:	2d00      	cmp	r5, #0
 8005a00:	f040 808e 	bne.w	8005b20 <_printf_i+0x210>
 8005a04:	4665      	mov	r5, ip
 8005a06:	2a08      	cmp	r2, #8
 8005a08:	d10b      	bne.n	8005a22 <_printf_i+0x112>
 8005a0a:	6823      	ldr	r3, [r4, #0]
 8005a0c:	07db      	lsls	r3, r3, #31
 8005a0e:	d508      	bpl.n	8005a22 <_printf_i+0x112>
 8005a10:	6923      	ldr	r3, [r4, #16]
 8005a12:	6862      	ldr	r2, [r4, #4]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	bfde      	ittt	le
 8005a18:	2330      	movle	r3, #48	; 0x30
 8005a1a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a1e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a22:	ebac 0305 	sub.w	r3, ip, r5
 8005a26:	6123      	str	r3, [r4, #16]
 8005a28:	f8cd 8000 	str.w	r8, [sp]
 8005a2c:	463b      	mov	r3, r7
 8005a2e:	aa03      	add	r2, sp, #12
 8005a30:	4621      	mov	r1, r4
 8005a32:	4630      	mov	r0, r6
 8005a34:	f7ff fef6 	bl	8005824 <_printf_common>
 8005a38:	3001      	adds	r0, #1
 8005a3a:	d14d      	bne.n	8005ad8 <_printf_i+0x1c8>
 8005a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a40:	b005      	add	sp, #20
 8005a42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a46:	4839      	ldr	r0, [pc, #228]	; (8005b2c <_printf_i+0x21c>)
 8005a48:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005a4c:	6813      	ldr	r3, [r2, #0]
 8005a4e:	6821      	ldr	r1, [r4, #0]
 8005a50:	1d1d      	adds	r5, r3, #4
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6015      	str	r5, [r2, #0]
 8005a56:	060a      	lsls	r2, r1, #24
 8005a58:	d50b      	bpl.n	8005a72 <_printf_i+0x162>
 8005a5a:	07ca      	lsls	r2, r1, #31
 8005a5c:	bf44      	itt	mi
 8005a5e:	f041 0120 	orrmi.w	r1, r1, #32
 8005a62:	6021      	strmi	r1, [r4, #0]
 8005a64:	b91b      	cbnz	r3, 8005a6e <_printf_i+0x15e>
 8005a66:	6822      	ldr	r2, [r4, #0]
 8005a68:	f022 0220 	bic.w	r2, r2, #32
 8005a6c:	6022      	str	r2, [r4, #0]
 8005a6e:	2210      	movs	r2, #16
 8005a70:	e7b7      	b.n	80059e2 <_printf_i+0xd2>
 8005a72:	064d      	lsls	r5, r1, #25
 8005a74:	bf48      	it	mi
 8005a76:	b29b      	uxthmi	r3, r3
 8005a78:	e7ef      	b.n	8005a5a <_printf_i+0x14a>
 8005a7a:	4665      	mov	r5, ip
 8005a7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a80:	fb02 3311 	mls	r3, r2, r1, r3
 8005a84:	5cc3      	ldrb	r3, [r0, r3]
 8005a86:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	2900      	cmp	r1, #0
 8005a8e:	d1f5      	bne.n	8005a7c <_printf_i+0x16c>
 8005a90:	e7b9      	b.n	8005a06 <_printf_i+0xf6>
 8005a92:	6813      	ldr	r3, [r2, #0]
 8005a94:	6825      	ldr	r5, [r4, #0]
 8005a96:	6961      	ldr	r1, [r4, #20]
 8005a98:	1d18      	adds	r0, r3, #4
 8005a9a:	6010      	str	r0, [r2, #0]
 8005a9c:	0628      	lsls	r0, r5, #24
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	d501      	bpl.n	8005aa6 <_printf_i+0x196>
 8005aa2:	6019      	str	r1, [r3, #0]
 8005aa4:	e002      	b.n	8005aac <_printf_i+0x19c>
 8005aa6:	066a      	lsls	r2, r5, #25
 8005aa8:	d5fb      	bpl.n	8005aa2 <_printf_i+0x192>
 8005aaa:	8019      	strh	r1, [r3, #0]
 8005aac:	2300      	movs	r3, #0
 8005aae:	6123      	str	r3, [r4, #16]
 8005ab0:	4665      	mov	r5, ip
 8005ab2:	e7b9      	b.n	8005a28 <_printf_i+0x118>
 8005ab4:	6813      	ldr	r3, [r2, #0]
 8005ab6:	1d19      	adds	r1, r3, #4
 8005ab8:	6011      	str	r1, [r2, #0]
 8005aba:	681d      	ldr	r5, [r3, #0]
 8005abc:	6862      	ldr	r2, [r4, #4]
 8005abe:	2100      	movs	r1, #0
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	f7fa fb8d 	bl	80001e0 <memchr>
 8005ac6:	b108      	cbz	r0, 8005acc <_printf_i+0x1bc>
 8005ac8:	1b40      	subs	r0, r0, r5
 8005aca:	6060      	str	r0, [r4, #4]
 8005acc:	6863      	ldr	r3, [r4, #4]
 8005ace:	6123      	str	r3, [r4, #16]
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ad6:	e7a7      	b.n	8005a28 <_printf_i+0x118>
 8005ad8:	6923      	ldr	r3, [r4, #16]
 8005ada:	462a      	mov	r2, r5
 8005adc:	4639      	mov	r1, r7
 8005ade:	4630      	mov	r0, r6
 8005ae0:	47c0      	blx	r8
 8005ae2:	3001      	adds	r0, #1
 8005ae4:	d0aa      	beq.n	8005a3c <_printf_i+0x12c>
 8005ae6:	6823      	ldr	r3, [r4, #0]
 8005ae8:	079b      	lsls	r3, r3, #30
 8005aea:	d413      	bmi.n	8005b14 <_printf_i+0x204>
 8005aec:	68e0      	ldr	r0, [r4, #12]
 8005aee:	9b03      	ldr	r3, [sp, #12]
 8005af0:	4298      	cmp	r0, r3
 8005af2:	bfb8      	it	lt
 8005af4:	4618      	movlt	r0, r3
 8005af6:	e7a3      	b.n	8005a40 <_printf_i+0x130>
 8005af8:	2301      	movs	r3, #1
 8005afa:	464a      	mov	r2, r9
 8005afc:	4639      	mov	r1, r7
 8005afe:	4630      	mov	r0, r6
 8005b00:	47c0      	blx	r8
 8005b02:	3001      	adds	r0, #1
 8005b04:	d09a      	beq.n	8005a3c <_printf_i+0x12c>
 8005b06:	3501      	adds	r5, #1
 8005b08:	68e3      	ldr	r3, [r4, #12]
 8005b0a:	9a03      	ldr	r2, [sp, #12]
 8005b0c:	1a9b      	subs	r3, r3, r2
 8005b0e:	42ab      	cmp	r3, r5
 8005b10:	dcf2      	bgt.n	8005af8 <_printf_i+0x1e8>
 8005b12:	e7eb      	b.n	8005aec <_printf_i+0x1dc>
 8005b14:	2500      	movs	r5, #0
 8005b16:	f104 0919 	add.w	r9, r4, #25
 8005b1a:	e7f5      	b.n	8005b08 <_printf_i+0x1f8>
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1ac      	bne.n	8005a7a <_printf_i+0x16a>
 8005b20:	7803      	ldrb	r3, [r0, #0]
 8005b22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b26:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b2a:	e76c      	b.n	8005a06 <_printf_i+0xf6>
 8005b2c:	08005da5 	.word	0x08005da5
 8005b30:	08005db6 	.word	0x08005db6

08005b34 <memcpy>:
 8005b34:	b510      	push	{r4, lr}
 8005b36:	1e43      	subs	r3, r0, #1
 8005b38:	440a      	add	r2, r1
 8005b3a:	4291      	cmp	r1, r2
 8005b3c:	d100      	bne.n	8005b40 <memcpy+0xc>
 8005b3e:	bd10      	pop	{r4, pc}
 8005b40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b48:	e7f7      	b.n	8005b3a <memcpy+0x6>

08005b4a <memmove>:
 8005b4a:	4288      	cmp	r0, r1
 8005b4c:	b510      	push	{r4, lr}
 8005b4e:	eb01 0302 	add.w	r3, r1, r2
 8005b52:	d807      	bhi.n	8005b64 <memmove+0x1a>
 8005b54:	1e42      	subs	r2, r0, #1
 8005b56:	4299      	cmp	r1, r3
 8005b58:	d00a      	beq.n	8005b70 <memmove+0x26>
 8005b5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b5e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005b62:	e7f8      	b.n	8005b56 <memmove+0xc>
 8005b64:	4283      	cmp	r3, r0
 8005b66:	d9f5      	bls.n	8005b54 <memmove+0xa>
 8005b68:	1881      	adds	r1, r0, r2
 8005b6a:	1ad2      	subs	r2, r2, r3
 8005b6c:	42d3      	cmn	r3, r2
 8005b6e:	d100      	bne.n	8005b72 <memmove+0x28>
 8005b70:	bd10      	pop	{r4, pc}
 8005b72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b76:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005b7a:	e7f7      	b.n	8005b6c <memmove+0x22>

08005b7c <_free_r>:
 8005b7c:	b538      	push	{r3, r4, r5, lr}
 8005b7e:	4605      	mov	r5, r0
 8005b80:	2900      	cmp	r1, #0
 8005b82:	d045      	beq.n	8005c10 <_free_r+0x94>
 8005b84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b88:	1f0c      	subs	r4, r1, #4
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	bfb8      	it	lt
 8005b8e:	18e4      	addlt	r4, r4, r3
 8005b90:	f000 f8d2 	bl	8005d38 <__malloc_lock>
 8005b94:	4a1f      	ldr	r2, [pc, #124]	; (8005c14 <_free_r+0x98>)
 8005b96:	6813      	ldr	r3, [r2, #0]
 8005b98:	4610      	mov	r0, r2
 8005b9a:	b933      	cbnz	r3, 8005baa <_free_r+0x2e>
 8005b9c:	6063      	str	r3, [r4, #4]
 8005b9e:	6014      	str	r4, [r2, #0]
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ba6:	f000 b8c8 	b.w	8005d3a <__malloc_unlock>
 8005baa:	42a3      	cmp	r3, r4
 8005bac:	d90c      	bls.n	8005bc8 <_free_r+0x4c>
 8005bae:	6821      	ldr	r1, [r4, #0]
 8005bb0:	1862      	adds	r2, r4, r1
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	bf04      	itt	eq
 8005bb6:	681a      	ldreq	r2, [r3, #0]
 8005bb8:	685b      	ldreq	r3, [r3, #4]
 8005bba:	6063      	str	r3, [r4, #4]
 8005bbc:	bf04      	itt	eq
 8005bbe:	1852      	addeq	r2, r2, r1
 8005bc0:	6022      	streq	r2, [r4, #0]
 8005bc2:	6004      	str	r4, [r0, #0]
 8005bc4:	e7ec      	b.n	8005ba0 <_free_r+0x24>
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	b10a      	cbz	r2, 8005bd0 <_free_r+0x54>
 8005bcc:	42a2      	cmp	r2, r4
 8005bce:	d9fa      	bls.n	8005bc6 <_free_r+0x4a>
 8005bd0:	6819      	ldr	r1, [r3, #0]
 8005bd2:	1858      	adds	r0, r3, r1
 8005bd4:	42a0      	cmp	r0, r4
 8005bd6:	d10b      	bne.n	8005bf0 <_free_r+0x74>
 8005bd8:	6820      	ldr	r0, [r4, #0]
 8005bda:	4401      	add	r1, r0
 8005bdc:	1858      	adds	r0, r3, r1
 8005bde:	4282      	cmp	r2, r0
 8005be0:	6019      	str	r1, [r3, #0]
 8005be2:	d1dd      	bne.n	8005ba0 <_free_r+0x24>
 8005be4:	6810      	ldr	r0, [r2, #0]
 8005be6:	6852      	ldr	r2, [r2, #4]
 8005be8:	605a      	str	r2, [r3, #4]
 8005bea:	4401      	add	r1, r0
 8005bec:	6019      	str	r1, [r3, #0]
 8005bee:	e7d7      	b.n	8005ba0 <_free_r+0x24>
 8005bf0:	d902      	bls.n	8005bf8 <_free_r+0x7c>
 8005bf2:	230c      	movs	r3, #12
 8005bf4:	602b      	str	r3, [r5, #0]
 8005bf6:	e7d3      	b.n	8005ba0 <_free_r+0x24>
 8005bf8:	6820      	ldr	r0, [r4, #0]
 8005bfa:	1821      	adds	r1, r4, r0
 8005bfc:	428a      	cmp	r2, r1
 8005bfe:	bf04      	itt	eq
 8005c00:	6811      	ldreq	r1, [r2, #0]
 8005c02:	6852      	ldreq	r2, [r2, #4]
 8005c04:	6062      	str	r2, [r4, #4]
 8005c06:	bf04      	itt	eq
 8005c08:	1809      	addeq	r1, r1, r0
 8005c0a:	6021      	streq	r1, [r4, #0]
 8005c0c:	605c      	str	r4, [r3, #4]
 8005c0e:	e7c7      	b.n	8005ba0 <_free_r+0x24>
 8005c10:	bd38      	pop	{r3, r4, r5, pc}
 8005c12:	bf00      	nop
 8005c14:	200000b8 	.word	0x200000b8

08005c18 <_malloc_r>:
 8005c18:	b570      	push	{r4, r5, r6, lr}
 8005c1a:	1ccd      	adds	r5, r1, #3
 8005c1c:	f025 0503 	bic.w	r5, r5, #3
 8005c20:	3508      	adds	r5, #8
 8005c22:	2d0c      	cmp	r5, #12
 8005c24:	bf38      	it	cc
 8005c26:	250c      	movcc	r5, #12
 8005c28:	2d00      	cmp	r5, #0
 8005c2a:	4606      	mov	r6, r0
 8005c2c:	db01      	blt.n	8005c32 <_malloc_r+0x1a>
 8005c2e:	42a9      	cmp	r1, r5
 8005c30:	d903      	bls.n	8005c3a <_malloc_r+0x22>
 8005c32:	230c      	movs	r3, #12
 8005c34:	6033      	str	r3, [r6, #0]
 8005c36:	2000      	movs	r0, #0
 8005c38:	bd70      	pop	{r4, r5, r6, pc}
 8005c3a:	f000 f87d 	bl	8005d38 <__malloc_lock>
 8005c3e:	4a21      	ldr	r2, [pc, #132]	; (8005cc4 <_malloc_r+0xac>)
 8005c40:	6814      	ldr	r4, [r2, #0]
 8005c42:	4621      	mov	r1, r4
 8005c44:	b991      	cbnz	r1, 8005c6c <_malloc_r+0x54>
 8005c46:	4c20      	ldr	r4, [pc, #128]	; (8005cc8 <_malloc_r+0xb0>)
 8005c48:	6823      	ldr	r3, [r4, #0]
 8005c4a:	b91b      	cbnz	r3, 8005c54 <_malloc_r+0x3c>
 8005c4c:	4630      	mov	r0, r6
 8005c4e:	f000 f863 	bl	8005d18 <_sbrk_r>
 8005c52:	6020      	str	r0, [r4, #0]
 8005c54:	4629      	mov	r1, r5
 8005c56:	4630      	mov	r0, r6
 8005c58:	f000 f85e 	bl	8005d18 <_sbrk_r>
 8005c5c:	1c43      	adds	r3, r0, #1
 8005c5e:	d124      	bne.n	8005caa <_malloc_r+0x92>
 8005c60:	230c      	movs	r3, #12
 8005c62:	6033      	str	r3, [r6, #0]
 8005c64:	4630      	mov	r0, r6
 8005c66:	f000 f868 	bl	8005d3a <__malloc_unlock>
 8005c6a:	e7e4      	b.n	8005c36 <_malloc_r+0x1e>
 8005c6c:	680b      	ldr	r3, [r1, #0]
 8005c6e:	1b5b      	subs	r3, r3, r5
 8005c70:	d418      	bmi.n	8005ca4 <_malloc_r+0x8c>
 8005c72:	2b0b      	cmp	r3, #11
 8005c74:	d90f      	bls.n	8005c96 <_malloc_r+0x7e>
 8005c76:	600b      	str	r3, [r1, #0]
 8005c78:	50cd      	str	r5, [r1, r3]
 8005c7a:	18cc      	adds	r4, r1, r3
 8005c7c:	4630      	mov	r0, r6
 8005c7e:	f000 f85c 	bl	8005d3a <__malloc_unlock>
 8005c82:	f104 000b 	add.w	r0, r4, #11
 8005c86:	1d23      	adds	r3, r4, #4
 8005c88:	f020 0007 	bic.w	r0, r0, #7
 8005c8c:	1ac3      	subs	r3, r0, r3
 8005c8e:	d0d3      	beq.n	8005c38 <_malloc_r+0x20>
 8005c90:	425a      	negs	r2, r3
 8005c92:	50e2      	str	r2, [r4, r3]
 8005c94:	e7d0      	b.n	8005c38 <_malloc_r+0x20>
 8005c96:	428c      	cmp	r4, r1
 8005c98:	684b      	ldr	r3, [r1, #4]
 8005c9a:	bf16      	itet	ne
 8005c9c:	6063      	strne	r3, [r4, #4]
 8005c9e:	6013      	streq	r3, [r2, #0]
 8005ca0:	460c      	movne	r4, r1
 8005ca2:	e7eb      	b.n	8005c7c <_malloc_r+0x64>
 8005ca4:	460c      	mov	r4, r1
 8005ca6:	6849      	ldr	r1, [r1, #4]
 8005ca8:	e7cc      	b.n	8005c44 <_malloc_r+0x2c>
 8005caa:	1cc4      	adds	r4, r0, #3
 8005cac:	f024 0403 	bic.w	r4, r4, #3
 8005cb0:	42a0      	cmp	r0, r4
 8005cb2:	d005      	beq.n	8005cc0 <_malloc_r+0xa8>
 8005cb4:	1a21      	subs	r1, r4, r0
 8005cb6:	4630      	mov	r0, r6
 8005cb8:	f000 f82e 	bl	8005d18 <_sbrk_r>
 8005cbc:	3001      	adds	r0, #1
 8005cbe:	d0cf      	beq.n	8005c60 <_malloc_r+0x48>
 8005cc0:	6025      	str	r5, [r4, #0]
 8005cc2:	e7db      	b.n	8005c7c <_malloc_r+0x64>
 8005cc4:	200000b8 	.word	0x200000b8
 8005cc8:	200000bc 	.word	0x200000bc

08005ccc <_realloc_r>:
 8005ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cce:	4607      	mov	r7, r0
 8005cd0:	4614      	mov	r4, r2
 8005cd2:	460e      	mov	r6, r1
 8005cd4:	b921      	cbnz	r1, 8005ce0 <_realloc_r+0x14>
 8005cd6:	4611      	mov	r1, r2
 8005cd8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005cdc:	f7ff bf9c 	b.w	8005c18 <_malloc_r>
 8005ce0:	b922      	cbnz	r2, 8005cec <_realloc_r+0x20>
 8005ce2:	f7ff ff4b 	bl	8005b7c <_free_r>
 8005ce6:	4625      	mov	r5, r4
 8005ce8:	4628      	mov	r0, r5
 8005cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cec:	f000 f826 	bl	8005d3c <_malloc_usable_size_r>
 8005cf0:	42a0      	cmp	r0, r4
 8005cf2:	d20f      	bcs.n	8005d14 <_realloc_r+0x48>
 8005cf4:	4621      	mov	r1, r4
 8005cf6:	4638      	mov	r0, r7
 8005cf8:	f7ff ff8e 	bl	8005c18 <_malloc_r>
 8005cfc:	4605      	mov	r5, r0
 8005cfe:	2800      	cmp	r0, #0
 8005d00:	d0f2      	beq.n	8005ce8 <_realloc_r+0x1c>
 8005d02:	4631      	mov	r1, r6
 8005d04:	4622      	mov	r2, r4
 8005d06:	f7ff ff15 	bl	8005b34 <memcpy>
 8005d0a:	4631      	mov	r1, r6
 8005d0c:	4638      	mov	r0, r7
 8005d0e:	f7ff ff35 	bl	8005b7c <_free_r>
 8005d12:	e7e9      	b.n	8005ce8 <_realloc_r+0x1c>
 8005d14:	4635      	mov	r5, r6
 8005d16:	e7e7      	b.n	8005ce8 <_realloc_r+0x1c>

08005d18 <_sbrk_r>:
 8005d18:	b538      	push	{r3, r4, r5, lr}
 8005d1a:	4c06      	ldr	r4, [pc, #24]	; (8005d34 <_sbrk_r+0x1c>)
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	4605      	mov	r5, r0
 8005d20:	4608      	mov	r0, r1
 8005d22:	6023      	str	r3, [r4, #0]
 8005d24:	f7fb fd1c 	bl	8001760 <_sbrk>
 8005d28:	1c43      	adds	r3, r0, #1
 8005d2a:	d102      	bne.n	8005d32 <_sbrk_r+0x1a>
 8005d2c:	6823      	ldr	r3, [r4, #0]
 8005d2e:	b103      	cbz	r3, 8005d32 <_sbrk_r+0x1a>
 8005d30:	602b      	str	r3, [r5, #0]
 8005d32:	bd38      	pop	{r3, r4, r5, pc}
 8005d34:	2000029c 	.word	0x2000029c

08005d38 <__malloc_lock>:
 8005d38:	4770      	bx	lr

08005d3a <__malloc_unlock>:
 8005d3a:	4770      	bx	lr

08005d3c <_malloc_usable_size_r>:
 8005d3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d40:	1f18      	subs	r0, r3, #4
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	bfbc      	itt	lt
 8005d46:	580b      	ldrlt	r3, [r1, r0]
 8005d48:	18c0      	addlt	r0, r0, r3
 8005d4a:	4770      	bx	lr

08005d4c <_init>:
 8005d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d4e:	bf00      	nop
 8005d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d52:	bc08      	pop	{r3}
 8005d54:	469e      	mov	lr, r3
 8005d56:	4770      	bx	lr

08005d58 <_fini>:
 8005d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d5a:	bf00      	nop
 8005d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d5e:	bc08      	pop	{r3}
 8005d60:	469e      	mov	lr, r3
 8005d62:	4770      	bx	lr
